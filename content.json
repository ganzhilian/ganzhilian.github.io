{"meta":{"title":"LuckyFeng的博客","subtitle":"","description":"好好学习, 天天向上","author":"覃烽","url":"http://example.com","root":"/"},"pages":[{"title":"关于","date":"2021-07-12T07:59:43.755Z","updated":"2021-07-12T07:59:43.755Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2021-07-12T07:59:43.755Z","updated":"2021-07-12T07:59:43.755Z","comments":false,"path":"books/index.html","permalink":"http://example.com/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-07-12T07:59:43.756Z","updated":"2021-07-12T07:59:43.756Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-07-12T07:59:43.756Z","updated":"2021-07-12T07:59:43.756Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-07-12T07:59:43.757Z","updated":"2021-07-12T07:59:43.757Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-07-12T07:59:43.758Z","updated":"2021-07-12T07:59:43.758Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Vue","slug":"Vue","date":"2021-12-10T13:33:00.000Z","updated":"2021-12-10T13:33:45.743Z","comments":true,"path":"2021/12/10/Vue/","link":"","permalink":"http://example.com/2021/12/10/Vue/","excerpt":"","text":"Vue环境配置 因为需要安装Vue的插件, 所以需要访问到外网, 访问外网的软件地址 地址: https://iguge.xyz/ 安装Vue工具插件 安装地址: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd/related 安装VSCode插件 工作原理: 它相当于一个本机的小型服务器, 启动的时候, 会将你的页面进行一个热部署的操作, 就是你代码修改的时候, 页面会直接发生改变, 不需要反复刷新. 使用:","categories":[{"name":"前端","slug":"前端","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://example.com/tags/Vue/"}]},{"title":"spring","slug":"spring","date":"2021-09-22T11:42:21.000Z","updated":"2021-10-28T14:39:23.967Z","comments":true,"path":"2021/09/22/spring/","link":"","permalink":"http://example.com/2021/09/22/spring/","excerpt":"","text":"IOC和DI的区别​ 控制反转是把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的”控制反转”就是对组件对象控制权的转移，从程序代码本身转移到了外部容器，由容器来创建对象并管理对象之间的依赖关系。 ​ 依赖注入的基本原则是应用组件不应该负责查找资源或者其他依赖的协作对象。配置对象的工作应该由容器负责，查找资源的逻辑应该从应用组件的代码中抽取出来，交给容器来完成。DI是对IoC更准确的描述，即组件之间的依赖关系由容器在运行期决定，形象的来说，即由容器动态的将某种依赖关系注入到组件之中。依赖注入可以通过setter方法注入（设值注入）、构造器注入和接口注入三种方式来实现，Spring支持setter注入和构造器注入，通常使用构造器注入来注入必须的依赖关系，对于可选的依赖关系，则setter注入是更好的选择，setter注入需要类提供无参构造器或者无参的静态工厂方法来创建对象。 即组件之间的依赖关系由容器在运行期决定，形象的来说，即由容器动态的将某种依赖关系注入到组件之中。……","categories":[{"name":"框架","slug":"框架","permalink":"http://example.com/categories/%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"框架","slug":"框架","permalink":"http://example.com/tags/%E6%A1%86%E6%9E%B6/"}]},{"title":"mybatis学习(一)","slug":"mybatis学习-一","date":"2021-08-31T14:15:17.000Z","updated":"2021-09-12T13:37:50.537Z","comments":true,"path":"2021/08/31/mybatis学习-一/","link":"","permalink":"http://example.com/2021/08/31/mybatis%E5%AD%A6%E4%B9%A0-%E4%B8%80/","excerpt":"","text":"Mybatis执行原理 Mybatis框架简介 官方学习文档 - https://mybatis.org/mybatis-3/zh/index.html 属于主流的持久层[和db交互的层,负责和db打交道]框架,不负责业务操作.只会涉及到sql语句的编写. 属于ORM[对象关系映射 - 表和实体类息息相关的关系]框架,ORM是一个思想.ORM框架就是这个思想的”实现者” Mybatis是属于半自动的ORM框架 - MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作. 复杂的查询那么仍然是需要手动进行映射的[列-属性] Mybatis底层是基于jdbc代码的. mybatis前身叫ibatis 自己对mybatis的理解: 本质就是通过使用简单的xml方式将数据库中的数据转化为java对象, 只需要关心底层的sql语句, 避免了 JDBC 代码和手动设置参数以及获取结果集. 原文網址：https://kknews.cc/code/eb3pjeq.html Mybatis环境的搭建 使用框架之前,都是需要经过繁琐的配置的.除了SpringBoot[简化了配置] 最新版本 - 3.5.7 - https://github.com/mybatis/mybatis-3/releases 导入jar 项目的根目录下新建一个lib目录 - 用来存放第三方jar 1-1. mysql-connector-java-8.0.25.jar - mysql的驱动jar包 1-2. mybatis-3.5.7.jar - mybatis的jar包 选中jar - 右击 - Add As Library … - 把这俩个jar添加到类路径中[classpath] 配置文件 框架的配置文件要么是properties文件[支持,优先级是最高的],本次课程中推荐使用的配置文件是xml文件[结构比较清晰] 等待后面学习SpringBoot - 推荐使用的配置文件是yml文件[yarn语法] mybatis的主配置文件 mapper的映射文件 - 存储项目中的所有的sql语句.sql语句和应用程序进行了分离,方便sql语句的维护. mybatis的主配置文件 mybatis的运行时环境,mybatis框架能够被使用的前提是肯定会去读取这个配置文件.配置了该框架运行所有应该具备的信息. 推荐 - 放在src的根目录下mybatis-config.xml 1234567891011121314151617181920212223&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;!-- 配置环境的选择 - 开发环境下的配置 环境 - 开发环境,测试环境,产品上线[部署]环境 通过default的属性值来指定哪种环境会生效 --&gt; &lt;environments default=&quot;dev&quot;&gt; &lt;environment id=&quot;dev&quot;&gt; &lt;!-- mybatis的事务就是采用jdbc事务[由底层的数据库驱动决定了]--&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;!--配置数据源的 - POOLED - 相当于连接池 - 使用mybatis自带的--&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/j03s?useSSL=true&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=Asia/Shanghai&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt;&lt;/configuration&gt; 核心APISqlSessionFactoryBuilder 仅仅只会使用到一次. SqlSessionFactory build(InputStream in); 功能:读取xml的字节输入流来构建一个重量级的对象SqlSessionFactory - 相当于jdbc数据源对象[BasicDataSource]. SqlSessionFactory 重量级的对象 - 不能随意创建多个或者随意销毁 - 耗时间 - 占内存 - 单例 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例 SqlSession openSession();//获取Session对象 SqlSession 作用:负责和db进行CRUD操作. 与db进行一次会话 - 一次连接.相当于JDBC中的Connection对象.但是比jdbc多出缓存的功能. SqlSession=Connection[db连接] + Cache[默认的一级缓存]; SqlSession 的实例不是线程安全的，因此是不能被共享的.每个线程都应该有它自己的 SqlSession 实例. session应该是一个局部变量 回顾java知识点 当线程执行到方法的时候,就会在本地开辟一块区域 - 线程栈[独占的] 传统的开发方式 db设计 - 实体类设计 - User - Video 编写IUserDao接口,UserDaoImpl接口实现类 1User user = session.selectOne(&quot;userMapper.get&quot;,username); 编写映射文件 - tech/aistar/mapperxml - 目录下存储所有的映射文件user-mapper.xml 需要在mybatis-config.xml文件中配置映射文件. 1234&lt;mappers&gt; &lt;!-- 指定映射文件的配置路径--&gt; &lt;mapper resource=&quot;tech/aistar/mapperxml/user-mapper.xml&quot;&gt;&lt;/mapper&gt;&lt;/mappers&gt; 剖析 121. session = MybatisUtil.getSession();观察MybatisUtil - 读取了mybatis-config.xml文件 - user-mapper.xml 123452. 俩个文件都被加载到JVM内存了.user-mapper.xml里面的信息都是在内存中了.namespace=&quot;userMapper&quot;应该是唯一的,一个namespace应该是对应唯一的映射文件.因为项目中可能有多个映射文件.Map&lt;String,xml映射对象&gt; mapsmaps.put(&quot;userMapper&quot;,xml文件对应的映射对象); 123. selectOne(namespace.sql语句id值)XMl映射对象 变量 = maps.get(&quot;userMapper&quot;);//精准的定位到它自己的xml文件. 14. xml文件中会有很多个sql标签 - 每个sql标签的id应该是唯一的.精确拿到select标签 1235. 定位到select标签之后,利用xml的dom解析技术 - 标签体中的内容/标签属性的值select * from t_user where username = #&#123;username&#125;resultType=&quot;tech.aistar.model.entity.User&quot; 1234567891011126. Class&lt;?&gt; c = Class.forName(&quot;tech.aistar.model.entity.User&quot;); jdbc编程步骤pst = conn.preparedStatement(sql);T t = null;判断参数个数 - 发送参数 rs=pst.executeQuery();if(rs.next())&#123; //&#125; 映射文件配置注意点配置别名 在mybatis-config.xml文件中进行配置 123456789&lt;!-- 配置类型的别名--&gt;&lt;typeAliases&gt;&lt;!-- 一个一个配置--&gt;&lt;!-- &lt;typeAlias type=&quot;tech.aistar.model.entity.User&quot; alias=&quot;u&quot;&gt;&lt;/typeAlias&gt;--&gt;&lt;!-- 对项目中的实体类统计进行配置--&gt;&lt;!-- 扫包 - 实体类所在的包,默认分配一个别名,就是类型的小写--&gt;&lt;package name=&quot;tech.aistar.model&quot;/&gt;&lt;/typeAliases&gt; parameterType和resultType parameterType对应的参数的类型 内置对象的对象类型或者基本类型,可以简便的使用这些类型的别名,底层进行了特殊的处理了 比如:parameterType=”java.lang.String”可以简单表示为parameterType=”string” 比如:long-&gt;long或者别名_long. ①推荐如果遇到的基本数据类型,直接写它名称本身即可int-&gt;int ②如果遇到包装类型,推荐写它对应的基本类型的名称[就是包装类型的别名] ③内置的对象类型,诸如String,Date,Map,List等可以写它们的别名[这些单词的小写字母] resultType 只有select标签才需要指定resultType属性 mybatis什么时候才能够实现自动映射的效果 - 一定是查询出来的列名和实体类属性名高度保持一致 或者出来的列名是一个合法的匈牙利命名 - 实体类属性的小驼峰. 绑定失败的场景: 123456resultType=&quot;user&quot;select id uid,username uname,password,birthday from t_user where username = #&#123;username&#125;User&#123;id=null, username=&#x27;null&#x27;, password=&#x27;654321&#x27;, birthday=Thu Aug 26 00:00:00 CST 2021&#125; 为什么绑定失败 JdbcNBUtil.java String colName = rsmd.getColumnName(i);colName = changeColName(colName);//防止出现了匈牙利 -&gt; 小驼峰 Field f = c.getDeclaredField(colName);//冒出来了uid和冒出uname - &gt; 反射找不到对应的Field或者Method 说明了id和username并没有通过反射设置值. resultMap 应用场景一: 当查询的列值不能自动映射/绑定实体类的属性的时候,需要通过resultMap来进行一一绑定. mybatis有些场景下还是需要手动绑定 - 半自动的ORM框架. 12345678910111213&lt;!-- 手动映射--&gt;&lt;resultMap id=&quot;get_map&quot; type=&quot;user&quot;&gt;&lt;!-- 主键列映射--&gt;&lt;id column=&quot;uid&quot; property=&quot;id&quot;&gt;&lt;/id&gt;&lt;!-- 普通列映射--&gt;&lt;result column=&quot;uname&quot; property=&quot;username&quot;&gt;&lt;/result&gt;&lt;result column=&quot;birthday&quot; property=&quot;birthday&quot;&gt;&lt;/result&gt;&lt;result column=&quot;password&quot; property=&quot;password&quot;&gt;&lt;/result&gt;&lt;/resultMap&gt;&lt;select id=&quot;get&quot; parameterType=&quot;string&quot; resultMap=&quot;get_map&quot;&gt;select id uid,username uname,password,birthday from t_user where username = #&#123;username&#125;&lt;/select&gt; 剖析一下手动绑定的过程 1234567891011121314151617181920type=&quot;tech.aistar.model.pojo.user&quot; - &gt; Class&lt;?&gt; c = Class.forName(type);T t = (T)c.newInstance();result标签的顺序可以随机的 -&gt; 说明底层 - rs要么根据列的序号取[从1开始],可以根据列的名称去取. Object getObject(String columnLabel) throws SQLException;Object uname = rs.getObject(&quot;uname&quot;);property=&quot;username&quot; -&gt; 底层&quot;setUsername&quot;-&gt;Method m = c.getDeclaredMethod(&quot;setUsername&quot;);m.invoke(t,uname);//反射调用setter方法.加入method找不到 - Field f = c.getDeclaredField(&quot;username&quot;);f.set(t,uname);如果property=&quot;属性值&quot;找不到任何一个对应的method或者field -&gt; 直接抛出 There is no setter for property named &#x27;usernames&#x27; in &#x27;class tech.aistar.model.entity.User&#x27; selectOne和selectList区别 selectOne - 负责加载唯一的一条数据 - 返回的是一个单个对象 selectList - 负责加载多条数据,返回一个集合 如果在必须使用selectList,不小心使用到了selectOne.那么就会抛出异常 1org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 5 练习IVedioDao 完成crud 卡壳 - 不断抛出异常 - “思考代码-表面-背后“ - “理解规则 - 遵守规则” + 规范 idea中配置映射文件的模板 点击+ 12345678&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;&quot;&gt; &lt;/mapper&gt; 点击apply - ok 匈牙利&lt;-&gt;小驼峰自动映射12345678910111213141516 &lt;select id=&quot;getById&quot; resultType=&quot;video&quot; parameterType=&quot;int&quot;&gt; select * from t_video where id=#&#123;id&#125;&lt;/select&gt;列 - video_url user_id create_date-- 设置失败.Video&#123;id=20, title=&#x27;国庆节2&#x27;, createDate=null, price=100.0, videoUrl=&#x27;null&#x27;, userId=null&#125;第一种处理方式 - 使用resultMap手动进行映射.第二种处理方式 - 针对db中的特殊的匈牙利的命名方式 - 在mybatis-config.xml文件中进行设置.&lt;!-- 开启小驼峰命名映射--&gt;&lt;settings&gt; &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;&lt;/settings&gt; 占位符区别$和# 建议完善俩者区别 $ - 产生了sql注入的问题,把参数直接硬拼接到了sql中.相当于Statement 井号 123456#&#123;参数&#125; - 相当于PreparedStatement,占位符? //提前将这条语句进行预编译的. #&#123;title&#125; -&gt; ?//设置参数和发送参数select * from t_video where title = #&#123;title&#125; 剖析 12select * from t_video where title = #&#123;title&#125; 1234567891011121314151617181920212223select * from t_video where title = $&#123;title&#125;报错的原因:控制台已经后台生成的sql显示出来了 - select * from t_video where title = 国庆节2;把findByTile中的字符串参数直接硬拼接到了sql语句的占位符号去了.@Testpublic void testFindByTitle()&#123; videoDao.findByTitle(&quot;国庆节2&quot;).forEach(e-&gt; System.out.println(e));&#125;// 非要使用$&#123;title&#125;select * from t_video where title = &#x27;$&#123;title&#125;&#x27;videoDao.findByTitle(&quot;国庆节2&quot;).forEach(e-&gt; System.out.println(e));select * from t_video where title = &#x27;国庆节2&#x27;;//ok//产生sql注入了videoDao.findByTitle(&quot;国庆节3&#x27; or&#x27;1&#x27;=&#x27;1&quot;).forEach(e-&gt; System.out.println(e));select * from t_video where title = &#x27;国庆节3&#x27; or&#x27;1&#x27;=&#x27;1&#x27;; 参数名 如果是简单类型 - 单个参数[String,包装类型,基本数据类型] 123456789101112#&#123;参数名&#125;和$&#123;参数名&#125;是任意取名称的. id=#&#123;ttt&#125; id=#&#123;value&#125; id=#&#123;id&#125; 本质上#&#123;参数&#125; 等同于 ? &lt;select id=&quot;getById&quot; resultType=&quot;video&quot; parameterType=&quot;int&quot;&gt; select * from t_video where id=#&#123;id&#125;&lt;/select&gt; 推荐使用使用的是#&#123;value&#125;或者#&#123;方法的参数的名称&#125; 如果是自定义的对象类型 - 不能瞎写 1234 &lt;insert id=&quot;save&quot; parameterType=&quot;video&quot;&gt; insert into t_video values(#&#123;id&#125;,#&#123;title&#125;,#&#123;createDate&#125;,#&#123;price&#125;,#&#123;videoUrl&#125;,#&#123;userId&#125;)&lt;/insert&gt; 作业 评论 - crud Mapper代理开发方式 底层使用到的技术就是动态代理 - 动态代理技术[JDK]来在程序的运行期间来生成Mapper接口的实现类. 传统的方式还是需要手动写接口的实现类的. 遵守Mapper开发方式的规范 - 一定要遵守 创建包tech.aistar.mapper - 存放mapper接口 替代之前的dao包下的dao接口 制定Mapper接口 - 接口的命名必须要规范 - 实体类名Mapper - 比如UserMapper,VideoMapper 在Mapper接口中制定方法 一定是在Mapper接口所在的包下新建Mapper接口对应的映射文件,并且映射文件的命名一定要和它对应的Mapper接口的命名高度保持一致 - 映射文件的存放位置以及映射文件的命名 每个映射文件都会指定唯一的一个namespace属性值 - 一定是这个映射文件对应的那个Mapper接口的全限定名. select,update,insert,delete这些sql标签的id属性的值一定要和mapper接口中的方法的名称高度保持一致. mybatis-config.xml文件中配置映射文件. 12345678910111213 &lt;mappers&gt; &lt;!-- 指定映射文件的配置路径--&gt; &lt;!-- &lt;mapper resource=&quot;tech/aistar/mapperxml/user-mapper.xml&quot;&gt;&lt;/mapper&gt;--&gt; &lt;!-- &lt;mapper resource=&quot;tech/aistar/mapperxml/video-mapper.xml&quot;&gt;&lt;/mapper&gt;--&gt; &lt;!-- 直接扫接口 - 一个一个扫--&gt; &lt;!-- &lt;mapper class=&quot;tech.aistar.mapper.UserMapper&quot;&gt;&lt;/mapper&gt;--&gt; &lt;!-- &lt;mapper class=&quot;tech.aistar.mapper.VideoMapper&quot;&gt;&lt;/mapper&gt;--&gt; &lt;!-- 直接扫所有mapper接口所在的目录即可--&gt; &lt;package name=&quot;tech.aistar.mapper&quot;/&gt;&lt;/mappers&gt; mapper编程步骤 12345//1. 获取连接//2. 获取Mapper接口对象//3. 接口对象调用方法//4. commit/关闭连接 剖析Mapper动态代理底层 搞懂为什么需要遵守这些规范 12345678//底层如何构建UserMapper的实现//userMapper是一个代理对象//此处仅仅是在获取MapperUserMapper userMapper = sqlSession.getMapper(UserMapper.class);//为什么就可以顺利执行到那条sql//代理对象调用方法的时候,比如会走invoke - 必然会想办法找到id=&quot;findAll&quot;的sql语句//比如findAll方法-&gt;对应的Method实例传入invoke-&gt;String getName();//-&gt;findAll-&gt;sql语句id属性值List&lt;User&gt; userList = userMapper.findAll(); 第一步 1sqlSessionFactory = new SqlSessionFactoryBuilder().build(in); build方法 查看build方法 1234//inputStream - mybatis-config.xml的字节输入流public SqlSessionFactory build(InputStream inputStream) &#123; return this.build((InputStream)inputStream, (String)null, (Properties)null);&#125; 继续查看this.build方法 1234567891011121314151617181920212223//读取mybatis-config.xml 返回一个SqlSessionFactory重量级的对象public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) &#123; SqlSessionFactory var5; try &#123; //功能 - 就是xml解析 XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties); //mybatis-config.xml文件中的内容解析出来 - Java内存可以拿到xml文件中的配置信息了 //拿到配置信息之后进行下一个动作 var5 = this.build(parser.parse()); &#125; catch (Exception var14) &#123; throw ExceptionFactory.wrapException(&quot;Error building SqlSession.&quot;, var14); &#125; finally &#123; ErrorContext.instance().reset(); try &#123; inputStream.close(); &#125; catch (IOException var13) &#123; &#125; &#125; return var5;&#125; this.build(parser.parse()); 参数parser.parse()从mybatis-config.xml文件中解析出来的每个数据 把xml配置文件中的解析出来的数据封装到了Configuration对象 1234public SqlSessionFactory build(Configuration config) &#123; return new DefaultSqlSessionFactory(config);&#125; 123456789大概观察一下Configuration类&#123; protected Environment environment; protected boolean mapUnderscoreToCamelCase;&#125;&lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;xml解析-mapUnderscoreToCamelCase - true&quot;mapUnderscoreToCamelCase&quot; - Field - 反射设置对象字段中的mapUnderscoreToCamelCase值为true 以上4步 - mybatis-config.xml -&gt; Configuration对象 继续观察Configuration类内部 12345678//Mapper注册机 - 想象成Mapper的容器 - 工厂protected final MapperRegistry mapperRegistry;public Configuration()&#123; //底层肯定是使用到了Configuration对象.映射文件的信息也是配置在了mybatis-config.xml文件中的. this.mapperRegistry = new MapperRegistry(this);&#125; 定位到MapperRegistry 1234567891011121314151617private final Map&lt;Class&lt;?&gt;, MapperProxyFactory&lt;?&gt;&gt; knownMappers = new HashMap();//返回一个单个Mapper接口的动态代理对象public &lt;T&gt; T getMapper(Class&lt;T&gt; type, SqlSession sqlSession) &#123; MapperProxyFactory&lt;T&gt; mapperProxyFactory = (MapperProxyFactory)this.knownMappers.get(type); if (mapperProxyFactory == null) &#123; throw new BindingException(&quot;Type &quot; + type + &quot; is not known to the MapperRegistry.&quot;); &#125; else &#123; try &#123; //动态代理 return mapperProxyFactory.newInstance(sqlSession); &#125; catch (Exception var5) &#123; throw new BindingException(&quot;Error getting mapper instance. Cause: &quot; + var5, var5); &#125; &#125;&#125; 回到Configuration类中 12345678910//需要把所有的配置的mapper接口全部用动态代理技术构建好之后放入到 knownMappers//观察的方法public void addMappers(String packageName) &#123; this.mapperRegistry.addMappers(packageName); &#125; public &lt;T&gt; void addMapper(Class&lt;T&gt; type) &#123; this.mapperRegistry.addMapper(type);&#125; 12345678分别代表mybatis-config.xml文件中关于映射的配置的俩种方式 &lt;mappers&gt; &lt;!-- &lt;mapper class=&quot;tech.aistar.mapper.UserMapper&quot;&gt;&lt;/mapper&gt;--&gt;&lt;!-- &lt;mapper class=&quot;tech.aistar.mapper.VideoMapper&quot;&gt;&lt;/mapper&gt;--&gt; &lt;!-- 直接扫所有mapper接口所在的目录即可--&gt; &lt;package name=&quot;tech.aistar.mapper&quot;/&gt; &lt;/mappers&gt; 扫包 12345678910111213141516public void addMappers(String packageName) &#123; this.addMappers(packageName, Object.class);&#125;继续观察this.addMapperspublic void addMappers(String packageName, Class&lt;?&gt; superType) &#123; ResolverUtil&lt;Class&lt;?&gt;&gt; resolverUtil = new ResolverUtil(); resolverUtil.find(new IsA(superType), packageName); Set&lt;Class&lt;? extends Class&lt;?&gt;&gt;&gt; mapperSet = resolverUtil.getClasses(); Iterator var5 = mapperSet.iterator(); while(var5.hasNext()) &#123; Class&lt;?&gt; mapperClass = (Class)var5.next(); //把配置的包下的所有的接口的全限定名 -&gt; 接口的Class实例 this.addMapper(mapperClass); &#125;&#125; 继续this.addMapper(mapperClass) 12345678910111213141516171819202122public &lt;T&gt; void addMapper(Class&lt;T&gt; type) &#123; if (type.isInterface()) &#123; if (this.hasMapper(type)) &#123; throw new BindingException(&quot;Type &quot; + type + &quot; is already known to the MapperRegistry.&quot;); &#125; boolean loadCompleted = false; try &#123; //重点的需要在第八步分析的代码 this.knownMappers.put(type, new MapperProxyFactory(type)); MapperAnnotationBuilder parser = new MapperAnnotationBuilder(this.config, type); parser.parse(); loadCompleted = true; &#125; finally &#123; if (!loadCompleted) &#123; this.knownMappers.remove(type); &#125; &#125; &#125;&#125; 5~7 - mybatis-config.xml中的关于映射文件的配置 - 底层是如何处理的 - 存储所有的Mapper接口 Map&lt;Class, MapperProxyFactory&gt; knownMappers = new HashMap(); 观察this.knownMappers.put(type, new MapperProxyFactory(type)); 定位到了MapperProxyFactory类中了 - 负责构建每个Mapper接口的代理对象 - MapperProxy 12345678910111213141516171819202122232425262728293031323334353637383940//// Source code recreated from a .class file by IntelliJ IDEA// (powered by Fernflower decompiler)// package org.apache.ibatis.binding; import java.lang.reflect.Method;import java.lang.reflect.Proxy;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;import org.apache.ibatis.binding.MapperProxy.MapperMethodInvoker;import org.apache.ibatis.session.SqlSession; public class MapperProxyFactory&lt;T&gt; &#123; //每个具体的Mapper接口的class类型 private final Class&lt;T&gt; mapperInterface; private final Map&lt;Method, MapperMethodInvoker&gt; methodCache = new ConcurrentHashMap(); public MapperProxyFactory(Class&lt;T&gt; mapperInterface) &#123; this.mapperInterface = mapperInterface; &#125; public Class&lt;T&gt; getMapperInterface() &#123; return this.mapperInterface; &#125; public Map&lt;Method, MapperMethodInvoker&gt; getMethodCache() &#123; return this.methodCache; &#125; protected T newInstance(MapperProxy&lt;T&gt; mapperProxy) &#123; return Proxy.newProxyInstance(this.mapperInterface.getClassLoader(), new Class[]&#123;this.mapperInterface&#125;, mapperProxy); &#125; public T newInstance(SqlSession sqlSession) &#123; MapperProxy&lt;T&gt; mapperProxy = new MapperProxy(sqlSession, this.mapperInterface, this.methodCache); return this.newInstance(mapperProxy); &#125;&#125; 核心 - 找了MapperProxy动态代理对象 12345678910111213141516171819public class MapperProxy&lt;T&gt; implements InvocationHandler, Serializable &#123; private final SqlSession sqlSession; private final Class&lt;T&gt; mapperInterface; private final Map&lt;Method, MapperProxy.MapperMethodInvoker&gt; methodCache; public MapperProxy(SqlSession sqlSession, Class&lt;T&gt; mapperInterface, Map&lt;Method, MapperProxy.MapperMethodInvoker&gt; methodCache) &#123; this.sqlSession = sqlSession; this.mapperInterface = mapperInterface; this.methodCache = methodCache; &#125; public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; try &#123; return Object.class.equals(method.getDeclaringClass()) ? method.invoke(this, args) : this.cachedInvoker(method).invoke(proxy, method, args, this.sqlSession); &#125; catch (Throwable var5) &#123; throw ExceptionUtil.unwrapThrowable(var5); &#125; &#125; &#125; invoke方法 - 什么时候会被调用的??? - 当使用代理对象去调用原始对象中的方法的时候. List userList = userMapper.findAll();//invoke 分析invoke中的this.cachedInvoker(method) 1234567891011121314151617181920private MapperProxy.MapperMethodInvoker cachedInvoker(Method method) throws Throwable &#123; try &#123; return (MapperProxy.MapperMethodInvoker)MapUtil.computeIfAbsent(this.methodCache, method, (m) -&gt; &#123; if (m.isDefault()) &#123; try &#123; return privateLookupInMethod == null ? new MapperProxy.DefaultMethodInvoker(this.getMethodHandleJava8(method)) : new MapperProxy.DefaultMethodInvoker(this.getMethodHandleJava9(method)); &#125; catch (InstantiationException | InvocationTargetException | NoSuchMethodException | IllegalAccessException var4) &#123; throw new RuntimeException(var4); &#125; &#125; else &#123; //有效代码 - new MapperMethod(this.mapperInterface, method, this.sqlSession.getConfiguration()) return new MapperProxy.PlainMethodInvoker(new MapperMethod(this.mapperInterface, method, this.sqlSession.getConfiguration())); &#125; &#125;); &#125; catch (RuntimeException var4) &#123; Throwable cause = var4.getCause(); throw (Throwable)(cause == null ? var4 : cause); &#125; &#125; new MapperMethod(this.mapperInterface, method, this.sqlSession.getConfiguration()) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253public MapperMethod(Class&lt;?&gt; mapperInterface, Method method, Configuration config) &#123; this.command = new MapperMethod.SqlCommand(config, mapperInterface, method); this.method = new MapperMethod.MethodSignature(config, mapperInterface, method); &#125; public Object execute(SqlSession sqlSession, Object[] args) &#123; Object result; Object param; switch(this.command.getType()) &#123; case INSERT: param = this.method.convertArgsToSqlCommandParam(args); result = this.rowCountResult(sqlSession.insert(this.command.getName(), param)); break; case UPDATE: param = this.method.convertArgsToSqlCommandParam(args); result = this.rowCountResult(sqlSession.update(this.command.getName(), param)); break; case DELETE: param = this.method.convertArgsToSqlCommandParam(args); result = this.rowCountResult(sqlSession.delete(this.command.getName(), param)); break; case SELECT: if (this.method.returnsVoid() &amp;&amp; this.method.hasResultHandler()) &#123; this.executeWithResultHandler(sqlSession, args); result = null; &#125; else if (this.method.returnsMany()) &#123; result = this.executeForMany(sqlSession, args); &#125; else if (this.method.returnsMap()) &#123; result = this.executeForMap(sqlSession, args); &#125; else if (this.method.returnsCursor()) &#123; result = this.executeForCursor(sqlSession, args); &#125; else &#123; param = this.method.convertArgsToSqlCommandParam(args); result = sqlSession.selectOne(this.command.getName(), param); if (this.method.returnsOptional() &amp;&amp; (result == null || !this.method.getReturnType().equals(result.getClass()))) &#123; result = Optional.ofNullable(result); &#125; &#125; break; case FLUSH: result = sqlSession.flushStatements(); break; default: throw new BindingException(&quot;Unknown execution method for: &quot; + this.command.getName()); &#125; if (result == null &amp;&amp; this.method.getReturnType().isPrimitive() &amp;&amp; !this.method.returnsVoid()) &#123; throw new BindingException(&quot;Mapper method &#x27;&quot; + this.command.getName() + &quot; attempted to return null from a method with a primitive return type (&quot; + this.method.getReturnType() + &quot;).&quot;); &#125; else &#123; return result; &#125; &#125; ‘仍然是通过SqlSession中API来db进行交互’ SqlCommand - sql语句对象 - 解析出来的sql语句就被封装到了SqlCommand 123String statementId = mapperInterface.getName() + &quot;.&quot; + methodName;= this.command.getName();sqlSession.api方法(namespace.id属性值,..) 输入参数类型 接口中的方法是单个参数,sql标签需要指定参数的类型 - parameterType - 支持类型的别名,如果是自定义的类型,需要提前在mybatis-config.xml主配置文件中进行配置的 散列的类型 - 一定要配置@Param注解 - 无需在sql标签中写parameterType 希望接口更加具备可拓展性的话 - 不建议使用散列的数据 如果哪天条件增多/减少,接口是需要变化的.接口是给外部调用的. 使用第三方实体类来封装条件 使用Map来封装条件 返回参数类型 单个参数 - resultType 查询出来的列,没有对应的实体类.需要创建第三方dto对象来封装查询结果 使用Map来作为返回类型 动态SQL语句 mybatis映射文件的灵魂 - 支持动态sql以及sql片段[封装sql,然后支持多次调用] if标签123456789 &lt;select id=&quot;findIf&quot; resultType=&quot;video&quot;&gt; select * from t_video where 1=1 &lt;if test=&quot;title!=null&quot;&gt; and title like &#x27;%$&#123;title&#125;%&#x27; &lt;/if&gt; &lt;if test=&quot;price!=null&quot;&gt; and price &gt;= #&#123;price&#125; &lt;/if&gt;&lt;/select&gt; where标签 作用 - 查询语句后面自动拼接where语句 作用 - 去除where语句后面的第一个条件前面的条件连接符号[and,or] 1234567891011&lt;select id=&quot;findIf&quot; resultType=&quot;video&quot;&gt; select * from t_video &lt;where&gt; &lt;if test=&quot;title!=null&quot;&gt; and title like &#x27;%$&#123;title&#125;%&#x27; &lt;/if&gt; &lt;if test=&quot;price!=null&quot;&gt; and price &gt;= #&#123;price&#125; &lt;/if&gt; &lt;/where&gt;&lt;/select&gt; set标签 更新 生成set语句 去除最后一个更新列的最后一个逗号 123456789101112131415&lt;update id=&quot;update&quot; parameterType=&quot;video&quot;&gt; update t_video &lt;set&gt; &lt;if test=&quot;title!=null&quot;&gt; title=#&#123;title&#125;, &lt;/if&gt; &lt;if test=&quot;price!=null&quot;&gt; price=#&#123;price&#125;, &lt;/if&gt; &lt;if test=&quot;videoUrl!=null&quot;&gt; video_url=#&#123;videoUrl&#125; &lt;/if&gt; &lt;/set&gt; where id=#&#123;id&#125;&lt;/update&gt; foreach标签动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候） 123456 &lt;select id=&quot;findIds&quot; parameterType=&quot;list&quot; resultType=&quot;video&quot;&gt; select * from t_video where id in &lt;foreach open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot; collection=&quot;ids&quot; item=&quot;item&quot;&gt; #&#123;item&#125; &lt;/foreach&gt;&lt;/select&gt; collection属性值可以为list集合的默认的键名 - list,当然自定list的键名,方法参数加上@Param(&quot;ids&quot;) item代表是集合中的每一项元素 练习123456/** * 保存多条视频信息 * @param videos * @return */int saveList(List&lt;Video&gt; videos); 注解开发 t_comment 评论表 鼓励单表操作 注解开发和xml开发并存的 1234567891011121314public interface CommentsMapper &#123; @Select(&quot;select * from t_comment&quot;) List&lt;Comments&gt; findAll(); @Delete(&quot;delete from t_comment where id=#&#123;id&#125;&quot;) int delById(Integer id); @Insert(&quot;insert into t_comment values(#&#123;id&#125;,#&#123;userId&#125;,#&#123;videoId&#125;,#&#123;content&#125;,#&#123;commentId&#125;)&quot;) int save(Comments comments); @Select(&quot;select * from t_comment where id=#&#123;id&#125;&quot;) Comments getById(Integer id);&#125; sql片段 主要的作用就是用来封装sql语句,以便sql语句的多次复用. UserMapper.xml sql片段就在当前的映射文件中 12345678910111213141516&lt;!-- 定义一个sql片段--&gt;&lt;sql id=&quot;findAllUserSql&quot;&gt;select * from t_user&lt;/sql&gt;&lt;!-- sql标签的id属性的值**一定要和mapper**接口中的方法的名称**高度保持一致--&gt;&lt;select id=&quot;findAll&quot; resultType=&quot;user&quot;&gt;&lt;!--select * from t_user--&gt;&lt;!--引用sql片段--&gt;&lt;include refid=&quot;findAllUserSql&quot;&gt;&lt;/include&gt;&lt;/select&gt;&lt;select id=&quot;getById&quot; resultType=&quot;user&quot; parameterType=&quot;int&quot;&gt;&lt;include refid=&quot;findAllUserSql&quot;&gt;&lt;/include&gt;where id=#&#123;value&#125;&lt;/select&gt; 需要在A文件中引入B文件中的sql片段 1&lt;include refid=&quot;B映射文件的namespace.sql片段id属性值&quot;&gt; resultMap - 继承性 应用场景一: 当查询的列值不能自动映射/绑定实体类的属性的时候,需要通过resultMap来进行一一绑定. 12345678&lt;resultMap id=&quot;getByIdMap&quot; type=&quot;user&quot;&gt;&lt;id column=&quot;uid&quot; property=&quot;id&quot;&gt;&lt;/id&gt;&lt;result column=&quot;uname&quot; property=&quot;username&quot;&gt;&lt;/result&gt;&lt;/resultMap&gt;&lt;select id=&quot;getById&quot; resultMap=&quot;getByIdMap&quot; parameterType=&quot;int&quot;&gt;select id uid,username uname from t_user where id=#&#123;id&#125;&lt;/select&gt; 这条语句只需要取出俩条数据 - 手动封装了俩条数据即可 1234567891011121314!-- 定义一个sql片段--&gt;&lt;sql id=&quot;findAllUserSql&quot;&gt;select id uid,username uname,password,birthday from t_user&lt;/sql&gt;&lt;select id=&quot;findAll&quot; resultMap=&quot;findAllMap&quot;&gt;&lt;!--select * from t_user--&gt;&lt;!--引用sql片段--&gt;&lt;include refid=&quot;findAllUserSql&quot;&gt;&lt;/include&gt;&lt;/select&gt;&lt;resultMap id=&quot;findAllMap&quot; type=&quot;user&quot; extends=&quot;getByIdMap&quot;&gt;&lt;result column=&quot;password&quot; property=&quot;password&quot;&gt;&lt;/result&gt;&lt;result column=&quot;birthday&quot; property=&quot;birthday&quot;&gt;&lt;/result&gt;&lt;/resultMap&gt; 需要把所有的列数据进行查询绑定 - resultMap标签是允许被继承的. 日志的配置Mybatis 通过使用内置的日志工厂提供日志功能。内置日志工厂将会把日志工作委托给下面的实现之一： SLF4J Apache Commons Logging Log4j 2 Log4j - 配置方式比较简单 - 选用的 JDK logging SLF4J日志框架 官方地址:http://www.slf4j.org/ 市面提供了SLF4J - 日志门面-接口 slf4j-api.jar - 日志接口 - slf4j-api-1.7.30.jar - 项目中仅仅只有日志的接口,而没有实现jar - 不ok springboot框架中推荐使用的日志实现 - logback 必须先引入日志门面 - 日志接口 slf4j-api.jar 必须引入日志的具体的实现 - logback-core.java 不需要中间适配包的原因是slf4j日志框架的创造者和logback日志具体实现的创造者是同一个作者 mybatis中想要使用log4j ①引入日志接口slf4j-api.jar - pc的接口 B -&gt; 5个方法 ②slf4j-log412.jar - 适配包 - usb转接口 C extends B ③引入log4j.jar - log4j日志具体实现 - 网线接口 D extends C -&gt; 10个方法 slf4j日志接口的作者和log4j作者不是同一个人 配置文件1234567891011121314151617181920212223242526#log4j.rootLogger=debug,stdout,logfile# ERROR - 日志的级别,只有出现错误才会输出日志信息.# stdout - 将日志信息输出到控制台,不会输出到日志文件# logfile - 将日志信息输出到日志文件中去.不会在控制台输出log4j.rootLogger=INFO,stdoutlog4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.Target=System.errlog4j.appender.stdout.layout=org.apache.log4j.SimpleLayoutlog4j.appender.logfile=org.apache.log4j.FileAppender# 日志文件的路径log4j.appender.logfile.File=jbit.loglog4j.appender.logfile.layout=org.apache.log4j.PatternLayoutlog4j.appender.logfile.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %F %p %m%n# 项目中调用哪个接口中的方法的时候,才会产生日志信息.log4j.logger.tech.aistar.mapper=DEBUG#log4j.logger.com.mybatis.common.jdbc.SimpleDataSource=DEBUG#log4j.logger.com.mybatis.common.jdbc.ScriptRunner=DEBUG#log4j.logger.com.mybatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG#log4j.logger.java.sql.Connection=DEBUG#log4j.logger.java.sql.Statement=DEBUG#log4j.logger.java.sql.PreparedStatement=DEBUG#log4j.logger.java.sql.ResultSet=DEBUG 1234567&lt;!-- 开启小驼峰命名映射--&gt;&lt;settings&gt; &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt; &lt;!-- 控制台显示sql语句--&gt; &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;&lt;/settings&gt; 日志的显示级别 log4j定义了8个级别的log（除去OFF和ALL，可以说分为6个级别），优先级从高到低依次为：OFF、FATAL、ERROR、WARN、INFO、DEBUG、TRACE、 ALL。 ALL 最低等级的，用于打开所有日志记录。 TRACE designates finer-grained informational events than the DEBUG.Since:1.2.12，很低的日志级别，一般不会使用。 DEBUG 指出细粒度信息事件对调试应用程序是非常有帮助的，主要用于开发过程中打印一些运行信息。 INFO 消息在粗粒度级别上突出强调应用程序的运行过程。打印一些你感兴趣的或者重要的信息，这个可以用于生产环境中输出程序运行的一些重要信息，但是不能滥用，避免打印过多的日志。 WARN 表明会出现潜在错误的情形，有些信息不是错误信息，但是也要给程序员的一些提示。 ERROR 指出虽然发生错误事件，但仍然不影响系统的继续运行。打印错误和异常信息，如果不想输出太多的日志，可以使用这个级别。 FATAL 指出每个严重的错误事件将会导致应用程序的退出。这个级别比较高了。重大错误，这种级别你可以直接停止程序了。 OFF 最高等级的，用于关闭所有日志记录。 从上到下 - 输出的日志信息肯定是越来越少的. 作业 用现有的知识完成下面两道查询 根据视频的id来查询视频信息,顺便加载出该视频的用户信息 根据用户的id来查询用户信息,顺便加载出该用户下所有的视频信息 作业提交地址 - http://xzc.cn/J2Q0qw2wnj 加载one的一方 无论是1加载1,还是多加载1 查询什么,存储到内存哪里[对象]? - 实体对象类型[有表对应]/dto对象 搓的方式 dto散列的属性和查询列对上号 - resultType resultMap - dto直接关联对象即可.直接使用OGNL语法 - 单个对象.属性,不能用集合对象.属性 resultType - 查询出来的列 - pojo属性一致 - 实现自动绑定. 需要自定义一个对象,来封装这些查询列的结果 1234567891011121314151617181920public class VideoUserVo &#123; private Integer id; private String title; private Date createDate; private Double price; private String videoUrl; //表中的外键是什么,此处就写什么. private Integer userId; private String username; private String password; private Date birthday;&#125; 或者使用第三方实体类来进行一个关心的维护,而我们的mybatis支持ognl语言[对象导航语言] - 必须维护的是单个对象使用resultMap 123456789101112131415161718192021&lt;resultMap id=&quot;getVideoWithUser2Map&quot; type=&quot;videoUserVo2&quot;&gt;&lt;!-- 此处就是OGNL语法,可以将查询出来的结果映射到videoUserVo2管理的单个对象的video对象的id属性中去--&gt;&lt;!-- ognl - 反射 - video -&gt; getVideo -&gt; Method -&gt; videoUserVo2-&gt;invoke -&gt; Video对象--&gt;&lt;!-- -&gt; Video-Class,id -&gt; setId反射调用--&gt;&lt;!-- 手动封装video相关属性--&gt;&lt;id column=&quot;id&quot; property=&quot;video.id&quot;&gt;&lt;/id&gt;&lt;result column=&quot;title&quot; property=&quot;video.title&quot;&gt;&lt;/result&gt;&lt;result column=&quot;price&quot; property=&quot;video.price&quot;&gt;&lt;/result&gt;&lt;result column=&quot;create_date&quot; property=&quot;video.createDate&quot;&gt;&lt;/result&gt;&lt;result column=&quot;video_url&quot; property=&quot;video.videoUrl&quot;&gt;&lt;/result&gt;&lt;result column=&quot;user_id&quot; property=&quot;video.userId&quot;&gt;&lt;/result&gt;&lt;result column=&quot;user_id&quot; property=&quot;user.id&quot;&gt;&lt;/result&gt;&lt;result column=&quot;username&quot; property=&quot;user.username&quot;&gt;&lt;/result&gt;&lt;result column=&quot;password&quot; property=&quot;user.password&quot;&gt;&lt;/result&gt;&lt;result column=&quot;birthday&quot; property=&quot;user.birthday&quot;&gt;&lt;/result&gt;&lt;/resultMap&gt;&lt;select id=&quot;getVideoWithUser2&quot; resultMap=&quot;getVideoWithUser2Map&quot; parameterType=&quot;int&quot;&gt;select tv.*,u.username,u.password,u.birthday from t_user u join t_video tv on u.id = tv.user_id where tv.id=21&lt;/select&gt; association 专门用来映射一的一方 作用:用来把查询出来的结果绑定到type指定的类型中关联的那个单个对象某个属性上. 1234public class VideoUserVo2 implements Serializable &#123; private Video video; private User user;&#125; 1234567891011121314151617181920212223&lt;resultMap id=&quot;getVideoWithUser3Map&quot; type=&quot;videoUserVo2&quot;&gt;&lt;!-- 绑定一的一方--&gt;&lt;association property=&quot;video&quot; javaType=&quot;video&quot;&gt; &lt;id column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/id&gt; &lt;result column=&quot;title&quot; property=&quot;title&quot;&gt;&lt;/result&gt; &lt;result column=&quot;price&quot; property=&quot;price&quot;&gt;&lt;/result&gt; &lt;result column=&quot;create_date&quot; property=&quot;createDate&quot;&gt;&lt;/result&gt; &lt;result column=&quot;video_url&quot; property=&quot;videoUrl&quot;&gt;&lt;/result&gt; &lt;result column=&quot;user_id&quot; property=&quot;userId&quot;&gt;&lt;/result&gt;&lt;/association&gt;&lt;association property=&quot;user&quot; javaType=&quot;user&quot;&gt; &lt;result column=&quot;user_id&quot; property=&quot;id&quot;&gt;&lt;/result&gt; &lt;result column=&quot;username&quot; property=&quot;username&quot;&gt;&lt;/result&gt; &lt;result column=&quot;password&quot; property=&quot;password&quot;&gt;&lt;/result&gt; &lt;result column=&quot;birthday&quot; property=&quot;birthday&quot;&gt;&lt;/result&gt;&lt;/association&gt;&lt;/resultMap&gt;&lt;select id=&quot;getVideoWithUser3&quot; resultMap=&quot;getVideoWithUser3Map&quot; parameterType=&quot;int&quot;&gt;select tv.*,u.username,u.password,u.birthday from t_user u join t_video tv on u.id = tv.user_id where tv.id=21&lt;/select&gt; resultMap 单表的手动映射的结果进行一个单独的封装 - 查所有列 common-mapper.xml - 存放公共的resultMap 一定要在mybati-config.xml文件中进行读取 12345678910111213141516171819202122232425262728&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;common&quot;&gt; &lt;resultMap id=&quot;userIdMap&quot; type=&quot;user&quot;&gt; &lt;id column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/id&gt; &lt;/resultMap&gt; &lt;resultMap id=&quot;userMap&quot; type=&quot;user&quot;&gt; &lt;result column=&quot;username&quot; property=&quot;username&quot;&gt;&lt;/result&gt; &lt;result column=&quot;password&quot; property=&quot;password&quot;&gt;&lt;/result&gt; &lt;result column=&quot;birthday&quot; property=&quot;birthday&quot;&gt;&lt;/result&gt; &lt;/resultMap&gt; &lt;resultMap id=&quot;userAllMap&quot; type=&quot;user&quot; extends=&quot;userMap&quot;&gt; &lt;id column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/id&gt; &lt;/resultMap&gt; &lt;resultMap id=&quot;videoIdMap&quot; type=&quot;video&quot;&gt; &lt;id column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/id&gt; &lt;/resultMap&gt; &lt;resultMap id=&quot;videoAllMap&quot; type=&quot;video&quot; extends=&quot;videoIdMap&quot;&gt; &lt;result column=&quot;title&quot; property=&quot;title&quot;&gt;&lt;/result&gt; &lt;result column=&quot;price&quot; property=&quot;price&quot;&gt;&lt;/result&gt; &lt;result column=&quot;create_date&quot; property=&quot;createDate&quot;&gt;&lt;/result&gt; &lt;result column=&quot;video_url&quot; property=&quot;videoUrl&quot;&gt;&lt;/result&gt; &lt;result column=&quot;user_id&quot; property=&quot;userId&quot;&gt;&lt;/result&gt; &lt;/resultMap&gt;&lt;/mapper&gt; 12345678910&lt;resultMap id=&quot;getVideoWithUser4Map&quot; type=&quot;videoUserVo2&quot;&gt;&lt;!-- 绑定一的一方--&gt;&lt;association resultMap=&quot;common.videoAllMap&quot; javaType=&quot;video&quot; property=&quot;video&quot;&gt;&lt;/association&gt;&lt;association property=&quot;user&quot; javaType=&quot;user&quot; resultMap=&quot;common.userMap&quot;&gt;&lt;/association&gt;&lt;/resultMap&gt;&lt;select id=&quot;getVideoWithUser4&quot; resultMap=&quot;getVideoWithUser4Map&quot; parameterType=&quot;int&quot;&gt;select tv.*,u.username,u.password,u.birthday from t_user u join t_video tv on u.id = tv.user_id where tv.id=21&lt;/select&gt; 延迟加载什么是延迟加载: 延迟加载就是当两个表有关联的时候, 但我们查询只需要查询一张表, 比如说订单和用户, 我只需要订单信息, 但sql对这两张表关联了, 会查询全部的信息出来, 这时候要用到标签了, 并在xml文件中开启懒加载, 并将积极加载改为消极加载, 当我们就查询订单表的时候并不会对用户表进行查询操作, 只查询到订单的信息, 当我们需要用到另一张用户表的时候才会去执行查询用户的信息 懒加载 查询many方,希望延迟加载出one方. 分析 - select tv.*,u.username,u.password,u.birthday from t_user u join t_video tv on u.id = tv.user_id where tv.id=21 进行了多表的关联查询 - 不管实际的业务 - 俩张表中的数据全部加载出来了 - 迫切 延迟加载 只查询many方 - 视频 如果业务中需要加载出视频对应的one方法[User] - 才会去查询这个视频的用户信息.如果不需要one方,不会去执行查询user的sql. 第一种方式 - 推荐 回忆jdbc写法 - 对象只会id[Video类 - user_id属性] IVideoDao.java - Video getById(Integer id);//根据id查询视频 select * from t_video where id=? IUserDao.java - User getById(Integer id);//根据用户id查询用户 select * from t_user where id=? 按需加载 - 必须在业务层中进行一个处理了. IVideoSerivce.java Video findById(Integer id); VideoVo findVideoUser(Integer id); 业务只需要加载视频信息 - videoDao.findById(1); 需要加载视频以及对应的user @Override public VideoVo findVideoUser(Integer id){ ​ VideoVo vo = new VideoVo(); ​ Video v = videoDao.findById(1); ​ User user = userDao.findById(v.getUserId()); ​ vo.setVideo(v); ​ vo.setUser(user); ​ return vo; } 第二种方式 - mybatis特性 resultMap + association/collection 需要开启一下延迟记载的设置 - mybatis-config.xml 1234&lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt; &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;&lt;!-- 只要触发对象的equals,clone,hashCode,toString - 延迟效果都会失效了.--&gt;&lt;setting name=&quot;lazyLoadTriggerMethods&quot; value=&quot;clone&quot;/&gt; 只要触发对象的equals,clone,hashCode,toString - 延迟效果都会失效了. xml 12345678910111213141516171819&lt;!-- 延迟加载--&gt;&lt;select id=&quot;getVideoLazyLoadUser&quot; resultMap=&quot;videoLazyMap&quot; parameterType=&quot;int&quot;&gt; select * from t_video where id=#&#123;id&#125;&lt;/select&gt;&lt;resultMap id=&quot;videoLazyMap&quot; type=&quot;videoUserVo2&quot;&gt; &lt;!-- 手动映射--&gt; &lt;association property=&quot;video&quot; javaType=&quot;video&quot;&gt; &lt;id column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/id&gt; &lt;result column=&quot;title&quot; property=&quot;title&quot;&gt;&lt;/result&gt; &lt;result column=&quot;price&quot; property=&quot;price&quot;&gt;&lt;/result&gt; &lt;result column=&quot;create_date&quot; property=&quot;createDate&quot;&gt;&lt;/result&gt; &lt;result column=&quot;video_url&quot; property=&quot;videoUrl&quot;&gt;&lt;/result&gt; &lt;result column=&quot;user_id&quot; property=&quot;userId&quot;&gt;&lt;/result&gt; &lt;/association&gt; &lt;!-- 延迟加载出videoUserVo2 - user信息 column = &quot;user_id&quot; 把该列的值传给了select引用的查询语句中的#&#123;id&#125;--&gt; &lt;association property=&quot;user&quot; column=&quot;user_id&quot; select=&quot;tech.aistar.mapper.UserMapper.getById&quot;&gt;&lt;/association&gt;&lt;/resultMap&gt; 加载many的一方 根据用户的id来查询用户信息,顺便加载出该用户下所有的视频信息 collection123public class UserQueryVo extends User &#123; private List&lt;Video&gt; videoList;&#125; 1234567891011121314151617181920212223&lt;select id=&quot;findUserWithVideos&quot; resultMap=&quot;findUserWithVideosMap&quot; parameterType=&quot;int&quot;&gt; select u.id uid,u.username,u.password,u.birthday,v.* from t_user u left join t_video v on v.user_id = u.id where u.id=#&#123;id&#125;;&lt;/select&gt;&lt;resultMap id=&quot;findUserWithVideosMap&quot; type=&quot;userQueryVo&quot;&gt; &lt;!-- 处理user对象的属性的绑定--&gt; &lt;id column=&quot;uid&quot; property=&quot;id&quot;/&gt; &lt;result column=&quot;username&quot; property=&quot;username&quot;/&gt; &lt;result column=&quot;password&quot; property=&quot;password&quot;/&gt; &lt;result column=&quot;birthday&quot; property=&quot;birthday&quot;/&gt; &lt;!-- 绑定到一个集合属性videoList ofType集合属性的泛型--&gt; &lt;collection property=&quot;videoList&quot; ofType=&quot;video&quot;&gt; &lt;result column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/result&gt; &lt;result column=&quot;title&quot; property=&quot;title&quot;/&gt; &lt;result column=&quot;create_date&quot; property=&quot;createDate&quot;/&gt; &lt;result column=&quot;price&quot; property=&quot;price&quot;/&gt; &lt;result column=&quot;video_url&quot; property=&quot;videoUrl&quot;/&gt; &lt;result column=&quot;user_id&quot; property=&quot;userId&quot;/&gt; &lt;/collection&gt;&lt;/resultMap&gt; 1234public class UserQueryVo implements Serializable &#123; private User user; private List&lt;Video&gt; videoList;&#125; mybatis逆向工程 由db设计来自动构成entity以及mapper接口以及mapper的映射文件 逆向工程的配置文件是config.xml文件中 - 关键的配置信息 123456&lt;!-- 数据库连接信息 --&gt;&lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://127.0.0.1:3306/j03s?characterEncoding=utf-8&amp;amp;serverTimezone=UTC&quot; userId=&quot;root&quot; password=&quot;root&quot;&gt;&lt;/jdbcConnection&gt; 123456&lt;!-- targetProject:生成PO类的位置 --&gt;&lt;javaModelGenerator targetPackage=&quot;tech.aistar.entity&quot; targetProject=&quot;src/&quot;&gt;&lt;sqlMapGenerator targetPackage=&quot;tech.aistar.mapper&quot; targetProject=&quot;src/&quot;&gt; 12345678910&lt;!-- 指定数据库表 &lt;domainObjectRenamingRule searchString=&quot;^T&quot; replaceString=&quot;&quot;&gt;&lt;/domainObjectRenamingRule&gt; T一定是大小,表的前缀.t_user,t_video--&gt;&lt;table tableName=&quot;t_user&quot;&gt;&lt;domainObjectRenamingRule searchString=&quot;^T&quot; replaceString=&quot;&quot;&gt;&lt;/domainObjectRenamingRule&gt;&lt;/table&gt;&lt;table tableName=&quot;t_video&quot;&gt;&lt;domainObjectRenamingRule searchString=&quot;^T&quot; replaceString=&quot;&quot;&gt;&lt;/domainObjectRenamingRule&gt;&lt;/table&gt; 如果大家设计的表没有带前缀,直接写 1&lt;table tableName=&quot;user&quot;&gt;&lt;/table&gt; 启动startServer Mybatis逆向工程生成的Example使用方式 - api方式来替代手写sql方式 1234567891011121314151617181920212223 @Testpublic void testExample()&#123; //面向sql -&gt; 面向对象编程 //List&lt;User&gt; selectByExample(UserExample example); UserExample userExample = new UserExample(); //准则 - 条件 UserExample.Criteria criteria = userExample.createCriteria(); //admins - 精确查找 //criteria.andUsernameEqualTo(&quot;admins&quot;); //模糊查询 // criteria.andUsernameLike(&quot;%yan%&quot;); //username模糊查询,id&gt;=5 criteria.andUsernameLike(&quot;%yan%&quot;).andIdGreaterThanOrEqualTo(5); List&lt;User&gt; userList = userMapper.selectByExample(userExample); for (User user : userList) &#123; System.out.println(user); &#125;&#125; 12345678910111213141516171819@Testpublic void testFindExample()&#123; UserExample userExample = new UserExample(); //username=yang2或者id=1 UserExample.Criteria c1 = userExample.createCriteria(); c1.andUsernameEqualTo(&quot;yang2&quot;); //如果是or - 连接另外一个条件 UserExample.Criteria c2 = userExample.createCriteria(); c2.andIdEqualTo(1); userExample.or(c2); List&lt;User&gt; userList = userMapper.selectByExample(userExample); for (User user : userList) &#123; System.out.println(user); &#125;&#125; 分页查询 针对单表操作进行分页.针对的是实体对象进行分页的. 导入 - pagehelper-4.1.6.jar,jsqlparser-1.0.jar 分页的动作肯定是在service层进行的 - 将来的动作. mybatis-config.xml 123&lt;plugins&gt;&lt;plugin interceptor=&quot;com.github.pagehelper.PageHelper&quot;&gt;&lt;/plugin&gt;&lt;/plugins&gt; 如果数据量特别大 - 分页插件的效率就会变得很低 - 手写分页,改写分页插件. limit性能是受到偏移量的影响,偏移量[第一个参数?]越大,性能越低 1select id uid,username uname,password,birthday from t_user limit ?,? 作业 查询某个用户的发布的某个视频下的所有的评论以及回复信息 - 四表操作 - DTO对象如何设计 某个用户删除某条视频[级联删除这条视频下所有的评论和回复] db表交上来 - 不要等我 - 点击去看功能 sql脚本 - 建表语句以及模拟insert语句","categories":[{"name":"mybatis","slug":"mybatis","permalink":"http://example.com/categories/mybatis/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"http://example.com/tags/mybatis/"}]},{"title":"JDBC总","slug":"JDBC总","date":"2021-08-30T16:17:49.000Z","updated":"2021-08-30T16:18:10.294Z","comments":true,"path":"2021/08/31/JDBC总/","link":"","permalink":"http://example.com/2021/08/31/JDBC%E6%80%BB/","excerpt":"","text":"JDBC概述 jdbc - java database connectivity - java数据库连接 使用java编写的程序来访问数据库的技术.优势在于可以使用同一套java代码来访问市面上不同的数据库. 作用:为访问不同的数据库来提供统一的方式. 市面上主流的关系型数据库:sqlserver,oracle,mysql 非关系型数据库:文档型数据库 - mongodb.键值对数据库-redis 属于早期的JAVAEE[jakartaEE]十三种核心技术中的一种. 这个技术已经被淘汰了.属于**持久层[数据访问层 - 和DB交互的层]**的最传统的技术.持久层框架的底层都是采用的jdbc技术. 市面上有很多持久层的框架,主流的ORM[Object Relation Mapping 对象关系映射]框架. ORM本质上是一个思想,在这个思想下诞生了很多ORM框架[实际上就是ORM思想的实现者] 3-1. 非移动互联网时代 - Hibernate框架[全自动的ORM框架 - 不需要写sql语句 - 不能进行sql优化] 3-2. 大数据时代 - **Mybatis[**半自动的ORM框架,需要写sql,但是相对于jdbc技术稍微简单一点,可以进行sql优化] 3-3. 国产的Mybatis-plus框架 - 又是对Mybatis的进一步的封装 核心的apiDriver[I] 驱动接口 - 驱动实现类是由各个db厂商去实现的. java.sql.Driver[I] 驱动jar - mysql-connector-java-8.0.25.jar - 本质就是对sun公司制定的Driver接口的实现类. 想要使用哪个db厂商的db,那么就导入哪个db的驱动jar. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566-- 历史-- java-sun公司-oracle公司收购了[oracle数据库-收费] 伪代码 java-oracle //jdbc编程第一步 - 创建一个驱动类对象OracleDriver driver = new OraclerDiver(); -- java语言发展壮大了,mysql原先是不属于oracle.-- java-mysqlMysqlDriver driver = new MysqlDriver(); //代码的可维护性不是太好.java代码不能随便切换数据库了;//因为db厂商不一样[类,接口命名都不一样] //有多少个db,就得写多少套java代码//sun考虑到这一点,制定了一系列的接口[居多]和类//接口作用就是用来指定一个规范,&quot;契约&quot;. //jdk-api - 查得到java.sql.Driver[I] //sun - db厂商下的db要和java交互的.必须遵守我的规范.你们这些db厂商只要给我实现这个规范接口.public interface Driver&#123; Driver getInstance();&#125; //oracle遵守规范 //sqlserver,mysql遵守规范 public class OracleDriver implements Driver&#123; @Override public Driver getIntance()&#123; //db是不同的,每个厂商程序根据具体的db产品来的 //具体的实现肯定是由db厂商去实现... return new OracleDriver(); &#125;&#125; //sqlserver - mspublic class SqlServerDriver implements Driver&#123; @Override public Driver getIntance()&#123; //db是不同的,每个厂商程序根据具体的db产品来的 //具体的实现肯定是由db厂商去实现... return new SqlServerDriver(); &#125;&#125; //每个db厂商就会把这些实现类全部打包 - mysql-connector-java-8.0.25.jar //java = oracle//多态 - 面向接口编程//---&gt; 反射实现 ---Driver driver = XXX.getInstance(); java-app[面向接口编程] J D B C [指定了很多接口] sqlserver[接口的实现] mysql[接口的实现 DriverManager[C] sun - java.sql.DriverManager[C] - 驱动管理类,管理注册驱动.通过驱动管理类来获取DB连接 1234url - 不同的数据库 - url是不一样的user - db用户名password - db密码public static Connection getConnection(String url, String user, String password); 关于数据库连接的url如何设置 主协议:次协议://数据库主机地址:数据库端口号/db名称?连接属性key=连接属性值 比如jdbc:mysql://localhost:3306/数据名?key1=value1&amp;key2=value2… 常见的url的设置如下 123456789101112jdbc:mysql://localhost:3306/j03s -- 高版本的需要设置useSSL=true,否则会报警告jdbc:mysql://localhost:3306/j03s?useSSL=true -- 设置编码jdbc:mysql://localhost:3306/j03s?useSSL=true&amp;characterEncoding=utf-8 -- 继续设置时区-- 世界的标准时区 - UTC-- 中国的标准时区 - Asia/Shanghaijdbc:mysql://localhost:3306/j03s?useSSL=true&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai Connnection[I] 连接对象.和db进行一次会话 Statetement createStatement();//获取语句对象 PreparedStatement prepareStatement(String sql);//利用一条sql构建预编译语句对象 Statement[I] 语句对象 - 作用-负责将sql语句发送给mysql-server端进行sql编译和解释 如果发送的是dql语句,mysql-server会将查询的结果返回,封装到一个ResultSet对象中. sun - java.sql.Statement[I] 121. int executeUpdate(String sql);//执行的是dml操作,返回的是受影响的行数2. ResultSet executeQuery(String sql);//执行的dql操作.处理结果集对象ResultSet ResultSet[I] 本质上一个游标-光标,默认是在标题行,在数据行的上方.比如要想取第一行的数据,应该是要将这个游标向下移动一行. booelan next();//向下移动一行.如果下一行没有数据行了,自动返回false int getInt(int index);//比如id列是int型,序号是从1开始的 12345select id,first_name fname from s_emp;rs.next();int id = rs.getInt(1);String first_name = rs.getString(2); String getString(int index);//比如name列是varchar int getInt(String colName);//根据列的名称去取 12int id = rs.getInt(&quot;id&quot;);String firstName = rs.getString(&quot;fname&quot;); jdb编程步骤 加载驱动 - 加载驱动实现类 - Driver 获取连接 - 和db进行连接 - DriverManager 获取语句对象Statement 3-1. 写sql语句 3-2. 由语句对象将sql发送到mysql-server,如果执行的是DQL,还需要进行结果集处理,执行第4步 处理结果集 - 通过光标来获取表中的数据 - ResultSet 关闭对象-ResultSet,Statement,Connection demo12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091package tech.aistar.day01;import java.sql.*;/** * 本类用来演示: jdbc基本编程步骤 - 感受一下jdbc编程 * * @author: success * @date: 2021/8/25 1:34 下午 */public class HelloJdbcDemo &#123; public static void main(String[] args) &#123; //1. 加载驱动 - 驱动类加载到java内存中. //但是jdbc4.0规范及其以后-加载驱动的代码可以省略不写. - 默认加载 Connection conn = null; Statement st = null; ResultSet rs = null; try &#123; Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;); //2. 获取连接 - 通过DriverManager类提供的getConnection来进行获取的 //2-1. 准备三个参数 String url = &quot;jdbc:mysql://localhost:3306/j03s?useSSL=true&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&quot;; String user = &quot;root&quot;; String password = &quot;root&quot;; conn = DriverManager.getConnection(url,user,password); //3. 创建语句对象 st = conn.createStatement(); //作用-负责将sql语句发送给mysql-server端进行sql编译和解释 //4. 发送sql,并且由mysql-server编译执行 String sql = &quot;select id,first_name,salary from s_emp&quot;; //4-1. 因为执行的是DQL语句,返回一个结果集对象 rs = st.executeQuery(sql); //5. 如果是DQL - 处理一下结果集 //结果解对象ResultSet实际上是一个光标 - 停留在标题行的上方. //调用next方法的时候,光标就会向下移动一行.如果下方没有数据行的时候,自动返回false while(rs.next())&#123; //获取查询语句中数据 - 注意一下调用的类型 //列-int-&gt;getInt方法 //列-varchar-&gt;getString方法 //列-date-&gt;getDate方法 //列-float/double-&gt;getDouble方法 //getString方法是可以获取任意类型的列的. //根据序号取 - 查询列的序号,不是原表中的序号. //序号从1开始 int id = rs.getInt(1); //根据列的名称/别名 去取 String firstName = rs.getString(&quot;first_name&quot;); double salary = rs.getDouble(3); System.out.println(id+&quot;\\t&quot;+firstName+&quot;\\t&quot;+salary); &#125; &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; finally &#123; //6. 关闭资源 - 一定要注意一下顺序. //先关闭rs,然后是st,然后是conn if(null!=rs)&#123; try &#123; rs.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; if(null!=st)&#123; try &#123; st.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; if(null!=conn)&#123; try &#123; conn.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;&#125; ORM+OO分析 OO过程 - db设计[发现很多之前没有注意到的业务细节] - 业务中的关键对象 OO-设计表123456789drop table t_user;create table t_user( id int(7) primary key auto_increment, username varchar(20) unique not null, password varchar(20) not null, birthday date);insert into t_user values(1,&#x27;admin&#x27;,&#x27;123&#x27;,now());insert into t_user values(2,&#x27;tom&#x27;,&#x27;123&#x27;,now()); ORM123456表 - 实体主键列id 对象标识id普通列 普通属性外键 对象与对象之间的关系 - 对象之间是没有什么关键关系 要么关联单个对象/集合对象 12345int -&gt; Integervarchar -&gt; Stringfloat/double -&gt; Doubledate/datetime -&gt; java.util.Date 1234567891011public class User implements Serializable &#123; //实体类中的属性都是根据db设计来写的 private Integer id; private String username; private String password; private Date birthday;&#125; 制定业务接口 IUserDao.java 12345public interface IUserDao &#123; //具体的操作功能 List&lt;User&gt; findAll();&#125; 接口实现类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192package tech.aistar.dao.impl;import tech.aistar.dao.IUserDao;import tech.aistar.model.entity.User;import java.sql.*;import java.util.ArrayList;import java.util.List;/** * 本类用来演示: 持久层的实现类 - jdbc代码 * * @author: success * @date: 2021/8/25 2:17 下午 */public class UserDaoImpl implements IUserDao &#123; @Override public List&lt;User&gt; findAll() &#123; //1. 加载驱动-省略 //2. 获取连接 Connection conn = null; Statement st = null; ResultSet rs = null; List&lt;User&gt; users = new ArrayList&lt;&gt;(); try &#123; String url = &quot;jdbc:mysql://localhost:3306/j03s?useSSL=true&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&quot;; String user = &quot;root&quot;; String password = &quot;root&quot;; conn = DriverManager.getConnection(url,user,password); //3. 创建语句对象 st = conn.createStatement(); //4. 发送sql String sql = &quot;select * from t_user&quot;; rs = st.executeQuery(sql); //5. 处理结果集 while(rs.next())&#123; int id = rs.getInt(1); String username = rs.getString(2); String pwd = rs.getString(3); Date birthday = rs.getDate(4); //对象是数据在内存中的载体,对象 - 特殊的数组容器 User u = new User(); u.setId(id); u.setUsername(username); u.setPassword(password); u.setBirthday(birthday); users.add(u); &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;finally &#123; //6. 关闭资源 - 一定要注意一下顺序. //先关闭rs,然后是st,然后是conn if(null!=rs)&#123; try &#123; rs.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; if(null!=st)&#123; try &#123; st.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; if(null!=conn)&#123; try &#123; conn.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125; return users; &#125;&#125; 写单元测试junit在项目根目录下新建一个test目录 - 右击它 - mark direcotry as - Test Sources Root 123456789101112131415161718192021222324252627package tech.aistar.dao;import org.junit.Test;import tech.aistar.dao.impl.UserDaoImpl;import tech.aistar.model.entity.User;import java.util.List;/** * 本类用来演示: 针对IUserDao接口中的方法进行逐一单元测试 * * @author: success * @date: 2021/8/25 2:24 下午 */public class UserDaoTest &#123; IUserDao userDao = new UserDaoImpl(); @Test public void testFindAll()&#123; List&lt;User&gt; users = userDao.findAll(); if(null!=users &amp;&amp; users.size()&gt;0)&#123; users.forEach(System.out::println); &#125; &#125;&#125; 第一层封装12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273package tech.aistar.util;import java.sql.*;/** * 本类用来演示: jdbc工具类 * * @author: success * @date: 2021/8/25 3:06 下午 */public class JdbcUtil &#123; /** * 获取连接 * @return */ public static Connection getConnection() throws SQLException &#123; String url = &quot;jdbc:mysql://localhost:3306/j03s?useSSL=true&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&quot;; String user = &quot;root&quot;; String password = &quot;root&quot;; Connection conn = DriverManager.getConnection(url,user,password); return conn; &#125; @SuppressWarnings(&quot;all&quot;) public static void close(Statement st, Connection conn)&#123; if(null!=st)&#123; try &#123; st.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; if(null!=conn)&#123; try &#123; conn.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125; /** * 释放资源 * @param rs * @param st * @param conn */ @SuppressWarnings(&quot;all&quot;) public static void close(ResultSet rs, Statement st, Connection conn)&#123; if(null!=rs)&#123; try &#123; rs.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; if(null!=st)&#123; try &#123; st.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; if(null!=conn)&#123; try &#123; conn.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125; 作业 一个用户可以发布多个视频 1234567891011121314151617drop table t_video;create table t_video( id int(7) primary key auto_increment,title varchar(20) not null,create_date datetime,price double(7,2),video_url varchar(120),-- 不需要创建外键约束,但是仍然需要通过user_id确定和t_user表的关系-- Video实体类中 - private User user;-- User实体类 - private List&lt;Video&gt; videos;user_id int(7));insert into t_video values(1,&#x27;娱乐圈需要整顿&#x27;,now(),10.0,&#x27;http://aistar/001.mp4&#x27;,1);insert into t_video values(2,&#x27;双减计划&#x27;,now(),20.0,&#x27;http://aistar/002.mp4&#x27;,1);insert into t_video values(3,&#x27;鼓励三胎&#x27;,now(),30.0,&#x27;http://aistar/003.mp4&#x27;,2);insert into t_video values(4,&#x27;鼓励一妻多夫&#x27;,now(),40.0,&#x27;http://aistar/004.mp4&#x27;,1); 二进制数据存储,列的数据类型blob - binary large object - 真正的把图片,视频 - 流 -&gt; 存储到列中 - 不可取 专门搭建一个服务器nginx - 服务器上的资源[图片/视频]都会拥有一个url[统一资源定位器 - 唯一的] https://cdn.cnbj1.fds.api.mi-img.com/mi-mall/eb69512d9d6430d865d457ec52eebb51.png?thumb=1&amp;w=400&amp;h=400&amp;f=webp&amp;q=90 实际现在推荐的方式是在表中,比如video_url - 存储这个视频对应的它所在服务器的地址即可 基础的作业 完成针对t_video表的crud操作 - 交的 级联操作 IUserDao.java接口中 根据id删除用户,并且把这个用户下的所有的发布的视频全部删除 - 级联删除. 根据id查询用户,如果该用户发布了视频信息,查询这个用户下发布的视频信息 - 级联查询 保存一个用户的同时也保存了这个用户的三个视频信息 - 级联插入 SQL注入 负责发送sql语句的对象 - Statement语句对象 - 引发sql注入问题 - 是因为参数硬拼接到了sql语句中 sql注入的场景: username是外部传过来的参数.该参数直接会被拼接到sql语句中. rs = st.executeQuery(sql); 123456public User getByUsername(String username) &#123;//... String sql = &quot;select * from t_user where username=&#x27;&quot;+username+&quot;&#x27;&quot;;//...&#125; 单元测试 1234567891011121314151617181920212223242526272829package tech.aistar.dao;import org.junit.Test;import tech.aistar.dao.impl.UserDaoImpl;import tech.aistar.model.entity.User;/** * 本类用来演示: sql注入 * * @author: success * @date: 2021/8/26 8:45 上午 */public class SqlInjectionTest &#123; IUserDao userDao = new UserDaoImpl(); @Test public void testGetByUsername()&#123; // String sql = &quot;select * from t_user where username=&#x27;&quot;+username+&quot;&#x27;&quot;; //username=&#x27;钱枫&#x27; or &#x27;1&#x27;=&#x27;1&#x27; //此处实参是表中不存在的数据 - 钱枫 User user = userDao.getByUsername(&quot;钱枫&#x27; or &#x27;1&#x27;=&#x27;1&quot;);//直接硬拼接到了sql.当然此处的字符串中也有可能包含非法的sql//语句 //select * from t_user where username=&#x27;钱枫&#x27; or &#x27;1&#x27;=&#x27;1&#x27;; System.out.println(user); //User&#123;id=1, username=&#x27;admin&#x27;, password=&#x27;123&#x27;, birthday=2021-08-25&#125; &#125;&#125; PrepareStatement[I] 预编译语句对象 继承于Statement对象 有效防止sql注入 如何创建预编译语句对象 12345678PreparedStatement prepareStatement(String sql);//利用一条sql构建预编译语句对象此处的sql可能包含一些参数的占位符 String sql=&quot;insert into t_video(title,create_date,price,video_url,user_id) values(?,?,?,?,?)&quot;;//3-2. 创建了pst对象// 把带有参数占位符的sql语句已经提前发送到了my-server端进行预编译好了.pst = conn.prepareStatement(sql); 如何发送参数 - 列的类型 setInt,setString,setDate,setDouble…. 12345678910111213141516171819202122232425//把参数发送到mysql-server端,然后再由mysql-server端把参数填充到已经预编译好的sql语句//序号也是从1开始pst.setString(1,video.getTitle());//pst.setDate(2,video.getCreateDate());//关于setDate比较特殊 - java.sql.Date//但是video.getCreateDate() - java.util.Date//java.sql.Date extends java.util.Date//void setDate(int parameterIndex, java.sql.Date x)//处理 - java.util.Date -&gt; 转换成 java.sql.Date//构造 - Date(long time);//利用毫秒数来构建一个日期对象,long-&gt;Date// long getTime();//获取日期的毫秒数;// Date-&gt;long//pst.setDate(2,new java.sql.Date(video.getCreateDate().getTime())); //java.sql.TimeStamp extends java.util.Date//提供了构造Timestamp(long time);pst.setTimestamp(2,new Timestamp(video.getCreateDate().getTime()));pst.setDouble(3,video.getPrice());pst.setString(4,video.getVideoUrl());//为什么需要在Video中维护了单个user对象的原因.pst.setInt(5,video.getUser().getId()); 方法 6-1. int executeUpate(); 6-2. ResultSet executeQuery(); PrepareStatement和Statement区别 PreparedStatement继承自Statement,都是接口 Statement适用于运行静态 SQL 语句[参数直接硬拼接到sql语句]。 Statement 接口不接受参数。 **PrepareStatement计划多次使用同一条 SQL 语句[适合执行同构的sql]**， PreparedStatement接口运行时接受输入的参数。 PrepareStatement有效防止sql注入 PreparedStatement会预编译SQL语句,Statement每次都会解析/编译SQL preStatement 的效率 比 Statement 的效率高 同构sql的场景PrepareStatement 1234567891011121314151617181920String sql=&quot;insert into t_video(title,create_date,price,video_url,user_id) values(?,?,?,?,?)&quot;;//提前把sql发送mysql-server预编译pst = connection.prepareStatement(sql);//发送参数for (Video video : videoList) &#123; //一组参数 //设置参数 pst.setString(1,video.getTitle()); pst.setTimestamp(2,new Timestamp(video.getCreateDate().getTime())); pst.setDouble(3,video.getPrice()); pst.setString(4,video.getVideoUrl()); //为什么需要在Video中维护了单个user对象的原因. pst.setInt(5,video.getUser().getId()); //发送 pst.executeUpdate();&#125; Statement实现 1234567st = conn.createStatement();for (Video video : videoList) &#123; String sql = &quot;insert....字符串拼接..&quot;+video.getTitle()+&quot;&#x27;,&#x27;&quot;+video.get...; //Statement每次都会解析/编译SQL st.executeUpdate(sql); &#125; 批处理操作 比如批量插入 - 即使以后学习了持久层的框架[hibernate,mybatis,mybatis-plus,springdatajpa],但是遇到批量插入,首选的技术jdbc .效率仍然是最高的. PrepareStatement关于批处理的api void addBatch();向这个 PreparedStatement对象的一批命令添加一组参数 void clearParameters() 立即清除当前参数值。 void clearBatch();//清空此 Statement对象的当前SQL命令列表 int[] executeBatch();//执行命令列表 需要在url上增加一个配置 12&amp;rewriteBatchedStatements=true 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364@Overridepublic void saveListBatch(List&lt;Video&gt; videoList) &#123;Connection connection = null;PreparedStatement pst = null;int count = 0;try &#123; connection = JdbcUtil.getConnection(); //无论保存多少给视频信息,使用到的是相同的结构的 - 同构的sql语句 String sql=&quot;insert into t_video(title,create_date,price,video_url,user_id) values(?,?,?,?,?)&quot;; //提前把sql发送mysql-server预编译 pst = connection.prepareStatement(sql); //发送参数 for (Video video : videoList) &#123; //一组参数 //设置参数 pst.setString(1,video.getTitle()); pst.setTimestamp(2,new Timestamp(video.getCreateDate().getTime())); pst.setDouble(3,video.getPrice()); pst.setString(4,video.getVideoUrl()); //为什么需要在Video中维护了单个user对象的原因. pst.setInt(5,video.getUser().getId()); //发送 //缺陷 - 来一个对象 - 一组参数 - 客户端[jdbc代码]-频繁和mysql-server端进行交互 - 发送一组参数 //pst.executeUpdate(); //优化 - 同时发送很多组. //可以把每个组的参数 - 放入到批处理的列表中. //向这个 PreparedStatement对象的一批命令添加一组参数 pst.addBatch();//意味着此时没有进行发送 count++;//计数 - 组 //应该每多少组 - 就得发送一次呢 - 根据具体的业务. if(count==1000)&#123; //把参数发送mysql-server端一次 pst.executeBatch();//执行批处理的命令列表 //清空一下命令列表 pst.clearBatch(); pst.clearParameters();//立即清除当前参数值。 count=0; &#125; &#125; //考虑插入的不是1000的倍数 if(count!=0)&#123; //防止漏电了参数 pst.executeBatch(); pst.clearBatch(); pst.clearParameters(); &#125;&#125; catch (SQLException e) &#123; e.printStackTrace();&#125;finally &#123; JdbcUtil.close(pst,connection);&#125;&#125; 第二层封装 老管说的话,一定都是对的 如果发现老管说错了,请参考第一条. 模板设计模式12345678910111213141516171819Connection connection = null;PreparedStatement pst = null;try &#123; //1.加载驱动,获取连接 connection = JdbcUtil.getConnection(); //个性的 //String sql=&quot;&quot;; //pst = connection.prepareStatement(sql); pst.executeUpdate();&#125; catch (SQLException e) &#123; e.printStackTrace();&#125;finally &#123; JdbcUtil.close(pst,connection);&#125; JdbcTemplate - 自定义jdbc模板工具类idea配置datasource 选择驱动 点击apply db-连接属性 如果不行 级联插入 插入一个用户的同时,同时插入这个用户的视频信息 - 业务线是不存在. 如果视频信息比较多 - 批处理 事务 - 同时成功和同时失败 插入user的时候,怎么拿到刚刚插入的那个主键值[auto_increment] 12345678910111213//为了拿到自增长的主键列的值pst = conn.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS); //插入一个新的user之后,如何能够拿到刚刚自增长的主键列的值//一行一列的rsPk = pst.getGeneratedKeys();//肯定是拿到一个 Integer insertUserId = null;if(rsPk.next())&#123; insertUserId = rsPk.getInt(1);&#125; 事务 jdbc的事务是和底层的数据是相关的相关的. jdbc中的事务是默认自动提交的. jdbc编程中的事务 - 编程性事务 - 控制事务的代码和jdbc代码耦合在一块儿. 未来都是使用的是spring中声明事务.把事务的代码和应用程序的代码分离了. 12345678910111213141516171819202122232425262728Connection conn = null;PreparedStatement pst = null;try &#123;conn = JdbcUtil.getConnection();//保证同时成功同时失败//涉及到很多个sql - 保证事务的原子性 - 同时成功,同时失败.//设置手动提交conn.setAutoCommit(false);//默认是自动提交的//手动提交conn.commit();&#125; catch (SQLException e) &#123;//回滚if(null!=conn)&#123; try &#123; conn.rollback();//回滚 &#125; catch (SQLException ex) &#123; ex.printStackTrace(); &#125;&#125;e.printStackTrace();&#125;finally &#123;JdbcUtil.close(pst,conn);&#125; 作业 IUserDao.java 统计每个用户发布的视频的数量 UserDaoImpl.java实现类不要给我写输出语句 - 返回结果. 今天代码级联操作 - 理解+敲 多条件组合分页查询 2-1. 如果仅仅给定了一个用户名 - 根据用户名进行一个分页查询 2-2. 如果仅仅给定了一个title,那么就是根据title进行模糊分页查询 2-2. 如果username和title同时给了.同时根据这俩个条件[同时成立]进行分页查询. 2-3. 如果俩个条件都不给.那么就是查整个视频表,分页查询. DTO DTO - Data transfer object - 数据传输对象. 当内存中的数据没有任何一个实体类可以绑定的时候,那么可以考虑创建第三方实体类,用来作为数据交互的容器 - DTO DTO对象它是不需要和表和它进行映射的,它只是在内存中进行传输的. 多条件组合分页查询 使用limit语句 - 分页公式:limit (pageNow-1)*pageSize,pageSize 分页之后得到的数据 每页显示的条数 - 手动传入的. 根据条件查询得到的结果的个数 - rows - 总的条数 总的条数/每页显示条数 =&gt; 总的页数 网页中显示的分页的数据-[手机信息,book信息] 上一页 1 2 3 4 5 6 7 8 下一页 当前页12/30总页 业务逻辑层 - service 数据持久层 - dao - dao接口 - 只负责和db进行交互 - sql语句 - 关注点在”db和数据的crud” 业务逻辑层 - service - service接口 - 不需要和db进行交互,把dao层交互得到的数据进行业务逻辑的处理 - 不需要写sql service层需要调用dao层 - service关注点 - “业务逻辑” 最难写的一层就是service层 元数据 DataBaseMetaData - 数据库的元数据 - 可以获取数据库的元信息 - url,user,driver,版本号等信息 123java.sql.Connection提供的DataBaseMetaData getMetaData(); ResultSetMetaData - 结果集元数据 - 可以获取结果集的元信息 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package tech.aistar.day03;import tech.aistar.util.JdbcUtil;import java.sql.*;/** * 本类用来演示: 结果集元数据* * @author: success * @date: 2021/8/27 10:48 上午*/public class ResultSetMetaDataDemo &#123; public static void main(String[] args) &#123; Connection conn = null; PreparedStatement pst = null; ResultSet rs = null; try &#123; conn = JdbcUtil.getConnection(); String sql = &quot;select id,title from t_video&quot;; //可以生成可滚动和/或可更新的ResultSet对象 pst = conn.prepareStatement(sql); //本质上是一个光标,默认是停留在第一行的上方. rs = pst.executeQuery(); //描述结果集的 - 结果集的元数据[描述数据的数据] ResultSetMetaData rsmd = rs.getMetaData(); //1. 获取查询结果 - 列的个数 int cols = rsmd.getColumnCount(); for (int i = 1; i &lt;=cols; i++) &#123; //获取列的标题名称 - 下标从1开始 String colName = rsmd.getColumnName(i); System.out.print(colName+&quot;\\t&quot;); &#125; System.out.println(); while(rs.next())&#123; //String getString(int i);//可以获取任意类型的数据 for (int i = 1; i &lt;=cols; i++) &#123; System.out.print(rs.getString(i)+&quot;\\t&quot;); &#125; System.out.println(); &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;finally &#123; JdbcUtil.close(rs,pst,conn); &#125; &#125;&#125; 重新认识ResultSet 构建一个可滚动可更新的结果集对象 任意定位到具体的行 直接使用rs对象来进行update和delete以及insert操作 本质上是一个光标,默认是停留在第一行的上方. boolean next();//向下移动一行 boolean absolute(int row);//绝对定位到行 boolean first();//定位到第一行 boolean last();//定位到最后一行 boolean relative(int n);//相对定位 demo12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667package tech.aistar.day03;import tech.aistar.util.JdbcUtil;import javax.xml.transform.Result;import java.sql.*;/** * 本类用来演示: 结果集对象 * * @author: success * @date: 2021/8/27 10:34 上午 */public class ResultSetDemo &#123; public static void main(String[] args) &#123; Connection conn = null; PreparedStatement pst = null; ResultSet rs = null; try &#123; conn = JdbcUtil.getConnection(); String sql = &quot;select * from t_video&quot;; //可以生成可滚动和/或可更新的ResultSet对象 pst = conn.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE); //本质上是一个光标,默认是停留在第一行的上方. rs = pst.executeQuery(); //绝对定位 - 默认是不支持的 //Operation not allowed for a result set of type //ResultSet.TYPE_FORWARD_ONLY - //默认的只有一个向前移动的光标。 //因此，您只能从第一行到最后一行迭代一次。 可以生成可滚动和/或可更新的ResultSet对象 rs.absolute(3);//设置成一个可滚动的结果集 //相对定位 //rs.relative(-2); //rs.first();//定位到第一行 //rs.last();//定位到最后一行 //可以直接通过光标来进行update操作和delete操作 //更新第3行的title - rs.absolute(3) //rs.updateString(&quot;title&quot;,&quot;田原&quot;); //commit操作 //rs.updateRow(); //删除行 rs.deleteRow(); System.out.println(rs.getString(2)); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;finally &#123; JdbcUtil.close(rs,pst,conn); &#125; &#125;&#125; 数据库连接池DriverManager方式缺陷 在执行JDBC的增删改查的操作时，如果每一次操作都来一次打开连接，操作，关闭连接， 那么创建和销毁JDBC连接的开销就太大了。为了避免频繁地创建和销毁JDBC连接，我们可以通过连接池（Connection Pool）复用已经创建好的连接。 连接池选择 JDBC连接池有一个标准的接口javax.sql.DataSource，注意这个类位于Java标准库中，但仅仅是接口。要使用JDBC连接池，我们必须选择一个JDBC连接池的实现。常用的JDBC连接池有： HikariCP C3P0 BoneCP Druid - 阿里的 dbcp 连接池的基本原理数据库连接池的基本思想就是为数据库连接 建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。我们可以通过设定 连接池最大连接数来防止系统无尽的与数据库连接。更为重要的是我们可以通过连接池的管理机制监视数据库的连接的数量?使用情况，为系统开发?测试及性能调 整提供依据。 连接池的工作原理 连接池的工作原理主要由三部分组成，分别为连接池的建立、连接池中连接的使用管理、连接池的关闭。 连接池的创建 一般在系统初始化时，连接池会根据系统配置建立，并在池中创建了几个连接对象，以便使用时能从连接池中获取。连接池中的连接不能随意创建和关闭，这样避免了连接随意建立和关闭造成的系统开销。Java中提供了很多容器类可以方便的构建连接池，例如Vector[线程安全的类]、Stack等。 连接池连接的使用管理 连接池管理策略是连接池机制的核心，连接池内连接的分配和释放对系统的性能有很大的影响。其管理策略是：当客户请求数据库连接时，首先查看连接池中是否有空闲连接，如果存在空闲连接，则将连接分配给客户使用；如果没有空闲连接，则查看当前所开的连接数是否已经达到最大连接数，如果没达到就重新创建一个连接给请求的客户；如果达到就按设定的最大等待时间进行等待，如果超出最大等待时间，则抛出异常给客户。 当客户释放数据库连接时，先判断该连接的引用次数是否超过了规定值，如果超过就从连接池中删除该连接，否则保留为其他客户服务。该策略保证了数据库连接的有效复用，避免频繁的建立、释放连接所带来的系统资源开销。 当应用程序退出时，关闭连接池中所有的连接，释放连接池相关的资源，该过程正好与创建相反 为什么要使用连接池 数据库连接是一种关键的有限的昂贵的资源，这一点在多用户的网页应用程序中体现得尤为突出。 一个数据库连接对象均对应一个物理数据库连接，每次操作都打开一个物理连接，使用完都关闭连接，这样造成系统的 性能低下。 数据库连接池的解决方案是在应用程序启动时建立足够的数据库连接，并讲这些连接组成一个连接池(简单说：在一个“池”里放了好多半成品的数据库联接对象)，由应用程序动态地对池中的连接进行申请、使用和释放。对于多于连接池中连接数的并发请求，应该在请求队列中排队等待。并且应用程序可以根据池中连接的使用率，动态增加或减少池中的连接数。 连接池技术尽可能多地重用了消耗内存地资源，大大节省了内存，提高了服务器地服务效率，能够支持更多的客户服务。通过使用连接池，将大大提高程序运行效率，同时，我们可以通过其自身的管理机制来监视数据库连接的数量、使用情况等。 相关配置-部分 maxActive 连接池支持的最大连接数，这里取值为20，表示同时最多有20个数据库连接。一般把maxActive设置成可能的并发量就行了设 0 为没有限制。 maxIdle 连接池中最多可空闲maxIdle个连接 ，这里取值为20，表示即使没有数据库连接时依然可以保持20空闲的连接，而不被清除，随时处于待命状态。设 0 为没有限制。 minIdle 连接池中最小空闲连接数，当连接数少于此值时，连接池会创建连接来补充到该值的数量 initialSize 初始化连接数目 maxWait 连接池中连接用完时,新的请求等待时间,毫秒，这里取值-1，表示无限等待，直到超时为止，也可取值9000，表示9秒后超时。超过时间会出错误信息 手撸连接池代理模式 静态代理 动态代理 - jdk动态代理[Spring底层默认的代理模式]以及cglib代理 jdk动态代理只能代理接口 需求 给dao层中的每个方法添加日志输出. 不使用代理12345678910111213141516171819202122232425262728293031323334353637383940414243package tech.aistar.proxy.demo01;import java.util.Date;/** * 本类用来演示: //日志记录是与业务无关的代码 //1. 业务无关代码和业务相关代码耦合在一块儿.造成dao层/service层方法比较臃肿 //2. 日志有一定的格式.如果哪天日志格式,日志记录的内容发生了改变.需要修改所有 // 出现日志的程序代码的. //3. 日志记录的功能维护性比较差 * * @author: success * @date: 2021/8/27 2:19 下午 */public class TeacherDaoImpl implements ITeacherDao&#123; @Override public void save() &#123; //与业务无关的方法 - 日志记录 - 核心方法调用之前日志输出 System.out.println(&quot;log-before...&quot;+new Date()); //核心&quot;业务&quot;的代码 System.out.println(&quot;jdbc-insert&quot;); //日志记录 - 核心方法调用之后日志输出 System.out.println(&quot;log-after...&quot;+new Date()); &#125; @Override public int delById(Integer id) &#123; System.out.println(&quot;log-before...&quot;+new Date()); //核心&quot;业务&quot;的代码 System.out.println(&quot;jdbc-del:&quot;+id); System.out.println(&quot;log-after...&quot;+new Date()); return 0; &#125;&#125; 静态代理 在程序的编译期间,手动编写静态代理类 =&gt; 并且在编译期就得生成这个静态代理类. 优点:将核心的代码和非核心的代码[日志代码]进行了分离.不会导致核心的代码显示得比较臃肿了. 缺点 程序中会出现大量的静态代理类[增加了维护成本]. 如果日志格式需要改变.需要修改很多静态代理类中的代码的.对于静态代理类而言的.违背了软件的”开闭原则”. 被代理对象 - 房东 代理对象 - 中介 代理对象和被代理对象都应该去实现同一个接口 - 在实际应用的时候,是使用代理对象去调用接口的方法! 1234567891011121314151617181920212223242526272829303132333435363738394041424344package tech.aistar.proxy.demo02;import java.util.Date;/** * 本类用来演示: 编译期间生成的一个静态代理类 * * 代理对象和被代理对象都应该去实现同一个接口 * * * @author: success * @date: 2021/8/27 2:28 下午 */public class TeacherDaoImplProxy implements ITeacherDao&#123; private ITeacherDao teacherDao; public TeacherDaoImplProxy()&#123; //构建一个代理对象的时候,里面会立即初始化被代理的对象类[原始对象] this.teacherDao = new TeacherDaoImpl(); &#125; @Override public void save() &#123; //&quot;中介卖房的时候吹牛的话&quot; System.out.println(&quot;log-before&quot;+new Date()); teacherDao.save();//原始对象的核心的业务 System.out.println(&quot;log-after&quot;+new Date()); &#125; @Override public int delById(Integer id) &#123; System.out.println(&quot;log-before&quot;+new Date()); teacherDao.delById(10);//原始对象的核心的方法 System.out.println(&quot;log-after&quot;+new Date()); return 0; &#125;&#125; 动态代理 不需要在编译期间手动编写代理类. 是在程序的运行期间,反射创建代理对象. jdk动态代理技术只能代理接口. 总结:使用代理对象去调用方法应该是比你原始对象去调用方法的功能更加强大. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package tech.aistar.proxy.demo03;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.util.Date;import java.util.Properties;/** * 本类用来演示: 动态代理 - 代理任何接口的* * @author: success * @date: 2021/8/27 2:48 下午*/public class ProxyHandler implements InvocationHandler &#123; //jdk动态代理技术只能代理接口 private Object obj;//被代理的原始对象 public ProxyHandler(Object obj)&#123; this.obj=obj; &#125; /** * invoke方法何时被调用? * 当使用代理对象调用被代理对象中的方法的时候[save,del] * 会自动执行invoke方法. * * 如果调用的是ITeacherDao接口中的save方法 * proxy -&gt; 该接口的代理 * method -&gt; save方法对应的反射的Method实例 * * @param proxy 程序在运行的过程中生成的那个代理对象 * @param method 当前正在调用的接口中的那个方法对应的反射的Method实例 * @param args 被调用的方法的参数 * @return * @throws Throwable */ @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; System.out.println(&quot;log-before&quot;+new Date()); //反射调用方法 Object result = method.invoke(obj,args); System.out.println(&quot;log-after&quot;+new Date()); return result; &#125;&#125; 使用第三方连接池 连接池[实现类]本身就是jdk提供的java.sql.DataSource接口的具体的实现类[BasicDataSource]. 连接池本身就是属于一个昂贵的重量级的对象,不要轻易去关闭它. 整个应用程序中,一个连接池对应一个db数据库 - 连接池叫做数据源.保证连接池的单例. 步骤 导入jar 连接池的配置文件 - 配置参数建议是放在配置文件中统一进行管理的. db.properties 1234567891011121314151617181920# 系统初始化的时候,连接池中的可用的连接的初始的个数initialSize=3# 连接池中最小空闲连接数,当连接数少于此值时，连接池会创建连接来补充到该值的数量 minIdle=5 # 连接池中最多可空闲maxIdle个连接 ，# 这里取值为20，表示即使没有数据库连接时依然可以保持20空闲的连接，# 而不被清除，随时处于待命状态。设 0 为没有限制。maxIdle=15 # 连接池支持的最大连接数，maxActive=15 # 连接池中连接用完时,新的请求等待时间,毫秒# 1. 当新的请求到达,并且连接池中的连接已经到达maxActive值,连接池是不会分配连接给这个用户的.# 那么这个用户就会在等待队列中[等待有没有被使用的连接被释放出来 - 新的空闲连接]# 如果超过maxWait -&gt; 抛出一个已经超时的错误.maxWait=5000 编写连接池类 - &gt; 单例的. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package tech.aistar.util;import org.apache.commons.dbcp.BasicDataSource;import java.sql.Connection;import java.sql.SQLException;/** * 本类用来演示: 连接池[俩个jar]设置参数而已 * * @author: success * @date: 2021/8/27 3:51 下午 */public class PoolUtil &#123; private static volatile PoolUtil instance = null; private BasicDataSource basicDataSource; private PoolUtil()&#123; //进行一些连接池的配置 basicDataSource = new BasicDataSource(); basicDataSource.setUrl(&quot;jdbc:mysql://localhost:3306/j03s?useSSL=true&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&amp;rewriteBatchedStatements=true&quot;); basicDataSource.setUsername(&quot;root&quot;); basicDataSource.setPassword(&quot;root&quot;); //设置参数 basicDataSource.setInitialSize(Integer.valueOf(DBPropUtil.getValue(&quot;initialSize&quot;))); basicDataSource.setMinIdle(Integer.valueOf(DBPropUtil.getValue(&quot;minIdle&quot;))); basicDataSource.setMaxIdle(Integer.valueOf(DBPropUtil.getValue(&quot;maxIdle&quot;))); basicDataSource.setMaxActive(Integer.valueOf(DBPropUtil.getValue(&quot;maxActive&quot;))); basicDataSource.setMaxWait(Long.valueOf(DBPropUtil.getValue(&quot;maxWait&quot;))); &#125; public static PoolUtil getInstance()&#123; if(null==instance)&#123; synchronized (PoolUtil.class)&#123;//&quot;类锁&quot; if(null==instance)&#123; instance = new PoolUtil(); &#125; &#125; &#125; return instance; &#125; /** * 获取连接 * @return */ public Connection getConnection() throws SQLException &#123; return basicDataSource.getConnection(); &#125;&#125; 使用连接池来获取连接 12345678910111213141516171819202122conn = PoolUtil.getInstance().getConnection(); //拿到的是一个Connection接口的代理对象 //class org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper//conn.getClass(); //原始对象conn.close();//销毁掉了...conn.close();//关闭 //代理对象在调用close();//自动执行invoke方法//method - close方法的Metthod实例//proxy - conn @Overridepublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; //到底是应该销毁还是应该把这根连接放回到连接池中,让别的请求继续使用呢??? // return result;&#125; DB设计之后 mybatis框架 - 进入到前端 - 设计项目页面了. 组长分配任务 - &gt; 组员 - &gt; 写sql脚本 DDL - 建表语句 Insert语句 - 模拟数据 - 尽量真实. jdbc拓展 复习反射技术+动态代理 实体类的设计+业务层service 为学习mybatis作一个铺垫. 强调下项目中鼓励使用单表查询 jdbc缺陷 涉及到查询语句 - 手动封装的过程 - 麻烦 持久层的框架 - Hibernate全自动的ORM框架 - 可以实现完全的自动封装的过程. Mybatis半自动的ORM框架 - 查询的结果 - 有的需要手动封装,有的可以自动封装. 框架 - 为了解决某一领域里的问题而提供的一套解决方案. sql语句会硬编码到了程序中了.java代码和sql语句耦合在一块儿了.不利于后期的sql语句的优化 如果后期需要对sql进行优化,还需要对java代码重新编译 - 重新打包 - 重新部署. 实体类的设计 开发中严格按照这个要求. 表名要么就和类名保持一致,要么就使用统一的前缀. 列名-属性名高度保持一致-全部小写以及多个单词一定采用匈牙利命名xxx_yyy_zzz 尤为重要的 - 对象之间的关系不再是采用之前的那样的强耦合的关系呢! 案例123456789101112131415161718192021222324drop table t_user;create table t_user( id int(7) primary key auto_increment, username varchar(20) unique not null, password varchar(20) not null, birthday date);insert into t_user values(1,&#x27;admin&#x27;,&#x27;123&#x27;,now());insert into t_user values(2,&#x27;tom&#x27;,&#x27;123&#x27;,now());drop table t_video;create table t_video( id int(7) primary key auto_increment, title varchar(20) not null, create_date datetime, price double(7,2), video_url varchar(120), user_id int(7));insert into t_video values(1,&#x27;娱乐圈需要整顿&#x27;,now(),10.0,&#x27;http://aistar/001.mp4&#x27;,1);insert into t_video values(2,&#x27;双减计划&#x27;,now(),20.0,&#x27;http://aistar/002.mp4&#x27;,1);insert into t_video values(3,&#x27;鼓励三胎&#x27;,now(),30.0,&#x27;http://aistar/003.mp4&#x27;,2);insert into t_video values(4,&#x27;鼓励一妻多夫&#x27;,now(),40.0,&#x27;http://aistar/004.mp4&#x27;,1); 实体类设计 12345678910111213141516171819202122232425public class User&#123; private Integer id; private String username; private String password; private Date birthday; //不需要进行视频信息的集合的维护...&#125;public class Video&#123; private Integer id; private String title; private Date createDate; private Double price; private String videoUrl; //表中的外键是什么,此处就写什么. private Integer userId;&#125;// TODO... 对象之间的绑定操作应该如何进行??? 需求 根据用户的id查询用户信息,如果该用户具有视频信息一并加载出来 根据id级联删除 之前级联操作 方式一:使用了嵌套查询-在dao层的一个方法中写了俩条sql. 方式二:在dao层的一个方法中写了一个关联查询. 绑定的代码-user.setVideoList(videos); 实际的开发中尽量不要多表查询.如果出现三个表关联查询 - 性能低下了. 每条sql语句可以被灵活的去复用了. 分表操作 - 单表有利于后期的维护的. 单表的解决方案 先根据用户id查询出用户出来 根据用户id[user_id]去查询视频表 需要使用第三方dto对象来建立User和Video的一个关系. 12345678910111213//UserVo-绑定用户和这个用户的视频信息的.//第一种方式 - 采用继承的写法 - 不推荐使用继承的.public class UserVo extends User &#123; private List&lt;Video&gt; videoList;&#125;//第二种方式public class UserVo &#123; private User user; private List&lt;Video&gt; videoList;&#125; 制定业务层接口 - 数据的绑定 回顾动态代理 jdk动态代理只能代理接口. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package tech.aistar.proxy.demo03;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.util.Date;import java.util.Properties;public class ProxyHandler implements InvocationHandler &#123; private Object obj; public ProxyHandler(Object obj)&#123; this.obj=obj; &#125; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; //proxy - teacherDao对应的代理对象 //method-代理对象正在调用的那个方法的method实例,del - Method m = c.getDeclaredMethod(&quot;del&quot;); System.out.println(&quot;log-before&quot;+new Date()); //反射调用方法 Object result = method.invoke(obj,args);//核心的业务.原始obj System.out.println(&quot;log-after&quot;+new Date()); return result; &#125;&#125;//单元测试//jdk动态代理只能代理接口.ITeacherDao teacherDao = new TeacherDaoImpl();ProxyHandler hander = new ProxyHandler(teacherDao);//构建代理对象ITeacherDao proxy = (ITeacherDao) Proxy.newProxyInstance(teacherDao.getClass().getClassLoader() ,teacherDao.getClass().getInterfaces(),hander);//代理对象调用目标接口中的方法proxy.del(10);//invoke方法proxy.save();//总结出来就是//代理对象去调用原始接口中的目标方法的时候,自动执行invoke方法//invoke方法中除了核心的方法的调用[反射],还有可能有额外的动作. 手撸连接池1234567891011121314151617Connection - 接口 - 才可以使用jdk动态代理技术目标方法 - commit(),close();connProxy - conn连接对象的代理对象 核心的业务方法conn.close();connProxy.close();//自动调用invoke - 判断,到底是应该把连接销毁conn.close();还是应该把这根连接进行回收,放回到连接池中.原始对象 - 房东 - 租房 - 卖房 代理对象 - 中介 客户访问房源 - 调用 - [中介吹牛1,吹牛2,吹牛3 , 房东的.房子[反射调用] , ......] - invoke 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153package tech.aistar.mypools;import tech.aistar.util.JdbcUtil;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;import java.sql.Connection;import java.sql.SQLException;import java.util.LinkedList;/** * 本类用来演示: 简化的连接池 * * @author: success * @date: 2021/8/30 3:10 下午 */public class MyDataSource &#123;//单例的 //最大的连接 public int maxActive = 8; //初始化的连接数量 public int initialSize = 3; //正在被使用的连接 public int currSize = 0; //&quot;连接池&quot; - 集合实现的. //重量级的对象 - 只要被加载一次,并且整个内存中的实例只有1个. // 不能随意创建和销毁 - 比较耗时. public LinkedList&lt;Connection&gt; pools = new LinkedList&lt;&gt;(); private static volatile MyDataSource instance = null; //私有化构造 private MyDataSource()&#123; //初始化一些拥有的连接放入到&quot;连接池中去&quot; for (int i = 0; i &lt; initialSize; i++) &#123; pools.add(createConnection()); &#125; &#125; public static MyDataSource getInstance()&#123; if(null==instance)&#123; synchronized (MyDataSource.class)&#123; if(null==instance)&#123; instance = new MyDataSource(); &#125; &#125; &#125; return instance; &#125; public Connection createConnection()&#123; //jdbc代码... //代理对象 Connection connProxy = null; try &#123; Connection conn = JdbcUtil.getConnection();//原始接口 //conn的代理对象 connProxy = (Connection) Proxy.newProxyInstance(conn.getClass().getClassLoader(), conn.getClass().getInterfaces(), new InvocationHandler() &#123; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; //只要使用代理对象调用目标接口Connection接口的任何方法-都会执行invoke //close,commit,rollback .... Object result = null; //改变close方法的功能 - 未必是直接销毁conn,有可能是放回到pools中 if(&quot;close&quot;.equals(method.getName()) &amp;&amp; currSize&lt;=maxActive)&#123; System.out.println(&quot;===放回到连接池中===&quot;); currSize--;//当前正在被使用到的连接 pools.add(conn); &#125;else if(&quot;close&quot;.equals(method.getName()) &amp;&amp; currSize&gt;maxActive)&#123; //initialSize - 最大的空闲 System.out.println(&quot;===真正的去销毁连接===&quot;); currSize--; if(null!=conn)&#123; conn.close(); &#125; &#125;else&#123; //commit,rollback... result = method.invoke(conn,args); &#125; return result; &#125; &#125;); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; //返回的是代理对象 return connProxy; &#125; //提供一个方法来获取连接 //目的 - 从连接池中得到一根连接 public Connection getConnection()&#123; //1. 如果连接池中有可能的连接,那么就直接从&quot;pools&quot;中直接返回一个 //2. 保证多线程环境下,不能有俩个线程争抢到同一个connection synchronized (pools)&#123; if(pools.size()&gt;0)&#123; System.out.println(&quot;===直接从pools中取===&quot;); currSize++; //说明连接池中有可用的连接 //集合中删除一个,删除的这个连接返回出去 return pools.removeLast(); &#125;else if(currSize&lt;=maxActive)&#123; System.out.println(&quot;===init初始化的连接已经用完了===&quot;); //pools中初始的连接已经用光了. currSize++; //隐含的条件 - 拿到之后.需要把这根连接放连接池中 - 有可能. return createConnection(); &#125;else&#123; throw new RuntimeException(&quot;sorry,您需要等待了!已经超过连接池最大活动数了!&quot;); &#125; &#125; &#125; public static void main(String[] args) throws SQLException &#123; Connection conn1 = MyDataSource.getInstance().getConnection(); Connection conn2 = MyDataSource.getInstance().getConnection(); Connection conn3 = MyDataSource.getInstance().getConnection(); //代理对象调用 - 放回到连接池中 Connection conn4 = MyDataSource.getInstance().getConnection(); conn4.close(); // conn3.close(); System.out.println(&quot;当前正在使用的连接的个数:&quot;+MyDataSource.getInstance().currSize); System.out.println(&quot;当前连接池中存在的可用的连接的个数:&quot;+MyDataSource.getInstance().pools.size()); //System.out.println(MyDataSource.getInstance().pools.size()); //conn1.close();//不能直接傻瓜式去关闭了,也有可能是放回到连接池中. //conn1.close();//自动找到invoke方法// conn1.setAutoCommit(false);//// conn1.commit(); &#125;&#125;","categories":[{"name":"JDBC","slug":"JDBC","permalink":"http://example.com/categories/JDBC/"}],"tags":[{"name":"JDBC","slug":"JDBC","permalink":"http://example.com/tags/JDBC/"}]},{"title":"part06_视图和limit","slug":"part06-视图和limit","date":"2021-08-30T16:16:01.000Z","updated":"2021-08-30T16:16:21.414Z","comments":true,"path":"2021/08/31/part06-视图和limit/","link":"","permalink":"http://example.com/2021/08/31/part06-%E8%A7%86%E5%9B%BE%E5%92%8Climit/","excerpt":"","text":"limit语句 应用场景就是 - 网页中的数据[肯定是mysql中的]肯定是要进行分页的. 123-- 获取表中前m行的数据.-- limit mmysql&gt; select * from s_emp limit 3; 123456-- limit m,n-- m代表的是行下标,从0开始-- n代表的是显示的条数-- 从第3行开始,显示5条mysql&gt; select * from s_emp limit 2,5; 分页的公式 场景: 对于用户而言,点击多少页,比如选择1页,认为是第一页. pageNow - 当前页. pageSize - 每页显示条数 1limit (pageNow-1)*pageSize,pageSize sql优化的部分 limit m,n m - 偏移量 n-显示的条数 如果偏移量比较大,limit语句的查询性能就会低下. limit优化常见的两种场景 假设stu表中name列没有添加索引.但是name是从业角度考虑它应该是唯一的. 1234567select * from stu where name=&#x27;tom&#x27;;-- 肯定会进行全表扫描的. - 数据量 - 导致查询效率低下explain select * from stu where name=&#x27;tom&#x27;;-- 已经确认name列值肯定是唯一的 - 避免全表扫描select * from stu where name=&#x27;tom&#x27; limit 1; 前提条件是id主键列是自增且连续,由于limit m,n随着m[偏移量]增加,导致查询效率低下 1234select * from s_emp limit 10000,2;优化select * from s_emp where id&gt;10000 limit 2; 视图 视图 - “虚拟表”,类似于原表的”镜像”,之前是怎么操作table的,怎么操作视图view 优势: 保证数据的安全性. 比如某张表中的隐秘数据比较多,不希望程序员看到你这个原表.比如emp(id,name,salary,birthday). 隐秘数据比如有salary,birthday.为了保障数据的安全性.db[数据库管理员]可以为emp创建视图出来 1234create view emp_view as select id,name from emp;接下来程序员的操作,直接对视图进行操作了[select,insert,update,delete] - &gt; 对原表也会产生影响.但是删除视图,是不会删除原表的.但是删除原表,视图肯定是不存在的. 封装一些比较繁琐的关联查询,在以后再次用到的时候.可以直接查询视图. 简化我们查询数据 简单分类 简单视图 - 视图来自于单张表的查询 复杂视图 - 视图来自于关联查询[多张表] 创建视图1create view 视图名 as select语句; 12为student表创建一个简单视图create view stu_view as select * from student; 删除视图1drop view 视图名; 操作视图 视图的查询 - DQL 12select * from stu_view; 修改原表,看是否对视图造成影响 - 会 12345update student set sname=&#x27;admin&#x27; where id=1;select * from stu_view;| 1 | admin | 1990-01-01 00:00:00 | 男 | 能不能对简单视图进行dml操作 - 可以 对视图的dml操作同样也会对原表产生影响 12update stu_view set sname=&#x27;success&#x27; where id=1; 复杂视图 复杂视图代表整个视图的来源是关联表的查询 - 就是用来被查询的. 12345678-- 查询区域名以及这个区域上的员工的first_namedrop view region_view;create view region_viewas select r.name,e.first_name from s_region r join s_dept d on d.region_id = r.idjoin s_emp e on e.dept_id = d.id; 12select * from region_view; 它和简单视图的一个区别在于,复杂视图是不能够执行DML操作的 123delete from region_view where name = &#x27;North America&#x27;;ERROR 1395 (HY000): Can not delete from join view &#x27;j03s.region_view&#x27; with check option 12345678910111213141516171819202122232425262728293031drop view stu_view;create view stu_viewas select id,sname from student where id=13;select * from stu_view;-- 更新视图 - 更新的是视图来源的那条sql的where中的条件列update stu_view set id=100 where id=13;-- 视图没有了 - 原表中已经没有了 - 视图的更新会同步给原表[对原表产生了影响了]mysql&gt; select * from stu_view;Empty set (0.00 sec)-- 不允许视图去更新自己来源的那条sql中的where条件列.drop view stu_view;create view stu_viewas select id,sname from student where id=11 with check option;mysql&gt; select * from stu_view;+------+--------+| id | sname |+------+--------+| 11 | 李四 |+------+--------+-- 检测with check option的效果 - 更新视图的时候,是不允许更新id列update stu_view set id=900 where id=11;ERROR 1369 (HY000): CHECK OPTION failed &#x27;j03s.stu_view&#x27; 总结面试题 DB,DBA,DBS,DBMS,RDBMS delete和truncate和drop区别 1234567delete - DMLtruncate - DDL-- 清空表truncate 表名;drop - ddl - 删除表 数据库优化 - sql优化 悲观锁和乐观锁 innodb和myisam区别 索引底层原理[innodb和myisam] - b+树 聚簇索引和非聚簇索引[辅助索引] 事务的隔离级别 脏读,不可重复读,可重复读**,幻读** DQL查询语句 - 项目 存储过程和函数的区别 视图的优势 三大范式概念 SQL按照功能分类[DCL,DTL,DML,DQL,DDL]","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"part05_视图函数存储过程","slug":"part05-视图函数存储过程","date":"2021-08-30T16:15:14.000Z","updated":"2021-08-30T16:15:36.706Z","comments":true,"path":"2021/08/31/part05-视图函数存储过程/","link":"","permalink":"http://example.com/2021/08/31/part05-%E8%A7%86%E5%9B%BE%E5%87%BD%E6%95%B0%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/","excerpt":"","text":"函数function 了解即可 - 开发中肯定用不到. 单行函数 - 字符串函数,数字函数,日期函数 多行函数(组函数) 实际上数据库是可以进行编程的. 如果使用的是mysql8.x,需要设置一下才能允许自定义函数 12341. 在my.ini文件下添加：log-bin-trust-function-creators=1 需要重启db服务器2. 在mysql客户端[终端] - set global log_bin_trust_function_creators=TRUE; 语法函数语法 - 创建 注意点: 1. 函数体中肯定有return语句 2. 只要遇到varchar类型,必须要指定参数的长度 12345678910111213-- mysql中默认的结束符号使用的是;-- 修改了默认的结束符号位$$-- 函数体中肯定会出现分号delimiter $$-- 创建函数create function 函数名([变量 数据类型(长度)]) returns 返回数据类型begin -- 函数体 return 结果;end $$delimiter ; 删除函数 12-- 删除函数drop function 函数名; 练习1 - 自定义函数 传入俩个整数,返回俩个整数的相加的结果 12345678drop function adds;delimiter //create function adds(a int,b int) returns intbegin return a + b;end //delimiter ; 调用函数 1select adds(10,30); 练习2 - 自定义函数 日期格式化 xxxx年xx月xx日 12345678910111213drop function my_date;delimiter //create function my_date(dt date) returns varchar(20)begin return date_format(dt,&#x27;%Y年%m月%d日&#x27;);end //delimiter ;-- 调用select my_date(now());select my_date(&#x27;2010-09-09&#x27;); 练习3 - while..do…end while 感受循环语句(while .. do. .. end while)以及局部变量(declare)以及变量如何重新设置(set) 1~x之间的总和 1234567891011121314151617181920drop function x_add;delimiter //create function x_add(x int) returns intbegin -- 定义俩个局部变量 declare i int default 1; declare sums int default 0; -- 循环 while i&lt;=x do -- sums加 set sums = sums+i; -- i自增 set i = i + 1; end while; return sums;end //delimiter ;select x_add(100); 练习4 - if…end if 分支语句 1~x之间的偶数奇数进行相加 1234567891011121314151617drop function ji_add;delimiter //create function ji_add(x int) returns intbegin declare i int default 1; declare sums int default 0; while i&lt;=x do if i%2!=0 then set sums = sums+i; end if; set i = i + 1; end while; return sums;end //delimiter ;select ji_add(100); 练习4 - 全局变量 1~x之间的数字之后,但是不包括5的倍数 12345678910111213141516171819202122232425262728drop function jis_add;delimiter //create function jis_add(x int) returns intbegin -- 定义一个局部变量 declare i int default 1; -- 定义一个全局变量 - mysql能够识别到的符号@ - @变量名 - 全局变量 set @sums = 0; -- 类似于java中的continue语句 + 代码块命名 -- success是一个循环语句标签名称 - 随便命名的 success:while i&lt;=x do if i%5=0 then set i = i + 1; -- 下面的代码不执行 -- 继续迭代success的循环 - continue - 继续下一轮循环,忽略本轮的循环 iterate success; end if; set @sums = @sums + i; set i = i + 1; end while; return @sums;end //delimiter ;select jis_add(100);-- 全局变量 - 函数体外部是可以访问得到的select @sums; 存储过程procedure 安装好mysql环境之后,实际上就是在本地中安装好了mysql-server - mysql的服务器端以及mysql-client - mysql的客户端 mysql-server - 右击计算机 - 管理 - 服务 - 服务和应用程序 - 右边👉 - Mysql服务 mysql-client - mysql自带的一个客户端.市面上还有很多第三方的客户端[可视化效果不错] - navicat[收费的],idea 一条sql语句的执行的流程. mysql&gt; select * from s_emp; ①当输入sql完毕之后,敲下enter键之后,客户端检测一下sql的语法是否规范.如果不规范,直接报错. ②如果sql语法是规范的,客户端会负责将这条合法的sql语法发送到mysql-server - mysql服务器端 ③mysql-server接受到来自于客户端的sql之后.mysql-server会对这条sql进行编译和解析 ④mysql-server会将解析的结果返回给mysql-client端[sql语句的执行结果] 总结: sql语句 - 语法检测 - 发送到mysql-server - 编译,解析,返回给mysql-client,将这次sql执行的结果保存 作用 为了完成一些特定的功能,提前讲sql预编译好,存储在mysql-server端系统的执行计划表中.第一次去调用存储过程的时候 会对sql进行预编译并且进行保存.第二次再调用的时候,省去了sql语句的编译的过程. 存储过程可以做到标准的组件编程[封装sql语句] 语法1234567891011-- 删除存储过程drop procedure 存储过程名;-- 创建存储过程delimiter //create procedure 存储过程名([in|out] [参数列表])begin -- 过程体end //delimiter ; 体验12345678910111213141516171819202122232425262728-- 把s_emp表中的员工的平均薪资的sql预编译好放在mysql-server端-- select avg(salary) from s_emp;-- 该条sql经常会被频繁调用/或者该条sql写法比较复杂.-- 考虑把这条sql封装到 - 存储过程drop procedure sal_pro;delimiter //create procedure sal_pro()begin -- 封装sql语句 select avg(salary) from s_emp;end //delimiter ;-- 预编译sql语句 - 创建存储过程的时候-- mysql-server会对这个存储过程中的sql语句进行编译,解析,将sql语句的编译的结果进行保存.-- 后续的每次调用的过程中.应该不会再对这条sql语句进行编译了.-- 使用call关键字来调用,不需要编译-- 第一次调用,call sal_pro();-- 第二次调用-- mysql-server不需要对这个存储过程中的sql语句再去进行编译了[省略了],直接返回之前保存的结果.call sal_pro(); 输入和输出 in out inout in输入 创建存储过程的时候,参数列表.确认这个参数到底是用来接受参数的,还是用来返回存储过程的结果的. 1234567891011121314151617181920drop procedure in_pro;delimiter //create procedure in_pro(in a int)begin -- System.out.println(a); select a; -- 对a重新赋值 set a = 10; select a;end //delimiter ;-- 调用-- 直接传入一个字面量call in_pro(20);-- 测试一下使用全局变量进行传参set @i = 20;call in_pro(@i); out输出 如果参数是使用out来修饰的,它是不能够用来保存接受到的数据的 12345678910111213141516171819202122232425262728293031drop procedure out_pro;delimiter //create procedure out_pro(out a int)begin -- a是用out修饰的,所以为null select a; -- a是out - 存储过程返回出去的数据 set a = 10;end //delimiter ;-- 报错,如果参数是out修饰的,那么是不能够直接传入一个字面量的-- call out_pro(100);-- 如果是out修饰的,调用存储过程,只能传入一个全局变量set @i=100;call out_pro(@i);+------+| a |+------+| NULL |+------+里面的a是没有绑定到你的100 - 原因就是因为a是使用out修饰的.不能接受参数select @i;+------+| @i |+------+| 10 |+------+ 练习 - 封装单个结果集 根据员工的id来返回员工的名称,薪资 - sql语句 - 封装 123456789101112131415drop procedure emp_pro;delimiter //create procedure emp_pro(in eid int(7),out fname varchar(25),out sal float(11,2))begin select first_name into fname from s_emp where id=eid; select salary into sal from s_emp where id = eid;end //delimiter ; -- 如果参数是out修饰的,必须只能传入全局变量[作用就是来保存存储过程一些执行结果的值]call emp_pro(1,@fname,@sal); select @fname;select @sal; 第二种写法 - 针对的是单个结果集的写法 1234567891011121314drop procedure emp_pro;delimiter //create procedure emp_pro(in eid int(7),out fname varchar(25),out sal float(11,2))begin select first_name,salary into fname,sal from s_emp where id=eid;end //delimiter ; -- 如果参数是out修饰的,必须只能传入全局变量[作用就是来保存存储过程一些执行结果的值]call emp_pro(1,@fname,@sal); select @fname;select @sal; 练习 - 封装的是多行结果集 找出大于某个id的first_name和salary - 结果可能是多行的 现在已经被弃用的游标 - 性能很低下. 需要定义第三方表来存储我们的多行结果集 123456781. 根据具体的查询的业务来构建第三方表 业务中最终查询出来的数据正好都在s_emp表中. -- 仅仅保留结构,但是不保留结果create table s_emp_pro select first_name,salary from s_emp where 1=2; 2. 比如分组统计,查询出来的数据不在某个表中存在 - 一定要根据具体的查询出来的数据 - 手动构建一张表 123456789101112drop procedure emp_pro;delimiter //create procedure emp_pro(in eid int(7))begin -- insert into 表名 select 语句; insert into s_emp_pro(first_name,salary) select first_name,salary from s_emp where id &gt;= eid;end //delimiter ; -- 如果参数是out修饰的,必须只能传入全局变量[作用就是来保存存储过程一些执行结果的值]call emp_pro(20); 练习 - 带事务123456789101112131415161718192021222324252627282930-- 转账功能,同时成功,同时失败.drop procedure transfer_pro;delimiter //create procedure transfer_pro(in sid int(7),in tid int(7),in money double(7,2),in st int(7))begin -- 定义一个局部变量 - 展示信息 declare msg varchar(20) default &#x27;0&#x27;; -- 手动开启一个事务 start transaction; update account set balance = balance-money where id = sid; -- 模拟一个异常 if st=1 then set msg = &#x27;sorry,转账失败了!&#x27;; rollback; else update account set balance = balance+money where id = tid; -- 手动提交一个事务 set msg = &#x27;good,转账成功了!&#x27;; commit; end if; select msg;end //delimiter ;-- st=1,进入到异常块的.call transfer_pro(1,2,1000.0,1);-- st=2,正常执行转账的业务功能call transfer_pro(1,2,1000.0,2); 语句使用条件分支语句 if .. then .. elseif .. then ..elseif.. then … else.. end if; 123456789101112131415161718drop procedure if_pro;delimiter //create procedure if_pro(in a int)begin declare msg varchar(20) default &#x27;&#x27;; if a&gt;=90 then set msg = &#x27;优秀&#x27;; elseif a&gt;=80 then set msg = &#x27;良好&#x27;; else set msg = &#x27;及格&#x27;; end if; select msg;end //delimiter ;call if_pro(85); case .. when .. then..else… end case 12345678910111213141516171819drop procedure case_pro;delimiter //create procedure case_pro(in a int)begin declare msg varchar(20) default &#x27;&#x27;; case a when 1 then set msg=&#x27;1&#x27;; when 2 then set msg = &#x27;2&#x27;; else set msg = &#x27;3&#x27;; end case; select msg;end //delimiter ; call case_pro(2); 循环语句 while .. do .. end while 1234567891011121314151617181920drop procedure while_pro;delimiter //create procedure while_pro(in x int,out result int)begin declare i int default 1; declare sums int default 0; while i&lt;=x do set sums = sums + i; set i = i+1; end while; -- result修饰成out =return result set result = sums;end //delimiter ; -- out修饰的,只能传入全局变量call while_pro(100,@result); select @result; loop … end loop 类似于while(true) 12345678910111213141516171819202122-- 求1~x结束drop procedure loop_pro;delimiter //create procedure loop_pro(in x int,out result int)begin declare i int default 1; set result=0; success:loop if i&gt;x then -- 打破循环 -- iterate success; -- conintue leave success; end if; set result = result + i; set i = i + 1; end loop;end //delimiter ;call loop_pro(100,@result);select @result; repeat .. until .. end repeat 类似于java-&gt; do..while 1234567891011121314drop procedure repeat_pro;delimiter //create procedure repeat_pro(in x int)begin repeat set x = x + 1; select x; until x&gt;0 end repeat;end //delimiter ; call repeat_pro(-1); 总结函数和存储过程的区别 定义函数的时候,必须指定returns 返回类型.定义存储过程的时候不需要使用returns 返回类型 函数体中必须要有return语句+返回结果,但是存储过程可以没有return语句 函数的调用用select关键字,存储过程调用使用call关键字 存储过程更加侧重于封装以及预编译sql语句,提高sql语句的复用性. 存储过程中是使用in来接受参数,out来返回结果. 触发器 在mysql中,当我们执行一些操作的时候[比如dml操作 - 触发器能够触发的事件],一旦事件被触发,就会执行一段程序 触发器的本质上就是一个特殊的存储过程 分类 after触发器 - 在触发条件之后执行 before触发器 - 在触发条件之前执行 语法123456789101112-- 删除触发器drop trigger 触发器名称;delimiter //create trigger 触发器名称触发时机(after,before) 触发事件(insert,delete,update) on 触发器事件所在的表名for each row-- 触发器事件程序begin end //delimiter ; 体验 删除account表中的任意一条数据的时候[触发事件],并且把这条数据放入到备份表中acc_copy 123-- 创建备份表create table acc_copy select * from account where 1=2; 12345678910111213141516171819202122232425262728293031323334drop trigger acc_tri;delimiter //create trigger acc_triafter delete on accountfor each rowbegin -- old.列名 - 刚刚删除的那条数据 insert into acc_copy values(old.id,old.name,old.balance);end //delimiter ;-- 触发器是遇到触发的事件才会执行的.不是我们手动去调用的.delete from account where id=1;mysql&gt; select * from account; +----+------+----------+ | id | name | balance | +----+------+----------+ | 2 | tom | 10000.00 | | 3 | jack | 9000.00 | | 4 | ss | 9000.00 | | 5 | ss2 | 9000.00 | +----+------+----------+ 4 rows in set (0.00 sec) mysql&gt; select * from acc_copy; +----+-------+---------+ | id | name | balance | +----+-------+---------+ | 1 | admin | 8000.00 | +----+-------+---------+ 1 row in set (0.00 sec) 如果表和表之间存在约束关系,比如1:N,无论是在drop或者delete的时候.必须要先删除多的一方,然后再删除一的一方 必须先把一的一方的所有子记录全部删除完毕,才能删除一的一方 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455drop table tri_cus;drop table tri_ord;create table tri_cus( id int(7) primary key, name varchar(20));insert into tri_cus values(1,&#x27;admin&#x27;);insert into tri_cus values(2,&#x27;tom&#x27;);create table tri_ord( id int(7) primary key, ord_no varchar(20), cus_id int(7), foreign key(cus_id) references tri_cus(id));insert into tri_ord values(1,&#x27;1001&#x27;,1);insert into tri_ord values(2,&#x27;1002&#x27;,1);insert into tri_ord values(3,&#x27;1003&#x27;,2);-- 外键约束存在的原因mysql&gt; delete from tri_cus where id=1;ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`j03s`.`tri_ord`, CONSTRAINT `tri_ord_ibfk_1` FOREIGN KEY (`cus_id`) REFERENCES `tri_cus` (`id`))-- 删除客户之前,应该先删除订单drop trigger cus_tri;delimiter //create trigger cus_tribefore delete on tri_cusfor each rowbegin -- 先去删除这个客户的子记录 delete from tri_ord where cus_id=old.id;end //delimiter ;mysql&gt; delete from tri_cus where id=1;mysql&gt; select * from tri_cus;+----+------+| id | name |+----+------+| 2 | tom |+----+------+1 row in set (0.00 sec)mysql&gt; select * from tri_ord;+----+--------+--------+| id | ord_no | cus_id |+----+--------+--------+| 3 | 1003 | 2 |+----+--------+--------+1 row in set (0.00 sec) oracle数据库中还会多一个自检约束[自定义检测],check约束 但是Mysql中是不存在check约束. 12345678910111213141516171819202122232425262728293031323334-- oracle - 使用check约束create table ckt( id int(7) primary key, age int(1) check(age&gt;0 and age&lt;100))-- 插入数据的时候,age插入的值只能在check约束自定义的规则之内,否则插入失败.-- 面试题 - mysql中如何实现oracle数据库中的check自检约束的功能.-- 在执行insert的时候,对某些数据进行进一步的校验 - 触发器create table ckt( id int(7) primary key, age int(1));drop trigger ckt_tri;delimiter //create trigger ckt_tribefore insert on cktfor each rowbegin -- 对新插入的数据进行一个校验 -- old.列还是使用new.old列 - 看该列在表中有没有. if new.age&lt;18 then signal sqlstate &#x27;HY000&#x27; set message_text=&#x27;age不合法&#x27;; end if;end //delimiter ;insert into ckt values(1,20);insert into ckt values(2,17);mysql&gt; insert into ckt values(2,17);ERROR 1644 (HY000): age不合法 数据库优化 分表/分库 主从复制 sql优化操作 select查询列不要出现 * 12345尽量还是select 具体的列名称,select * 效率低于select 具体的列 - &quot;争议&quot;为了数据的安全. 不鼓励使用order by语句 12345mysql中的order by性能是及其低下,业务中如果遇到排序.建议是先把数据取出来放入到java内存中 - 集合中.再通过java代码的集合排序的各种方式来进行对数据的排序. 查询唯一的非索引列的值的时候,配合limit 1语句,避免全表扫描. 索引优化 sql优化 - 至少背10条 MySQL如何执行区分大小写的字符串比较？ 12select * from s_emp where binary first_name = &#x27;Carmen&#x27;; 应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎进行全表扫描。 对查询进行优化，应尽量避免全表扫描，首先应考虑在where及order by涉及的列上建立索引。 应尽量避免在where子句中对字段进行not null值判断，否则将导致引擎放弃使用索引而进行全表扫描 尽量避免在where子句中使用or来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如： ​ select id from t where num=10 or num=20​ 可以这样查询：​ select id from t where num=10​ union​ select id from t where num=20 下面的查询也将导致全表扫描：(不能前置百分号) select id from t where name like ‘c%’;//走索引. not in也要慎用，否则会导致全表扫描，如： 123对于连续的数值，能用between就不要用in了：select id from t where num between 1 and 3 尽量避免在where子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：select id from t where num/2=100 123应改为:select id from t where num=100*2 应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如： 不要在where子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。 在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。 遵循最左原则. 很多时候用exists代替in[查询性能很低]是一个好的选择： ​ select num from a where num in(select num from b)​ 用下面的语句替换：​ select num from a where exists(select 1 from b where num=a.num) 并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用 - 索引有效 - 数据控制30%; 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert及update的效率，因为insert或update时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。 应尽可能的避免更新 clustered [聚簇]索引数据列，因为clustered索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新clustered索引数据列，那么需要考虑是否应将该索引建为clustered索引。 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。 尽可能的使用varchar/nvarchar代替char/nchar，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。 任何地方都不要使用select * from t，用具体的字段列表代替“*”，不要返回用不到的任何字段。 避免频繁创建和删除临时表，以减少系统表资源的消耗。 12临时表和表变量 - 推荐表变量来代替临时表的用法. 临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。 在新建临时表时，如果一次性插入数据量很大，那么可以使用select into代替create table，避免造成大量log，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。 如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先truncate table，然后drop table，这样可以避免系统表的较长时间锁定。 尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。 尽量避免大事务操作，提高系统并发能力。","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"part04_mysql_索引专题_B+树","slug":"part04-mysql-索引专题-B-树","date":"2021-08-30T16:14:01.000Z","updated":"2021-08-30T16:14:40.238Z","comments":true,"path":"2021/08/31/part04-mysql-索引专题-B-树/","link":"","permalink":"http://example.com/2021/08/31/part04-mysql-%E7%B4%A2%E5%BC%95%E4%B8%93%E9%A2%98-B-%E6%A0%91/","excerpt":"","text":"索引底层原理 解释底层的索引的数据结构 - b+树 B+树 InnoDB 存储引擎中的 B+ 树索引。要介绍 B+ 树索引，就不得不提二叉查找树， 平衡二叉树和 B 树这三种数据结构。B+ 树就是从他们仨演化来的。 索引文件和数据文件 - innodb中 - 合二为一的 - 只有1个文件 索引文件和数据文件 - myisam中 - 分开独立的 - 俩个文件 二叉树 节点(每个圆圈圈)中存储了键（key - 主键索引列）和数据（data - 每一个行记录）。键对应 user 表中的 id，数据对应 user 表中的行数据。 二叉查找树的特点就是任何节点的左子节点的键值都小于当前节点的键值，右子节点的键值都大于当前节点的键值。顶端的节点我们称为根节点，没有子节点的节点我们称之为叶节点。 如果我们需要查找 id=12 的用户信息，利用我们创建的二叉查找树索引，查找流程如下： id=12先和根节点[只有一个]key=10,发现id=12&gt;id=10 - 顺利向着根节点的右边去匹配 id=12和非叶节点id=13的进行匹配,顺利执行id=13的左边 id=12和id=12比较 - 两者是相同的.由于每个节点除了保存key还保存了value[行记录 - 行真实的行数据] 直接将这个节点的value直接取出来了. 总结 - 总共匹配了3次就可以顺利找到我们的数据. 如果没有创建二叉树索引.查找id=12,必然会进行全表扫描.从表的第一行向下找.最好的状态也得找6次 平衡二叉树二叉树带来的弊端 二叉查找树的特点就是任何节点的左子节点的键值都小于当前节点的键值，右子节点的键值都大于当前节点的键值 二叉树在极端的场景下有可能成为一个链表的结构[链表的查询效率很低很低的.] 查找id=12,”链表结构”,只能从链表的头节点开始查找,最佳状态也得寻找找了5次. AVL为了解决这个问题[防止二叉树变成了链表结构导致查询效率依然低下]，我们需要保证二叉查找树一直保持平衡，就需要用到平衡二叉树. 平衡二叉树又称 AVL 树，在满足二叉查找树特性的基础上，要求每个节点的左右子树的高度差不能超过 1。 下面是平衡二叉树和非平衡二叉树的对比： 只要找到任何一个节点的左右子树高度差的绝对值大于1 - 非平衡二叉树 123节点45 - 左子树高度 = 左边的子节点的个数 = 2 - 右子树高度 = 右边没有节点 = 0 - |高度差|=2&gt;1 B树 平衡二叉树暴露出来了一些缺点: 每个节点仅仅保存一个key-value键值对[每个节点可保存的键值对数据太少了].每次进行查询的时候,实际上都是需要从磁盘中读取数据的. 那我们每查找一次数据就需要从磁盘中读取一个节点，也就是我们说的一个磁盘块 由于每个节点可保存的数据不多,仅仅保存了一个key-value.在查找数据的过程中,它就不断去和磁盘进行IO交互. 导致平衡二叉树的节点比较多.也就导致了平衡二叉树的高度比较高 - 导致比较的次数比较多 - 频繁和IO进行交互 - 查询效率低下. 为了解决平衡二叉树的高度太高问题.B树登场了. B树特点 根节点[第一页] - 永驻内存. 每个节点可以保存多个key-value - 导致子节点也会增多.B树又矮又胖. 没有子节点的节点 - 叶节点,有子节点的节点 - 非叶节点 B树的m阶 - m值就是看它最大的子节点的个数 - 3 , 下面的图代表的就是3阶b树. 如果有10亿条数据,只需要和磁盘进行交互2次.把磁盘块中的一页数据[16kb]全部加载到内存中. 页page的概念 - 那我们每查找一次数据就需要从磁盘中读取一个节点，也就是我们说的一个磁盘块 读取的单位是 - 页 - 1页的磁盘块的数据大小是16kb,每个节点可以更多的key-value 页与也之间是一个链表的结构 查找id=28的数据 - 磁盘交互了3次 ①id=28到第一页中进行匹配,发现id=28在17和35之间,获取p2指针.p2指向到页3 ②定位到页3,发现id=28在26~30之间,继续拿到p2指针,p2指向的是页8 ③定位到页8,顺利匹配查找到id=28这条数据 B+树 是Innodb和myisam存储引擎中索引底层的数据结构 - B+树 B树中每个节点中不仅仅存储key[索引列值,主键列值],还存储了数据.因为数据库中的页的大小是固定的[Innodb默认是16kb], 导致每个节点的存储资源有点浪费了. B+树和B树的重要区别就是 B+树中非叶节点,仅仅保存了key值[索引列,主键列值],没有保存数据.每个非叶节点可以保存更多的key. B+树中索引的所有的数据都放在了叶子节点中,而且是按照顺序排列的. 12345678910111213141516171819202122232425262728-- 演示一下顺序drop table tb;create table tb( -- 主键索引列 id int(7) primary key, name varchar(29));insert into tb values(1,&#x27;admin&#x27;);insert into tb values(3,&#x27;tom&#x27;); mysql&gt; select * from tb;+----+-------+| id | name |+----+-------+| 1 | admin || 3 | tom |+----+-------+ -- 再插入一条数据,但是id=2,介于1,3之间insert into tb values(2,&#x27;jack&#x27;);-- 出来的效果居然是排好序的.实际上是插入的时候,自动根据主键列索引排序后插入到合适的位置.+----+-------+| id | name |+----+-------+| 1 | admin || 2 | jack || 3 | tom |+----+-------+ **页与页之间是双向链表结构,**叶节点中的每个数据节点单向链表 下面这个图展示的是Innodb中的索引的结构.并不是Myisam中索引的结构 以下图示本质上就是聚簇索引的方式 - key - 主键列 聚簇索引和非聚簇索引在上节介绍 B+ 树索引的时候，我们提到了图中的索引其实是聚集索引的实现方式。 那什么是聚集索引呢？在 MySQL 中，B+ 树索引按照存储方式的不同分为聚集索引和非聚集索引。 这里我们着重介绍 InnoDB 中的聚集索引和非聚集索引： 聚集索引（聚簇索引）：以 InnoDB 作为存储引擎的表，表中的数据都会有一个主键，即使你不创建主键，系统也会帮你创建一个隐式的主键。 这是因为 InnoDB 是把数据存放在 B+ 树中的，而 B+ 树的键值就是主键，在 B+ 树的叶子节点中，存储了表中所有的数据。 这种以主键作为 B+ 树索引的键值而构建的 B+ 树索引，我们称之为聚集索引。 非聚集索引（非聚簇索引）：以主键以外的列值作为键值构建的 B+ 树索引，我们称之为非聚集索引。 非聚集索引与聚集索引的区别在于非聚集索引的叶子节点不存储表中的数据，而是存储该列对应的主键，想要查找数据我们还需要根据主键再去聚集索引中进行查找，这个再根据聚集索引查找数据的过程，我们称为回表。 聚簇索引存储和查找 12345select * from xx where id&gt;=18 and id&lt;41;-- 聚簇索引的查找方式 - 根据主键列id列进行查找的流程1. 先从页1中看id的区间,定位到p2-&gt;页32. 定位到页3,定位到p1-&gt;页8[叶节点-单向链表 - 查找必须从头节点开始找]3. 依次按照链表的顺序一致找到id开始&lt;41的这个节点.满足条件的叶节点中的数据全部查出来 [叶节点中保存了真实的数据] 非聚簇索引存储和查找 B+树的结构 表结构:id age name id - 主键列 - 默认是聚簇索引列 - 主键列 name - 非聚簇索引列 - 索引列 - 辅助索引 非聚簇索引 - 非主键列索引 - name列创建了索引 - 辅助索引. 结构: 根节点 - 一页数据 - 非聚簇索引列值 - name 非叶节点 - 非聚簇索引列值 页节点存储的东西 - name索引列以及该列对应的主键列值. 它和聚簇索引最大的区别是页节点中没有存储最终的数据.而是存储的是键值对x-y x就是非聚簇索引列值,y是对应的主键列值. 非聚簇索引的查找方式: 1select * from xxx where name=&#x27;Bob&#x27;; 按照B+树的查找流程 - 确认name=’Bob’的具体位置 由于非聚簇索引的结构中叶节点仅仅保存了name-主键列值 先根据name=’Bob’这个条件找到对应的主键列值id=15 要进行”回表操作” 继续拿着主键列id=15到索引的结构中继续查找一次 - “一次回表查找”. id也是聚簇索引 - B+树的结构 - 叶子节点中存储的就是数据. 根据聚簇索引列的查找方式 - id=15的叶节点 - 拿到里面的数据 非聚簇索引列查找一定会回表????? 未必 - 因为非叶节点中存储的就是索引列值. 查询**: select name from xx where name=’Blob’;** 不需要回表了.这条语句查询的结果name已经在非聚簇索引的非叶节点中保存了. 回表 根据一个非聚簇索引列查找 - 优先先到非聚簇索引的B+树中找到该列对应的主键列值[聚簇索引列值] 再拿着这个聚簇索引列的值再去到聚簇索引列的B+树中再查找一次 myisam中的索引特点 innodb中索引和数据合并到一个文件中 myisam中索引和数据是单独的俩个文件,分别是索引文件和数据文件. myisam中采用的是”非聚集的方式” 无论是聚簇索引还是非聚簇索引,查找方式是一样. 采用的也是B+树的结构**.只是叶节点中存储的是索引的列值以及该对应的行记录的地址.** 需要再根据行记录地址到表中进行定位[回表] 123456主键列 - key是不允许重复的非主键列 - key是允许重复的.select * from xxx where id=5;1. 先到B+树找到找到id=5对应的节点 - 取出里面的行记录的物理地址0x6a2. 回表 - 直接根据行记录的物理地址直接定位到具体的一行.","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"part04_mysql_专题片_索引高级","slug":"part04-mysql-专题片-索引高级","date":"2021-08-30T16:13:06.000Z","updated":"2021-08-30T16:13:29.878Z","comments":true,"path":"2021/08/31/part04-mysql-专题片-索引高级/","link":"","permalink":"http://example.com/2021/08/31/part04-mysql-%E4%B8%93%E9%A2%98%E7%89%87-%E7%B4%A2%E5%BC%95%E9%AB%98%E7%BA%A7/","excerpt":"","text":"MySql索引B+树🌲 InnoDB 存储引擎中的 B+ 树索引。要介绍 B+ 树索引，就不得不提二叉查找树， 平衡二叉树和 B 树这三种数据结构。B+ 树就是从他们仨演化来的。 索引文件和数据文件 - innodb中 - 合二为一的. 索引文件和数据文件 - myisam中 - 分开独立的. 二叉树查找 从图中可以看到，我们为 user 表（用户信息表）建立了一个二叉查找树的索引。 图中的圆为二叉查找树的节点，节点中存储了键（key）和数据（data）。键对应 user 表中的 id，数据对应 user 表中的行数据。 二叉查找树的特点就是任何节点的左子节点的键值都小于当前节点的键值，右子节点的键值都大于当前节点的键值。顶端的节点我们称为根节点，没有子节点的节点我们称之为叶节点。 二叉树查找流程: 如果我们需要查找 id=12 的用户信息，利用我们创建的二叉查找树索引，查找流程如下： 将根节点作为当前节点，把 12 与当前节点的键值 10 比较，12 大于 10，接下来我们把当前节点&gt;的右子节点作为当前节点。 继续把 12 和当前节点的键值 13 比较，发现 12 小于 13，把当前节点的左子节点作为当前节点。 把 12 和当前节点的键值 12 对比，12 等于 12，满足条件，我们从当前节点中取出 data，即 id=12，name=xm。 利用二叉查找树我们只需要 3 次即可找到匹配的数据。如果在表中一条条的查找的话，我们需要 6 次才能找到。 平衡二叉树上面我们讲解了利用二叉查找树可以快速的找到数据。但是，如果上面的二叉查找树是这样的构造： 这个时候可以看到我们的二叉查找树变成了一个链表。如果我们需要查找 id=17 的用户信息，我们需要查找 7 次，也就相当于全表扫描了。 导致这个现象的原因其实是二叉查找树变得不平衡了，也就是高度太高了，从而导致查找效率的不稳定。 为了解决这个问题，我们需要保证二叉查找树一直保持平衡，就需要用到平衡二叉树了。 平衡二叉树又称 AVL 树，在满足二叉查找树特性的基础上，要求每个节点的左右子树的高度差不能超过 1。 下面是平衡二叉树和非平衡二叉树的对比： 左边二叉树的节点45左子树高度2，右子树高度0，左右子树高度差为2-0=2 在图二右边的AVL树上： 节点50的左子树高度为3，右子树高度为2，BF= 3-2 = 1； 节点45的左子树高度为2，右子树高度为1，BF= 2-1 = 1； 节点46的左子树高度为0，右子树高度为0，BF= 0-0 = 0； 节点65的左子树高度为0，右子树高度为1，BF= 0-1 = -1； 对于平衡二叉树，BF的取值范围为[-1,1]。如果发现某个节点的BF值不在此范围，则需要对树进行调整。 B树🌲因为内存的易失性。一般情况下，我们都会选择将 user 表中的数据和索引存储在磁盘这种外围设备中。 但是和内存相比，从磁盘中读取数据的速度会慢上百倍千倍甚至万倍，所以，我们应当尽量减少从磁盘中读取数据的次数。另外，从磁盘中读取数据时，都是按照磁盘块来读取的，并不是一条一条的读。 如果我们能把尽量多的数据放进磁盘块中，那一次磁盘读取操作就会读取更多数据，那我们查找数据的时间也会大幅度降低。如果我们用树这种数据结构作为索引的数据结构，那我们每查找一次数据就需要从磁盘中读取一个节点，也就是我们说的一个磁盘块。我们都知道平衡二叉树可是每个节点只存储一个键值和数据的。那说明什么？说明每个磁盘块仅仅存储一个键值和数据！那如果我们要存储海量的数据呢？ 可以想象到二叉树的节点将会非常多，高度也会极其高，我们查找数据时也会进行很多次磁盘 IO，我们查找数据的效率将会极低！ 为了解决平衡二叉树的这个弊端，我们应该寻找一种单个节点可以存储多个键值和数据的平衡树。也就是我们接下来要说的 B 树 B 树（Balance Tree）即为平衡树的意思，下图即是一棵 B 树 图中的 p 节点为指向子节点的指针，二叉查找树和平衡二叉树其实也有，因为图的美观性，被省略了。 图中的每个节点称为页，页就是我们上面说的磁盘块，在 MySQL 中数据读取的基本单位都是页，所以我们这里叫做页更符合 MySQL 中索引的底层数据结构。 从上图可以看出，B 树相对于平衡二叉树，每个节点存储了更多的键值（key）和数据（data），并且每个节点拥有更多的子节点，子节点的个数一般称为阶，上述图中的 B 树为 3 阶 B 树，高度也会很低。 基于这个特性，B 树查找数据读取磁盘的次数将会很少，数据的查找效率也会比平衡二叉树高很多。 假如我们要查找 id=28 的用户信息，那么我们在上图 B 树中查找的流程如下： 先找到根节点也就是页 1，判断 28 在键值 17 和 35 之间，那么我们根据页 1 中的指针 p2 找到页 3。 将 28 和页 3 中的键值相比较，28 在 26 和 30 之间，我们根据页 3 中的指针 p2 找到页 8。 将 28 和页 8 中的键值相比较，发现有匹配的键值 28，键值 28 对应的用户信息为（28，bv）。 B+树🌲B+ 树是对 B 树的进一步优化。让我们先来看下 B+ 树的结构图： B+ 树和 B 树有什么不同: B+ 树非叶子节点上是不存储数据的，仅存储键值，而 B 树节点中不仅存储键值，也会存储数据。 之所以这么做是因为在数据库中页的大小是固定的，InnoDB 中页的默认大小是 16KB。 如果不存储数据，那么就会存储更多的键值，相应的树的阶数（节点的子节点树）就会更大，树就会更矮更胖，如此一来我们查找数据进行磁盘的 IO 次数又会再次减少，数据查询的效率也会更快。 一般根节点是常驻内存的，所以一般我们查找 10 亿数据，只需要 2 次磁盘 IO。 因为 B+ 树索引的所有数据均存储在叶子节点，而且数据是按照顺序排列的。 那么 B+ 树使得范围查找，排序查找，分组查找以及去重查找变得异常简单。而 B 树因为数据分散在各个节点，要实现这一点是很不容易的。有心的读者可能还发现上图 B+ 树中各个页之间是通过双向链表连接的，叶子节点中的数据是通过单向链表连接的。其实上面的 B 树我们也可以对各个节点加上链表。这些不是它们之前的区别，是因为在 MySQL 的 InnoDB 存储引擎中，索引就是这样存储的。 也就是说上图中的 B+ 树索引就是 InnoDB 中 B+ 树索引真正的实现方式，准确的说应该是聚集索引（聚集索引和非聚集索引下面会讲到）。通过上图可以看到，在 InnoDB 中，我们通过数据页之间通过双向链表连接以及叶子节点中数据之间通过单向链表连接的方式可以找到表中所有的数据。 MyISAM 中的 B+ 树索引实现与 InnoDB 中的略有不同。在 MyISAM 中，B+ 树索引的叶子节点并不存储数据，而是存储数据的文件地址。 聚簇索引和非聚簇索引在上节介绍 B+ 树索引的时候，我们提到了图中的索引其实是聚集索引的实现方式。 那什么是聚集索引呢？在 MySQL 中，B+ 树索引按照存储方式的不同分为聚集索引和非聚集索引。 这里我们着重介绍 InnoDB 中的聚集索引和非聚集索引： 聚集索引（聚簇索引）：以 InnoDB 作为存储引擎的表，表中的数据都会有一个主键，即使你不创建主键，系统也会帮你创建一个隐式的主键。 这是因为 InnoDB 是把数据存放在 B+ 树中的，而 B+ 树的键值就是主键，在 B+ 树的叶子节点中，存储了表中所有的数据。 这种以主键作为 B+ 树索引的键值而构建的 B+ 树索引，我们称之为聚集索引。 非聚集索引（非聚簇索引）：以主键以外的列值作为键值构建的 B+ 树索引，我们称之为非聚集索引。 非聚集索引与聚集索引的区别在于非聚集索引的叶子节点不存储表中的数据，而是存储该列对应的主键，想要查找数据我们还需要根据主键再去聚集索引中进行查找，这个再根据聚集索引查找数据的过程，我们称为回表。 聚簇索引查找流程 select * from user where id&gt;=18 and id &lt;40 其中 id 为主键，具体的查找过程如下： ①一般根节点都是常驻内存的，也就是说页 1 已经在内存中了，此时不需要到磁盘中读取数据，直接从内存中读取即可。 从内存中读取到页 1，要查找这个 id&gt;=18 and id &lt;40 或者范围值，我们首先需要找到 id=18 的键值。 从页 1 中我们可以找到键值 18，此时我们需要根据指针 p2，定位到页 3。 ②要从页 3 中查找数据，我们就需要拿着 p2 指针去磁盘中进行读取页 3。 从磁盘中读取页 3 后将页 3 放入内存中，然后进行查找，我们可以找到键值 18，然后再拿到页 3 中的指针 p1，定位到页 8。 ③同样的页 8 页不在内存中，我们需要再去磁盘中将页 8 读取到内存中。 将页 8 读取到内存中后。因为页中的数据是链表进行连接的，而且键值是按照顺序存放的，此时可以根据二分查找法定位到键值 18。 此时因为已经到数据页了，此时我们已经找到一条满足条件的数据了，就是键值 18 对应的数据。 因为是范围查找，而且此时所有的数据又都存在叶子节点，并且是有序排列的，那么我们就可以对页 8 中的键值依次进行遍历查找并匹配满足条件的数据。 我们可以一直找到键值为 22 的数据，然后页 8 中就没有数据了，此时我们需要拿着页 8 中的 p 指针去读取页 9 中的数据。 ④因为页 9 不在内存中，就又会加载页 9 到内存中，并通过和页 8 中一样的方式进行数据的查找，直到将页 12 加载到内存中，发现 41 大于 40，此时不满足条件。那么查找到此终止。 最终我们找到满足条件的所有数据，总共 12 条记录： (18,kl), (19,kl), (22,hj), (24,io), (25,vg) , (29,jk), (31,jk) , (33,rt) , (34,ty) , (35,yu) , (37,rt) , (39,rt) 。 下面看下具体的查找流程图: 非聚集索引查找数据 在叶子节点中，不再存储所有的数据了，存储的是键值和主键. 总结聚簇和非聚簇select * from xxx where name =”Jim”; name是非关键列,但是name同时也是索引列 - 非聚簇索引. 非叶节点 - 索引列对应的值. 叶节点 - 键值对(name索引值 - 主键值) 从图一中可以通过非聚簇索引列的值 -&gt; 确定到该索引列值对应的主键值id. 根据图一找到的主键id,然后进行一次回表操作.再继续按照聚簇索引的搜索方式来确定到具体的行记录 MyISAM - 索引***索引文件和数据文件是分开的.***B+树结构. 在 MyISAM 中，聚集索引和非聚集索引的叶子节点都会存储数据的文件地址。","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"part04_mysql_专题片_索引基础","slug":"part04-mysql-专题片-索引基础","date":"2021-08-30T16:11:40.000Z","updated":"2021-08-30T16:12:09.607Z","comments":true,"path":"2021/08/31/part04-mysql-专题片-索引基础/","link":"","permalink":"http://example.com/2021/08/31/part04-mysql-%E4%B8%93%E9%A2%98%E7%89%87-%E7%B4%A2%E5%BC%95%E5%9F%BA%E7%A1%80/","excerpt":"","text":"数据字典 用户表 - 自定义的表 - 存储用户的数据 系统表 - 数据字典 - 存储的是用户表的元信息. 用户表仅仅可能只是系统表中的一个字段存在着而已. 类似于java.lang.Class,所有的类都是属于Class的对象 - 类是用来描述对象.我们是可以通过Class对象的API来获取类的信息. Class用来描述类的类. demo tbl_comment 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849use information_schema;show tables;发现里面有一个系统表 - TABLE_CONSTRAINTS - 数据字典 - 保存的是所有的表的约束信息.desc table_constraints;+--------------------+--------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+--------------------+--------------+------+-----+---------+-------+| CONSTRAINT_CATALOG | varchar(512) | NO | | | || CONSTRAINT_SCHEMA | varchar(64) | NO | | | || CONSTRAINT_NAME | varchar(64) | NO | | | || TABLE_SCHEMA | varchar(64) | NO | | | || TABLE_NAME | varchar(64) | NO | | | || CONSTRAINT_TYPE | varchar(64) | NO | | | |+--------------------+--------------+------+-----+---------+-------+6 rows in set (0.01 sec)table_name,constraint_name,constraint_type表名 约束名称 约束类型--1. 查什么--2. 到哪里查-- 查看tbl_comment表中以上三个字段mysql&gt; select table_name,constraint_name,constraint_type from table_constraints where table_name=&#x27;tbl_comment&#x27;;+-------------+-------------------------+-----------------+| table_name | constraint_name | constraint_type |+-------------+-------------------------+-----------------+| tbl_comment | PRIMARY | PRIMARY KEY || tbl_comment | tbl_comment_id_fk | FOREIGN KEY || tbl_comment | tbl_comment_user_id_fk | FOREIGN KEY || tbl_comment | tbl_comment_video_id_fk | FOREIGN KEY |+-------------+-------------------------+-----------------+-- 查看tbl_comment表中的列的名称[COLUMN_NAME],列的数据类型[COLUMN_TYPE]mysql&gt; select column_name,column_type from columns where table_name=&#x27;tbl_comment&#x27;;+-------------+-------------+| column_name | column_type |+-------------+-------------+| id | int(7) || user_id | int(7) || video_id | int(7) || content | varchar(50) || comment_id | int(7) |+-------------+-------------+5 rows in set (0.00 sec) 索引基础篇简介:mysql中不同的存储引擎的索引的实现方式是不同的. 索引最大的好处就是会提高查询效率,但是索引也是占内存空间,索引也是需要进行维护[更新 - 消耗时间]的.并不是索引建立的越多越好. **5.7及其以后默认的存储引擎就是innodb,**之前默认采用的是myisam myisam和innodb有何区别 innodb支持事务,myisam不支持事务 [DTL命令是不支持的] myisam支持全文索引.但是innodb不支持全文索引. innode可以支持到行锁.myisam支持到表锁. 行锁的性能高于表锁. innodb支持b+树索引 - 笔试索引的底层原理 = B+树相关 innodb支持外键约束的. 索引的底层 - 见高级篇 MyISAM 有单独的索引文件的,索引过多 - 索引文件变大(占空间的) 叶子节点中保存的是索引+物理行地址的 索引的本质:键值对(索引列值,物理行地址) 先判断查询是否走了索引,先查询索引文件,找到物理行地址 再由地址直接定位到数据表. 索引是单独的文件 InnoDB 索引文件不是一个单独的文件,它和数据文件是合二为一的. 索引和数据-&gt;数据文件中 -&gt; 聚簇索引 索引算法 B+Tree(索引数据结构) 聚簇索引 - mysql会自动选择主键列作为聚簇索引列 非叶节点 - 聚簇索引列的值 叶节点 - 聚簇索引列值以及真实的数据. 非聚簇索引 非叶节点 - 非聚簇索引列的值 叶节点 - 键值对(非聚簇索引列的值,主键值) 优缺点 好处:加快了查询速度(select ) 坏处:降低了增,删,改的速度(update/delete/insert),增大了表的文件大小(索引文件甚至可能比数据文件还大) 索引类型 普通索引(index)：仅仅是加快了查询速度 1234给非唯一,非主键的列添加的索引.比如表中的某列字段经常被用来搜索,比如emailcreate index 索引名 on 表名(列名);-- 删除alter table 表名 drop index 索引名; 唯一索引(unique)：行上的值不能重复 1如果创建列的时候,给该列添加了唯一约束unique.那么这个列默认就是唯一索引. 主键索引(primary key)：不能重复 123456如果某列是主键列,那么该列默认就是索引列.-- 删除主键索引.索引索引自动创建的.索引名是系统自动分配的,特殊的名称PRIMARYalter table 表名 drop primary key;-- show index from 表名;-- 查看数据字典 - 保存了所有表的索引信息. 全文索引(fulltext):仅可用于 MyISAM 表，针对较大的数据，生成全文索引很耗时空间。 组合索引[覆盖索引]：为了更多的提高mysql效率可建立组合索引，遵循”最左前缀“原则。 123俩列作为一个整体 - 实际上是构成了一个索引.where province = ? and city = ? create index pro_city_index on xx(province,city); 索引语法创建索引总览1234CREATE TABLE table_name( [col_name data type] [unique|fulltext][index|key] [index_name](col_name[length]) [asc|desc]) unique|fulltext为可选参数，分别表示唯一索引、全文索引 index和key为同义词，两者作用相同，用来指定创建索引 col_name为需要创建索引的字段列，该列必须从数据表中该定义的多个列中选择 index_name指定索引的名称，为可选参数，如果不指定，默认col_name为索引值 length为可选参数，表示索引的长度，只有字符串类型的字段才能指定索引长度 asc或desc指定升序或降序的索引值存储 索引使用方式 查看某张表上的所有索引 show index from tableName [\\G,如果是在cmd窗口，可以换行]; 建立索引 CREATE INDEX 索引名 ON 表名(列值) 删除索引 - alter table 表名 drop index 索引名; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273drop table index_test;create table index_test( id int(7) primary key, a int(7), b int(7), c varchar(20), d varchar(20));insert into index_test values(1,100,10,&#x27;aaa&#x27;,&#x27;A&#x27;);insert into index_test values(2,300,30,&#x27;aba&#x27;,&#x27;BB&#x27;);insert into index_test values(3,200,20,&#x27;caa&#x27;,&#x27;CC&#x27;);insert into index_test values(4,100,10,&#x27;daa&#x27;,&#x27;DD&#x27;);insert into index_test values(5,500,50,&#x27;aad&#x27;,&#x27;FF&#x27;);-- 默认主键列就是属于索引列 - 主键索引mysql&gt; show index from index_test \\G;*************************** 1. row *************************** Table: index_test Non_unique: 0 Key_name: PRIMARY Seq_in_index: 1 Column_name: id Collation: A Cardinality: 5 Sub_part: NULL Packed: NULL Null: Index_type: BTREE Comment: Index_comment: 1 row in set (0.00 sec)-- 给a列单独创建一个索引 - 普通索引 - 非聚簇索引create index index_test_a on index_test(a);-- 删除普通索引alter table index_test drop index index_test_a;-- 创建一个组合索引 - 非聚簇索引-- 非聚簇索引 - 非主键列索引-- 聚簇索引 - 主键列索引-- a,b当成一个整体来处理 - 实际上仍然是只有一个索引create index index_test_a_b on index_test(a,b);-- 给定一个索引的长度key_len,列的数据类型应该是字符串类型create index index_test on index_test(c(1));比如c列是学生的名称王三王静静王老二王八犊子王静二王静三-- 给某列创建索引的目的就是为了提高根据该列进行查询的效率-- 索引长度是1,区分度不够.假设的是姓王的比较多.-- 并没有提高多少查询效率-- 目录页 -&gt; 王 -&gt; 2页到10页select * from student where c=&#x27;王静%&#x27;;-- 长度为2-- 目录页-- 王三 - 2页-- 王静 - 4页~5页-- 王老,王八....-- create index index_test on index_test(c(2));-- 前俩个select * from student where c=&#x27;王静%&#x27;;-- 如果很多位重复,如何处理.....-- 自己了解... alter table 表名 add primary key(列名) –不要加索引名，因为主键只有一个 删除非主键索引 alter table 表名 drop index 索引名； 1mysql&gt; 删除主键索引： alter table 表名 drop primary key; 查看查询是否使用到了索引12mysql&gt;explain select语句; 组合索引(5)复合索引 12create index 索引名 on 表(列1,列2,列n); 索引失效情况 面试题 - 数据库如何进行优化 - 谈到如何解决索引失效. 索引type从优到差：System–&gt;**const–&gt;eq_ref–&gt;ref–&gt;ref_or_null–&gt;index_merge–&gt;unique_subquery–&gt;index_subquery–&gt;**range–&gt;index–&gt;all(全表扫描的意思) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263drop table index_test;create table index_test( id int(7) primary key, a int(7), b int(7), c varchar(20), d varchar(20));insert into index_test values(1,100,10,&#x27;aaa&#x27;,&#x27;A&#x27;);insert into index_test values(2,300,30,&#x27;aba&#x27;,&#x27;BB&#x27;);insert into index_test values(3,200,20,&#x27;caa&#x27;,&#x27;CC&#x27;);insert into index_test values(4,100,10,&#x27;daa&#x27;,&#x27;DD&#x27;);insert into index_test values(5,500,50,&#x27;aad&#x27;,&#x27;FF&#x27;);-- 复合索引create index index_test_abc on index_test(a,b,c);-- 测试explain - 测试查询是否使用到了索引.-- 测试主键索引mysql&gt; explain select * from index_test where id = 4;+----+-------------+------------+------------+-------+---------------+---------+---------+-------+------+----------+-------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+------------+------------+-------+---------------+---------+---------+-------+------+----------+-------+| 1 | SIMPLE | index_test | NULL | const | PRIMARY | PRIMARY | 4 | const | 1 | 100.00 | NULL |+----+-------------+------------+------------+-------+---------------+---------+---------+-------+------+----------+-------+主要就是观察type=&#x27;const&#x27;;所谓创建索引 - 索引高级篇.索引文件采取一个数据结构[b+树]用来专门存放索引.为何根据索引查找比较快 - 先查索引[先查目录] - 进行定位到行的操作 - myisam中.myisam中索引文件和数据文件.独立存储的,也是分开的存储.1. 数据文件[磁盘上的]也就是所谓的表文件.加载到mysql内存中[select]. 表里面的每一行在内存中也有一个内存地址.2. 索引文件存储的是索引列的值以及该索引列对应的行记录的内存地址. 索引列 内存地址 1 0x7a 2 0x7b 3 0x7c 4 0x7d 5 0x7e myisam索引 - 键值对索引[键 - 索引列值,值 - 行记录的内存地址] 键值对存储在B+树中. select * from index_test where id = 4; 1. 根据id=4先到索引文件中去查找了[消耗时间的] 2. 找到id=4对应的行记录地址[唯一的映射关系] 3. 直接根据行记录地址定位到具体的一行,不需要在数据文件中进行一个全表扫描了.-- 测试非索引列的查询 dmysql&gt; explain select * from index_test where d = &#x27;DD&#x27;;+----+-------------+------------+------------+------+---------------+------+---------+------+------+----------+-------------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+------------+------------+------+---------------+------+---------+------+------+----------+-------------+| 1 | SIMPLE | index_test | NULL | ALL | NULL | NULL | NULL | NULL | 5 | 20.00 | Using where |+----+-------------+------------+------------+------+---------------+------+---------+------+------+----------+-------------+1 row in set, 1 warning (0.00 sec)Type=&#x27;all&#x27; , 全表扫描 , 没有用到索引或者索引失效 , 从表里面的第一行一直扫描到最后一行 - 查询性能肯定是低下的. 遵循最左原则简介:针对的是复合索引 - 查询语句where最左边的列一定要和创建复合索引的第一个列保持一致. 复合索引(a,b,c) - 必须要连续. 1234567891011121314151617181920212223242526272829303132333435-- 创建复合索引的第一个列acreate index index_test_abc on index_test(a,b,c);-- a,b,c都是生效的-100 | 10 | daaexplain select * from index_test where a=100 and b=10 and c=&#x27;daa&#x27;;-- key_len 是73,三个索引都走了.-- 比如b失效的场景,c也是失效explain select * from index_test where b=10;//不走索引explain select * from index_test where c=&#x27;daa&#x27;;//不走索引-- 不生效 - mysql5.7以后对where语句进行了优化.-- oracle中where语句如果跟了多个条件,执行顺序 - 从右到左-- mysql中where语句条件默认是从左到右的.-- mysql低版本中where c=&#x27;daa&#x27; and a=100;//不会走索引的-- mysql5.7优化,优化成where a=100 and c=&#x27;add&#x27;;//才会走索引.-- a走了索引,c没有索引 - 特殊的场景 - 底层优化了.explain select * from index_test where c=&#x27;daa&#x27; and a=100;-- key_len = 5-- a列索引生效explain select * from index_test where a = 100;-- key_len = 5-- a,b生效explain select * from index_test where a=100 and b=10;-- key_len = 10-- 如果仅仅是根据a列查询,key_len是5,但是此时key_len是10.说明a,b索引都生效.-- a列是走了索引,但是c列没有走索引-- 必须要连续.这个是时候a和c是不连续的,中间跳过了b.所以只有a是生效的,但是c是不生效的.explain select * from index_test where a=100 and c=&#x27;daa&#x27;;-- key_len=5 范围之后索引列也会失效123456-- a列和b列是走了索引的,但是c列没有走索引.因为c列是范围之后的判断mysql&gt;explain select * from index_test where a=100 and b&gt;10 and c=&#x27;daa&#x27;;-- 如果三个索引都生效 - key_len=73-- 如果只有a,b走索引 - key_len=10 √ 模糊查询12345678910111213like &#x27;%&#x27;出现在末尾,仍然a,b,c都是走索引-- key_len = 73 - a,b,c都是走了索引的mysql&gt; explain select * from index_test where a=100 and b=10 and c like &#x27;d%&#x27;;-- like &#x27;%&#x27;如果出现在开始,不走索引的-- 只有a,b是走了索引的,c是没有走索引的-- key_len = 10 mysql&gt;explain select * from index_test where a=100 and b=10 and c like&#x27;%d&#x27;;-- 只有a,b是走了索引的,c是没有走索引的-- key_len=10mysql&gt;explain select * from index_test where a=100 and b=10 and c like&#x27;%d%&#x27;; 索引列使用函数1234567891011索引列套在函数中使用,将会导致索引失效-- 进行了ALL全表扫描mysql&gt; explain select * from index_test where abs(id)=1;+----+-------------+------------+------------+------+---------------+------+---------+------+------+----------+-------------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+------------+------------+------+---------------+------+---------+------+------+----------+-------------+| 1 | SIMPLE | index_test | NULL | ALL | NULL | NULL | NULL | NULL | 5 | 100.00 | Using where |+----+-------------+------------+------------+------+---------------+------+---------+------+------+----------+-------------+ 索引列参加了计算12345-- 导致索引列失效mysql&gt; explain select * from index_test where id+1=2;mysql&gt; explain select * from index_test where id = 2 - 1; 索引列参加运算符1234567891011121314151617181920212223242526272829-- 给员工表的提成率列添加一个索引-普通索引create index s_emp_cp on s_emp(commission_pct);-- is null(没有走索引)和is not null(走索引)-- is null - type=&#x27;ALL&#x27;mysql&gt;explain select first_name,commission_pct from s_emp where commission_pct is null;+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+| 1 | SIMPLE | s_emp | NULL | ALL | s_emp_cp | NULL | NULL | NULL | 25 | 80.00 | Using where |+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+-- is not null type=&#x27;range&#x27; - 走了索引的.mysql&gt; explain select first_name,commission_pct from s_emp where commission_pct is not null;+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+| 1 | SIMPLE | s_emp | NULL | range | s_emp_cp | s_emp_cp | 5 | NULL | 5 | 100.00 | Using index condition |+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+-- in(走索引 - range) not in(不走索引 - ALL)mysql&gt; explain select * from index_test where id in(1,2,3);mysql&gt; explain select * from index_test where id not in(1,2,3);-- 能用关联解决的,尽量不要使用not-- 找出没有选择任何一门课程的学生的信息 利用索引列查询出来的数据超过整张表的30%. 当数据量达到百万级别. 索引对应的重复的数据太多也是不适合创建索引的. city=’苏州’ 建立索引的策略 a. 索引不是越多越好的 因为索引也是需要占内容,也是需要到索引文件中去匹配索引的 - 需要消耗时间的. 更新数据的同时,我们更新索引数据. 主键列和唯一性列 √ 不经常发生改变的[在update列数据的数据的时候,也会更新索引文件] √ 满足以上2个条件,经常作为查询条件的列 √ 重复值太多的列 × null值太多的列 × 查询效率 数据库读写分离. 分表分库 - 水平分割和垂直分割 使用专门的搜索引擎 - es - elasticsearch/solr 避免使用索引查询导致索引失效 - 规避问题.","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"part03_DTL数据库事务","slug":"part03-DTL数据库事务","date":"2021-08-30T16:10:34.000Z","updated":"2021-08-30T16:10:56.499Z","comments":true,"path":"2021/08/31/part03-DTL数据库事务/","link":"","permalink":"http://example.com/2021/08/31/part03-DTL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/","excerpt":"","text":"DTL Data Transaction Language - 数据事务语言 commit,begin,start transction,savepoint,rollback 事务 只要使用客户端连接到mysql-server[mysql服务器],就会自动打开一个事务 在MYSQL中,所有的DML(insert,update,delete)操作在执行之后都会有一个commit操作[隐式的] commit - 提交事务 在ORACLE中,所有的DML(insert,update,delete)操作之后,如果没有手动commit,那么在另外一个事务中是读不到最新的更新数据的. DTL,数据事务语言 事务的定义: 就是指一组相关的SQL操作,我们所有的操作都是处在事务中的. 执行业务的基本单位是 - 不是sql,而是事务. 1234567891011121314151617181920212223242526java 代码 - 转账 public void transfer(int srcid,int targetid,double money)&#123; //设置不要自动提交模式 conn.setAutoCommit(false); Transaction tx = conn.beginTransaction();//开启一个事务 try&#123; //事务保证原子性 - 要么同时成功,要么同时失败. String sql = &quot;update xx set balance = balance-&quot;+money+&quot;where id=&quot;+srcid; //TODO... 执行sql,默认会自动提交事务的 -commit; //一旦是手动提交事务,那么上面的update操作仅仅是内存中的操作.尚未提交到db中. //其他代码... 出现了异常 , 手动提交 - 进入到catch String sql2 = &quot;update xx set balance = balance+&quot;+money+&quot;where id=&quot;+targetid; //TODO ... 执行sql默认会自动提交事务的 -commit; tx.commit(); &#125;catch (Exception e)&#123; //.. tx.rollback();//进行一个事务的回滚操作. &#125; &#125; 控制事务 - 就是控制事务的边界(事务的开始(begin) - 事务的结束(commit,rollback)) 一个事务的结束,代表着下一个事务的开始. 注意: 在数据库中**,执行业务的基本单位是事务,不是以某一条SQL** 数据库在默认情况下,事务都是打开的,也就是说它是一直 处在事务中的,一个事务的结束,代表着下一个事务的开启 执行commit或者rollback指令时,会结束当前事务 [已经提交的事务将不能够被回滚 - 已经不处于同一个事务中了,而事务与事务之间是隔离的] 作用:用来保证数据的平稳性和可预测性. 事务的四大特性(ACID): - 笔试 Atomicity,原子性,事务是不可再分割的,要么同时成功,要么同时失败. 转账业务(账户+money,账户-money - 一组sql - 至于一个事务当中,并且要保证原子性.) Consistency,一致性,事务一旦结束,内存中的数据和数据库中的数据是保持一致的 example：A用户和B用户进行转账1000元，A账户减少1000和B账户增加1000的sql语句必须全部执行成功，不存在一半成功，一半失败。但是无论如何执行，两个账户金额的改变加起来一定1000元，这就是一致性(数据的完整性)。 Isolation,隔离性,事务之间互不干扰,一多个用户并发访问数据库，比如同时操作一张表。数据库为每一个用户开启事务。每个事务相互独立，互不干扰。 Durability,持久性,事务一旦提交,则内存中的数据持久化[保存,序列化]到数据库中,永久保存 [涉及到数据库的备份和恢复的一些技术,冷备份,热备份…] DB - sqlData数据文件以及log目录[日志文件 - 记录了用户的sql操作] 事务控制语句DTL - 事务控制语言. BEGIN或START TRANSACTION；显式地开启一个事务； COMMIT；也可以使用COMMIT WORK，不过二者是等价的。COMMIT会提交事务，并使已对数据库进行的所有修改成为永久性的； ROLLBACK；有可以使用ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改； SAVEPOINT identifier；SAVEPOINT允许在事务中创建一个保存点，一个事务中可以有多个SAVEPOINT； RELEASE SAVEPOINT identifier；删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常； ROLLBACK TO identifier；把事务回滚到标记点； SET TRANSACTION；用来设置事务的隔离级别。InnoDB存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ和SERIALIZABLE。 rollback - demo - 回滚所有 前提 - 设置成手动提交事务 注意:1. 如果没有设置事务点 - rollabck撤销所有的dml操作的 注意的是rollback只能撤销/回滚尚未提交的事务.如果一个事务已经提交了,那么是回滚不了的 设置事务点 命令 - savepoint 事务点名称; rollback to 事务点名称. 效果就是会撤销到设置事务点下方的dml操作.事务点之前的dml操作将不会撤销 MYSQL 事务处理主要有两种方法自动开始事务 当我们mysql客户端连接到mysql服务器 - 自动开启 当执行完sql语句之后,自动会commit[事务的提交 - 意味着当前事务已经结束] 一个事务的结束意味着下一个事务的开始. commit/rollback - 结束事务. 手动开启事务 执行dml操作之后,就不会自动提交事务[commit],需要手动commit 用 BEGIN, ROLLBACK, COMMIT来实现 1-1. BEGIN 开始一个事务 1-2. start transaction - 手动开始一个事务 ROLLBACK 事务回滚 COMMIT 事务确认 demo01 A事务 - 执行了delete操作,但是还没有commit. 但是在A事务当中,查询的时候,是可以查询到delete的效果的 mysql&gt;begin; 但是在另外一个事务B中,是看不到A事务中尚未提交的数据的[仍然是可以看到id=2这条数据的] 对A事务进行一个commit操作 12mysql&gt; commit;Query OK, 0 rows affected (0.01 sec) 对于B事务来讲,分俩种情况.第一种情况是B一开始的事务还未提交,看到的效果是 12345678mysql&gt; select * from video_copy;+----+--------------+-------+---------------------+-------------+| id | title | likes | create_time | tbl_user_id |+----+--------------+-------+---------------------+-------------+| 1 | java无敌 | 200 | 2021-08-19 13:38:38 | 1 || 2 | python不错 | 200 | 2021-08-19 13:39:45 | 1 |+----+--------------+-------+---------------------+-------------+2 rows in set (0.00 sec) B事务提交,也结束了当前的事务,自动开启一个新的事务,在新的事务中重新再查一次,可以看到A事务提交的结果了. 12345678910mysql&gt; commit;Query OK, 0 rows affected (0.00 sec)mysql&gt; select * from video_copy;+----+------------+-------+---------------------+-------------+| id | title | likes | create_time | tbl_user_id |+----+------------+-------+---------------------+-------------+| 1 | java无敌 | 200 | 2021-08-19 13:38:38 | 1 |+----+------------+-------+---------------------+-------------+1 row in set (0.00 sec) 直接用 SET 来改变 MySQL 的自动提交模式: 2-1. SET AUTOCOMMIT=0 禁止自动提交 2-2. SET AUTOCOMMIT=1 开启自动提交 注意:设置成禁止自动提交的操作的话,这个操作仅仅是针对当前的会话窗口有效. 多事务的并发处理机制原因:多个事务同时操作一个表中的同一行数据(争抢临界资源),如果这些操作是.修改操作的话,就会产生并发问题,如果不处理,则会造成数据不一致的情况. 数据库可能产生的并发问题包括: 脏读 简介:一个事务读取到了另外一个事务中尚未提交的数据. 是指一个事务正在访问数据,并且对这个数据进行修改,而这种修改还没有提交到数据库中,而另一个事务也访问了这个数据,并且使用了这个数据解决方法:一个事务在修改数据时,该数据不能被其他事务访问 1所有的数据库都是拒绝脏读 - &quot;会读到脏数据&quot;. 不可重复读 是指一个事务多次读取同一条记录,如果此时另一个事务也访问并且修改了该数据,则就会出现多次读取出现数据不一致的情况,原来的数据变成了不可重复读取的数据解决方法:只有在修改事务完全提交过后才可以读取到数据 幻读 是指一个事务修改表中的多行记录[比如查询也是可以的],但是此时另一个事务对该表格进行了插入数据的操作,则第一个事务会发现表格中会出现没有被修改的行就像发生了幻觉一样解决方法:在一个事务提交数据之前,其他事务不能添加数据 不可重复读的重点是修改，同样的条件，你读取过的数据，再次读取出来发现值不一样了幻读的重点在于新增或者删除 事务隔离级别 READ UNCOMMITTED 这是事务最低的隔离级别，它允许另外一个事务可以看到这个事务未提交的数据。解决第一类丢失更新的问题，但是会出现脏读、不可重复读. READ COMMITTED 保证一个事务修改的数据提交后才能被另外一个事务读取，即另外一个事务不能读取该事务未提交的数据。解决第一类丢失更新和脏读的问题，但会出现不可重复读. REPEATABLE READ 简介:mysql默认的事务的隔离级别. 保证一个事务相同条件下前后两次获取的数据是一致的解决第一类丢失更新，脏读、不可重复读. SERIALIZABLE - 串行化 事务被处理为顺序执行。解决所有问题 - 有点类似于锁表. 性能及其低下. 提醒：Mysql默认的事务隔离级别为repeatable_read 12mysql&gt;set session transaction isolation level read uncommitted;mysql&gt;select @@tx_isolation; 总结 事务隔离级别 脏读 不可重复读 幻读 读未提交(read uncommitted) √ √ √ 读已提交-(read committed) - 不可重复读 × √ √ 可重复读(repeatable read) × × √ 串行化(serializable) × × × 事务的演示准备工作1234567drop table account;create table account( id int(7) primary key, name varchar(20), balance double(7,2));insert into account values(1,&#x27;admin&#x27;,1000.00),(2,&#x27;tom&#x27;,2000.00); 脏读 设置事务的隔离级别READ UNCOMMITTED - 一个事务才可以读取到另外一个事务尚未提交的数据. 1set session transaction isolation level read uncommitted; ​ 总结-一旦事务设置成了读未提交的隔离级别.产生脏读以及不可重复读的效果 ​ 不可重复读 - 在同一个事务中,多次读取到的数据不一样 READ COMMITTED set session transaction isolation level read committed; 一个事务只能读取到另外一个事务中已经提交的数据 不会出现脏读了.但是仍然会出现不可重复读[一定是在同一个事务中多次读取到的结果是不一样的]. REPEATABLE READ 可重复读 - 在同一个事务中,多次读取到的数据是一样的[不关心其他事务做了什么] - mysql的默认的隔离级别 set session transaction isolation level repeatable read; SERIALIZABLE 最高的隔离级别 - 效率最低的 - 类似于锁表 set session transaction isolation level serializable; A事务在查看表的时候.其他事务是不能对这张表进行任何的DML[insert,update,delete]操作 . 不可重复读和幻读区别 set session transaction isolation level READ COMMITTED 读已提交 - 才可能产生不可重复读. 不可重复读 针对”update” 右边的窗口 - A事务,左边的窗口是 - B事务 A事务在查看某张表[查看一次①]的同时.B事务同时在对这张表进行update操作.并且B事务手动提交了事务 这个时候A事务在当前事务中[自己的事务还未提交]再次查看这张表.多次读取出现不一样的数据 - 不可重复读. 幻读 针对”insert和delete” 左边的窗口 - A事务,右边的窗口 - B事务 A事务在更新某张表的时候/或者查看这张表,B事务同时正在对这张表进行insert操作.并且B事务手动提交了事务 这个时候A事务继续查看这张表[确认一下自己的更新动作是否完成],这个时候发现表中**”居然好像还有未被更新的数据”**, 该条数据实际上是B事务已经插入进去的 - 对于A事务就好像产生了幻觉一样. 总结 事务的四大特性[ACID] DTL命令 解释四个隔离级别,默认的隔离级别是可重复读 脏读,不可重复读,幻读.","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"part02_mysql_ddl_dml","slug":"part02-mysql-ddl-dml","date":"2021-08-30T16:09:40.000Z","updated":"2021-08-30T16:10:05.577Z","comments":true,"path":"2021/08/31/part02-mysql-ddl-dml/","link":"","permalink":"http://example.com/2021/08/31/part02-mysql-ddl-dml/","excerpt":"","text":"DDL DDL[Data Definition Language] - 数据定义语言 涉及到的sql命令如下: create命令 - 创建 创建表(table),视图(view),用户(user),函数(function),存储过程(procedure),数据库[database],约束(constraints) 以上构建的都是属于数据库DB的对象/单位 - DB的基本单位是table drop命令 - 删除 删除表(table),视图(view),用户(user),函数(function),存储过程(procedure),数据库[database],约束[constraints] 但是不能够删除表中具体行记录,是由delete命令 alter命令 - 修改 - 了解即可 修改列名,列的类型,修改约束.列的类型 - 使用情况很少 rename to - 修改表名 comment - 创建列的时候加上注释 truncate - 清空整张表 ORM思想 Obejct-Relational-Mapping - 对象关系映射 需要用到OO思想[第一步找出对象,分析对象的属性,分析对象的功能.考虑对象之间的关系]来进行实体类的设计 - 数据库的设计. 掌握目标 - 看到实体类-表结构.看到表结构-实体类. 映射规则: 实体名 - 表名 对象标识(id) - 主键(id) -primary key - [特点,非空且唯一] 普通属性 - 普通列[推荐俩者的名称保持一致.需要注意的是如果列是多个名称[匈牙利] - 小驼峰] 对象之间的关系 - 外键(foreign key) - 表与表之间是通过外键来进行关联[进行关联查询的基础] 通常情况下某张表的外键是指向另外一张表的主键的. 对象之间的关系 分析一个”小米商城”,利用OO思想,找出业务中的关键对象 登录,注册 - “用户User对象” - (id,phone,password,login_time,login_ip) 个人中心 - 其中有一块是用来负责展示用户的详情UserInfo 产品 产品详情 购物车 - id,商品id,商品名称,商品单价,num,小计算,总价,备注 订单 - 一个用户拥有多个订单,一个订单只能属于一个用户 产品分类表 1:N N:N 1:1 User和UserInfo: 一个用户匹配一个用户详情,一个用户详情仅属于一个用户 强调的是平等性 - 表设计中,外键可以出现在任何一方表中. 原则 - 能用单向关联解决的业务就不要使用双向关联. java实体类 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091现阶段的思想 - 实体类中没有外键的概念.-- 关系具有方向性-- 单向关联 - 关系的维护仅仅在其中一方存在.-- 根据第一表进行设计public class User&#123; private Integer id; private String phone; private String password; //一个用户拥有一个用户详情对象 private UserInfo userInfo; //现阶段 - 千万不要写成 - 对象里面是没有外键的概念的 //private Integer user_info_id;&#125; public class UserInfo&#123; private Integer id; private String header; private Gender sex;&#125; -- 单向关联 - 第二张表public class User&#123; private Integer id; private String phone; private String password; &#125;public class UserInfo&#123; private Integer id; private String header; private Gender sex; private User user;&#125;-- ORM思想的精髓 - 如何进行映射以及为什么需要这种思想??? 未来的操作 - java代码去连接db - 查询user表中所有的数据 -&gt; List&lt;User&gt;取出每一行数据 - 创建一个user对象[数据在内存中的载体.对象特殊类型的数组]//db中的每一行数据 - java代码来进行获取List&lt;User&gt; users = new ArrayList&lt;&gt;();循环体中&#123; //jdbc代码 Integer id = rs.getInt(1); String phone = rs.getString(2); String passwrod = rs.getString(3); //使用对象来封装每一行数据 User user = new User(id,phone,password); users.add(user);&#125;//未来学习了前端 - 后台list集合中的数据显示到网页上.-- 双向关联 - 彼此之间相互维护 public class User&#123; private Integer id; private String phone; private String password; private UserInfo userInfo; &#125;public class UserInfo&#123; private Integer id; private String header; private Gender sex; private User user;&#125; 表设计 ​ 1:N 一个用户对象和购物车对象 一个用户可以拥有多个购物车对象,但是一个购物车对象只能属于一个用户. 外键是存储在多的一方 实体类 1234567891011121314151617181920212223242526272829303132333435363738394041-- 单向关联01public class User&#123;//普通属性//一个用户拥有多个购物车private Set&lt;Cart&gt; carts;&#125;public class Cart&#123;//...&#125;-- 单向关联02public class User&#123;//普通属性&#125;public class Cart&#123;//...//一个购物车只能属于一个用户private User user;&#125;-- 双向关联public class User&#123;//普通属性//一个用户拥有多个购物车private Set&lt;Cart&gt; carts;&#125;public class Cart&#123;//...private User user;&#125; 表结构 User表 id phone password 1 110 123 2 114 123 3 115 123 购物车Cart表 2 2 mi02 1 1 1 mi01 1 3 3 mi03 2 4 4 mi04 2 id product_id product_name user_id 5 5 mi05 2 N:N 需要拆分成俩个一对多 一个学生可以选择多门课程, 一门课程可以被多个学生去选择. 比如:客户表,商品表,购买表 一个客户拥有多个商品 一个商品可以被多个用户购买. customer表 id cname 1 admin 2 tom product表 id pname price 1 mac 100000 2 xiaomi 8000 3 huawei 8000 4 联想 7000 需要建立第三方表,来确定customer表和product表的关系 . N:N-&gt;拆分成俩个1:N purcase表 - 购买表 采用的是联合主键[组合主键] 主键-primary key - 非空且唯一.作用:用来确定唯一元组[行] 所谓的”俩个1:n” - customer表和purcase表以及product表和purcase表 一个客户拥有多条购买记录[1:N] 一个产品拥有多条被购买记录[1:N] 主键列未必是单列[常见的id列] , N:N场景可以采取联合主键,主键列由俩列共同组成**(customer_id,product_id)** 外键列通常情况是引入另外一张表的主键列.在该表中.外键列有2列 分别是customer_id 引用了customer表中的id列 product_id引用了product表中的id列 customer_id product_id 1 1 1 2 2 1 2 3 2 4 另一种情况关于主键的选择.第三方表[用来维护关系的表],开发的时候,还是推荐给这张自己一个单独的主键列 id customer_id product_id 1 1 1 2 1 2 3 2 1 4 2 3 5 2 4 自关联 当前表中的外键列自关联到了自己表中的主键列 s_emp id first_name manager_id[上司id] 1 Carmen 2 Mark 1 3 tom 1 4 admin 2 5 jack 2 分析评论业务 以”抖音” User - Viedo 关注评论功能.一个用户可以评论多个视频.一个视频可以被多个用户进行评论 - N:N User表 id phone password username 1 110 123 吴签 2 114 123 霍针 3 115 123 孙岩 Viedo表 一个用户可以发布多个视频,但是一个视频只能由一个用户去发布 id 视频标题 视频点赞量 user_id 1 吴签 100万+ 2 2 霍针 100万+ 1 3 杨晓轩 10+ 3 4 孙岩 10+ 3 5 闫昊 10+ 3 评论表 - 重点 体现出谁评论了哪个视频即可.comment 外键列是可以为空的 id=5的人并不是直接对视频进行评论的 - 属于第二层评论,他是对id=1的这个人进行评论的 若comment_id为null,说明这个人是直接对视频进行评论的,属于业务的第一级评论 id 视频id user_id 评论内容 comment_pid 1 1 3 很羡慕 2 1 4 渣男 3 1 5 渣男 4 2 1 彼此彼此 5 2 5 你还是人么?你这样认为 1 除了评论还有回复…. 第一层 - 属于评论表的数据 第二层 - 对第一级的评论继续评论 第三层 - 对第二层及其以后的评论/回复 - 叫做回复. 回复表 一条评论可以引起多个回复 - reply id comment_id content replay_id user_id 1 5 难道你不羡慕吗 1 2 5 我羡慕 1 2 结构: 一条视频发出来id=5的视频 user_id=3: 很羡慕 ​ user_id=5:你还是人么?你这样认为 ​ user_id=1回复了user_id=5:难道你不羡慕吗 ​ user_id=2回复了user_id=1:我羡慕 表设计-三大范式 表设计一定尽可能去遵守三大方式.作用:指导db的设计更加合理化,避免数据的冗余. 笔试题中简答题. 1NF(第一范式):保证列的原子性.列不可再分割. 1234567891011s_emp(id,name);但是发现外国的name比较特殊.发现name列是可再分割的.不符合1NF.需要对name进行切割s_emp(id,first_name,last_name);address只需要包含省市区school(id,name,address);1 苏州大学 江苏省苏州市工业园区2 常州大学 江苏省常州市武进区3 苏州科技学院 江苏省苏州市高新区school(id,name,province,city,area); 2NF(第二范式):基于1NF,不存在非关键列部分依赖于关键列.非关键列要全部依赖于关键列 关键列 - 主键列;非关键列 - 非主键列 12345678910111213141516171819202122-- student,course表 - 所有的信息合并到一张表了.--1. student信息以及course信息都会存在数据的冗余性-- 如何确定主键列[单列,组合形式] - 能够确定唯一的一条行记录 - sid,cid-- db设计中,并不是表的数量或者列的数量越少越好的 - 满足三大范式-- 关键列(sid,cid),非关键列(sname,cname)-- ①(sid,cid) -&gt; 唯一确定 sname 实际上如果关键列中的部分列sid就可以确定了sname的值 sname只需要由关键列(sid,cid)中的部分列[也就是sid列]就可以确定了. 存在了非关键列sname部分依赖于关键列,违背了2NF-- ②(sid,cid) -&gt; 唯一确定 cnamestudent_course(sid,sname,cid,cname)sid sname cid cname1 tom 1 java1 tom 2 python2 admin 1 java2 admin 3 jack为了满足2NFstudent(sid,sname);//学生表 sid-&gt;snamecourse(cid,cname);//课程表 cid-&gt;cnamesc(sid,cid,score);//选课表 (sid,cid)-&gt; score 3NF(第三范式):基于2NF.不存在非关键列传递依赖于关键列.所有的非关键列要直接依赖于关键列 12345678910111213141516171819202122student(id,sname,uno,uname,address)1 tom x1001 苏州大学 江苏省2 jack x1002 社会大学 东北省3 james x1001 苏州大学 江苏省 关键列只有id列①关键列id可以直接确定一个唯一的uno的②uno又可以直接确定唯一的一个uname③给定一个学生的id,也是可以确定一个唯一的uname id -&gt; uno -&gt; uname =&gt; id -&gt; unameuname是间接被id确定下来的-uname是间接依赖[通过一个uno传递依赖]于关建列id.违背了3NF,存在了非关键列传递依赖于关键列. 所有的非关键列要直接依赖于关键列 - 所有的非关键列应该是直接被关键列来确定的. 修改 - 拆分student(id,sname,uid);//uid就是大学的idid -&gt; uid(引用university表中的id列) university(id,uno,uname,adress)uid-&gt;uname 建表1234567891011CREATE TABLE 表名( 列名 数据类型[(长度)], 列2 数据类型[(长度)], ... ... 列 数据类型[(n)])ENGINE=InnoDB DEFAULT CHARSET=utf8;-- mysql5.7及其以上可以省略了ENGINE=InnoDB DEFAULT CHARSET=utf8;-- 前提是my.ini文件配置好了-- 指定我们的数据的存储引擎InnoDB,表编码是utf8 数据类型 列的数据类型就是用来限制你将来插入数据到该列的限制.该列是什么类型,就需要插入什么类型的数据 数字相关的 a. 整数 - int和bigint b. 小数 - float,double[使用最多],decimal 笔试题中:TINYINT(1个字节)或者smallint(2个字节) 字符串相关的 - mysql中字符串是用单引号表示的 a. char(n) - 固定长度 - 0-255 bytes[ascill] b. varchar(n) - 可变长度 - 0-65535 bytes[unicode的范围] c. text - 长文本数据 笔试题中:mysql中char和varchar的区别 1234567数字5代表的是该列可以存储的字符串的个数.不是代表字节数char(5) - 定长字符的意思是即时该列仅仅保存一个字母&#x27;a&#x27;,那么在内存中,char的实际消耗的长度就是5个 - &quot;浪费&quot; 对char类型的列的读写操作效率高于varchar varchar(5) - 可变长度[最大可保存的字符串的长度],实际存储了一个字母&#x27;a&#x27;.实际也就只消耗了一个1长度 - &quot;节约了内存&quot; - 按需分配.因此,开发中尽可能字符串使用varchar,而不使用char. 日期 a. date -&gt; 即使保存的是年月日时分秒,查询出来的也仅仅只会显示到年月日 b. datetime-&gt;年月日时分秒.即使保存的数据仅仅是年月日.但是查询出来的时候,可以显示年月日时分秒 建表demo1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253drop table tbl_product;create table tbl_product( id int(3), name varchar(20), create_time date, price double(10,2));-- 分析括号中的参数-- int(3)-并不会影响该列可插入数据的一个范围.范围仍然是int型的范围-- 为了看出来int(3),修改一下建表语句-- int(13)想要看出来效果,这个列一定要加上zerofill,不足位数的用0填充create table tbl_product( id int(13) zerofill, name varchar(20), create_time date, price double(7,2));mysql&gt; insert into tbl_product values(1234,&#x27;tom&#x27;,now(),123.45);mysql&gt; select * from tbl_product;+---------------+------+-------------+--------+| id | name | create_time | price |+---------------+------+-------------+--------+| 0000000001234 | tom | 2021-08-19 | 123.45 |+---------------+------+-------------+--------+总结:int(n)此处的n不会影响插入到该列的数据的大小.那么n是配合zerofill来进行的.查询的时候,不足n位的数字全部用0填充.-- 修改表结构-测试varchar(n)中的n - 个数create table tbl_product( id int(7), name varchar(2), create_time date, price double(10,2));-- 如果varchar(n)设置成了2,但是插入了&#x27;tom&#x27;,报错-- ERROR 1406 (22001): Data too long for column &#x27;name&#x27; at row 1mysql&gt; insert into tbl_product values(1,&#x27;tom&#x27;,now(),123.45);-- 总结:varchar(n) - 中的n是代表的是字符的个数[一个汉字就是代表一个]-- double(m,n)-- m代表的是总长度,n代表的是精度 - double(7,2)create table tbl_product( id int(7), name varchar(20), create_time date, price double(7,1));mysql&gt; insert into tbl_product values(2,&#x27;admin&#x27;,&#x27;2021-10-01&#x27;,123456.56789);-- double(7,2) -&gt; 7就是总的长度,2代表的精度[四舍五入] - 123456.56789 -- 插入失败了 - Out of range value for column &#x27;price&#x27; at row 1-- 插入失败的原因是123456.57 -&gt; 这个结果已经超过了总的长度7了.-- 修改double(7,1) -&gt; 123456.56789 -&gt; 123456.6 -&gt; 仍然没有超过7这个总的长度的. - 可以被插入进去的 123456789101112mysql&gt; show tables;mysql&gt; desc tables;-- 查看建表语句mysql&gt; show create table tbl_product CREATE TABLE `tbl_product` ( `id` int(7) DEFAULT NULL, `name` varchar(20) DEFAULT NULL, `create_time` date DEFAULT NULL, `price` double(3,2) DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8 删除表 在不考虑有外键因素的情况下,可以直接删除表的 12DROP TABLE 表名; 约束constraint 作用:在插入到表中列的数据进行进一步的限制 约束类型 主键约束[primary key] - 非空且唯一.用来确定唯一的一行记录 - pk 非空约束[not null] - 非空 - 该列不能为null.必须插入值或者给定一个默认值 - nn 唯一约束[unique] - 唯一性 - nq 外键约束[foreign key] - 表与表之间的关系是通过外键来进行维护的.外键列一般是对应某张表的主键列.可以允许为null - fk 列级添加 优点:比较简单,缺点:不能给约束取名字 语法: 12345678CREATE TABLE 表名(列名 数据类型[(长度)] [约束类型1],列2 数据类型[(长度)] [约束类型2],......列 数据类型[(n)])ENGINE=InnoDB DEFAULT CHARSET=utf8; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950drop table tbl_product;create table tbl_product( id int(7) primary key comment &#x27;产品的id&#x27;,-- 给某列增加俩个约束,用空格隔开name varchar(20) not null unique comment &#x27;产品的名称&#x27;,-- 如果该列没有插入数据,则使用default给定的默认值create_date date not null default now(),-- 非空price double(7,2) not null);-- 死记住-- 如果上面的create_date使用的是date,给定默认值的时候,是不能直接使用now()函数的.如果想要给定默认值是now(),那么这个列必须是datetime-- 修改date类型列的默认值drop table tbl_product;create table tbl_product( id int(7) primary key comment &#x27;产品的id&#x27;,-- 给某列增加俩个约束,用空格隔开name varchar(20) not null unique comment &#x27;产品的名称&#x27;,-- 如果该列没有插入数据,则使用default给定的默认值create_date date not null default &#x27;2019-01-01&#x27;,-- 非空price double(7,2) not null);-- 演示primary keyinsert into tbl_product(id,name,price) values(1,&#x27;tom&#x27;,123.567);mysql&gt; select * from tbl_product;+----+------+-------------+--------+| id | name | create_date | price |+----+------+-------------+--------+| 1 | tom | 2019-01-01 | 123.57 |+----+------+-------------+--------+-- 继续插入一个id也是1的值insert into tbl_product(id,name,price) values(1,&#x27;admin&#x27;,123.567);ERROR 1062 (23000): Duplicate entry &#x27;1&#x27; for key &#x27;PRIMARY&#x27;-- 违背了primary key主键约束的规则 - 重复了.-- not null-- 没有给price插入值,但是该列存在一个not null非空约束insert into tbl_product(id,name) values (2,&#x27;tom&#x27;);-- ERROR 1364 (HY000): Field &#x27;price&#x27; doesn&#x27;t have a default value-- unique 唯一性,表中已经存在了一行记录是tominsert into tbl_product(id,name,price) values(2,&#x27;tom&#x27;,12.3);-- name字段/列值重复了.ERROR 1062 (23000): Duplicate entry &#x27;tom&#x27; for key &#x27;name&#x27; 表级添加 优势可以给约束命名,记住列级添加是不支持给列取名称的 not null非空约束以及default仅仅是支持列级添加的方式 123456789CREATE TABLE 表名(列名 数据类型[(长度)],列2 数据类型[(长度)],......列 数据类型[(n)],[constraint 约束名称] 约束类型(列))ENGINE=InnoDB DEFAULT CHARSET=utf8; 12345678910111213141516171819202122232425drop table tbl_product;create table tbl_product( id int(7) comment &#x27;产品的id&#x27;,-- 给某列增加俩个约束,用空格隔开name varchar(20) not null comment &#x27;产品的名称&#x27;,-- 如果该列没有插入数据,则使用default给定的默认值create_date date not null default &#x27;2019-01-01&#x27;,-- 非空price double(7,2) not null,-- 给列添加约束-- 约束命名 - 表名_列名_约束类型缩写constraint tbl_product_id_pk primary key(id),constraint tbl_product_name_uq unique(name));insert into tbl_product values(1,&#x27;tom&#x27;,now(),1223.3);-- 让name违背了unique约束insert into tbl_product values(2,&#x27;tom&#x27;,now(),14.56);-- for key &#x27;约束名称&#x27;,如果采用的是列添加.系统会默认给定一个约束名称[就是列的名称]-- 默认的约束名=&#x27;name&#x27;和给定的约束名称&#x27;tbl_product_name_uq&#x27;-- 自定义的约束名称 - 精确定位错误的位置ERROR 1062 (23000): Duplicate entry &#x27;tom&#x27; for key &#x27;tbl_product_name_uq&#x27; 外键约束 foreign key - 简称fk.用来确定表之间的关系的.外键通常是是在多的一方. 1:N或者1:1 123456789101112131415161718192021222324252627282930313233drop table tbl_user;create table tbl_user( id int(7) primary key, username varchar(20) not null unique);insert into tbl_user values(1,&#x27;tom&#x27;);insert into tbl_user values(2,&#x27;admin&#x27;);drop table tbl_video;create table tbl_video( id int(7) primary key, title varchar(20), likes int(7), create_time datetime default now(), -- 外键列命名方式 表名_另外一张表的引用列名[主键列] -- 外键列的数据类型和长度和你引用的地方保持一致 tbl_user_id int(7), -- 表级添加 constraint tbl_video_table_user_id_fk foreign key(tbl_user_id) references tbl_user(id));-- 一旦创建了约束,插入数据的时候需要注意的是.-- 外键列是允许为空的.insert into tbl_video values(1,&#x27;学好myql&#x27;,100,now(),1);insert into tbl_video values(2,&#x27;学好java&#x27;,100,now(),1);insert into tbl_video values(3,&#x27;学习jdbc&#x27;,100,now(),2);-- 注意.既然已经定义了外键的约束.那么插入数据的时候,引用的外键列的值在另外一张表中一定要有行记录的-- tbl_user表中是不存在id=3的行记录的insert into tbl_video values(3,&#x27;mysql太简单了&#x27;,100,now(),3);-- 报错ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`j03s`.`tbl_video`, CONSTRAINT `tbl_video_table_user_id_fk` FOREIGN KEY (`tbl_user_id`) REFERENCES `tbl_user` (`id`)) N:N 12345678910111213141516171819202122232425262728293031323334-- 评论表-- 一个用户可以对多个视频进行评论-- 一个视频可以被多个用户进行评论-- 拆分成俩个1:N-- 组合主键 + 列级添加drop table tbl_comment;create table tbl_comment( -- 组合主键 - 分别给俩个列都去定义了主键列 - 抛出错误ERROR 1068 (42000): Multiple primary key defined -- 认为这张表中存在俩个主键,这是不允许的. user_id int(7) references tbl_user(id), video_id int(7) references tbl_video(id), content varchar(50), -- 组合主键的正确定义方式 constraint tbl_comemnt_pk primary key(user_id,video_id), -- 外键的列级添加方式 comment_id int(7) references tbl_comemnt(id));-- 评论表拥有独立的主键id + 外键约束(表级添加方式)drop table tbl_comment;create table tbl_comment( id int(7) primary key, user_id int(7), video_id int(7), content varchar(50), comment_id int(7), constraint tbl_comment_user_id_fk foreign key(user_id) references tbl_user(id), constraint tbl_comment_video_id_fk foreign key(video_id) references tbl_video(id), constraint tbl_comment_id_fk foreign key(comment_id) references tbl_comment(id));insert into tbl_comment(id,user_id,video_id,content) values(1,1,1,&#x27;好的,我会学会mysql的&#x27;);insert into tbl_comment values(2,2,1,&#x27;好的,我会学会mysql的&#x27;,1); 建表补充 由一张表来构建另外一张表 保留原表的表结构+数据 12create table 表名 select语句; 1234drop table video_copy;-- 保留原表中的所有的列的数据create table video_copy select * from tbl_video; 123drop table video_copy;create table video_copy select id,title from tbl_video; 保留原表的表结构 + 但是不需要原表的数据 123drop table video_copy;create table video_copy select id,title from tbl_video where 1=2; DML操作 insert 插入数据 delete 删除数据 update 更新数据 插入语句 语法一:给表中所有的列添加数据 插入的列值要和建表语句中列顺序以及列的类型以及列的约束高度保持一致. 12INSERT INTO 表名 VALUES(列值1,列值2,列值3,..,列值N) 语法二:给表中的指定列插入数据 12INSERT INTO 表名(列名1,列名2) VALUES(列值1,列值2); insert+select insert into 表名 select 语句; 把查询结果的数据插入到该表中 12345678-- 统计视频的被评论的用户量,并且保存到另外一张表中 video_id,comment_numdrop table comment_aly;create table comment_aly( video_id int(7),comment_num int(7));insert into comment_aly select video_id,count(user_id) from tbl_comment group by video_id; auto_increment mysql中的主键的生成策略 - 自增长策略 - auto_increment[默认的是从1开始,步长为1] oracle中的主键的生成策略 - 自增长 - sequence 应用场景:以后插入的时候[除非是模拟数据],id肯定是后台自动生成 - 唯一性. 12345678910111213141516171819drop table comment_aly;create table comment_aly(id int(7) primary key auto_increment, video_id int(7),comment_num int(7));insert into comment_aly(video_id,comment_num) select video_id,count(user_id) from tbl_comment group by video_id;-- mysql中提供了一个函数last_insert()-- 查看最后一个id的插入的数据mysql&gt; select last_insert_id();-- 还希望模拟数据的时候接着使用这个自增长-- 修改自增长的初始值.mysql&gt; alter table comment_aly auto_increment=6;-- 比如数据就是自己插入进去的insert into comment_aly(video_id,comment_num) values(1,3); 补充 hive+hbase[分布式数据库] - 大数据 数据分析业务 数据的获取 1-1. 爬数据 - 爬虫 - 大公司都有反爬技术[前端的js算法是公开的.万一被破解了.需要重新制定算法] 爬虫工程师 = 低级的[网站没有反爬技术]和高级的[反爬] 1234567891011验证发展历程 - 为了阻止程序模拟用户进行登录的过程. 1. 早期是没有验证码 - 模拟用户登录的程序不断去尝试登录的过程. - 网站可能卡死 2. 简单的文字或者数字框/弹出框 1+1=? 1+2=? 3. 图片验证码 - 图像处理技术-识别出图像中的文字的 图片中文字尽可能做得非常非常非常模糊,颠倒 - 程序识别不出来. 4. 手机验证/滑动块 - 区分程序在操作还是人操作 1-2. 日志文件 - 比如后台会记录用户的行为轨迹 - 透露出用户的爱好. 数据的清洗 日志文件/爬过来的数据 [字段比较多的.需要在有业务经验的基础之上]需要对若干个字段进行进一步的筛选工作. 把关心的和业务相关的字段清洗出来. 数据的分析 找出某个分类的共性的特征.比如代码好的-睡眠时间长,敲代码时间比较长等… 数据的挖掘 金融行业,房地产行业 根据数据分析的结果来预判下一次的结果 - 建模 理想状态中 -&gt; y = ax + b; 现实状态中,不可能得到一个100%的模型的 - 最优模型-最优的解-模型的准确率 x值,y值 -&gt; y=ax+b x y -&gt; z 8h 3h - &gt; good 8.5h 3.5h -&gt; good 1h 30min -&gt; error … … … … x和y与z之间的关系 未来接触到了新生,8.8h,10h -&gt; 可能是good[概率高于error] delete语句 清空表 - delete语句不带where 1234delete from 表名;delete from video_copy; 带条件的删除 - 删除1条,不删除,删除多条 12345delete from 表名 where语句;-- 删除video_copy表中id=2的行记录delete from video_copy where id=2; update语句 更新的整张表的数据 - 不带where语句 12345678910111213语法:-- 更新所有的行的单列update 表名 set 列名=新的列值;-- 更新所有的行的多列.update 表名 set 列1=新的列值1,列2=新的列值2,列n=新的列值n;-- 比如更新video_copy表中的likesupdate video_copy set likes=likes*1.1;-- 比如更新video_copy表中的likes和titleupdate video_copy set likes=200,title=&#x27;java无敌&#x27;; 更新指定条件的行记录 - where语句 123更新id=2的titleupdate video_copy set title=&#x27;python不错&#x27; where id=2; 总结约束注意点 列添加了约束,需要注意的地方有哪些 先删除多的一方表,再删除的一的一方的表 删除行记录的时候,需要先把这个行记录在其他表中被引用的行记录要全部删除之后,才能删除自己. 创建表的时候,应该先创建一的一方,然后创建多的一方 删除表12345678910111213141516171819202122232425262728293031323334353637383940414243444546-- 删除表不是随意删除的 - 前提是创建了外键约束-- 先删除多的一方表,再删除的一的一方的表drop table tbl_comment;drop table tbl_user;drop table tbl_video;-- 用户表create table tbl_user( id int(7) primary key, username varchar(20) not null unique);insert into tbl_user values(1,&#x27;tom&#x27;);insert into tbl_user values(2,&#x27;admin&#x27;);-- 视频表create table tbl_video( id int(7) primary key, title varchar(20), likes int(7), create_time datetime default now(), -- 外键列命名方式 表名_另外一张表的引用列名[主键列] -- 外键列的数据类型和长度和你引用的地方保持一致 tbl_user_id int(7), -- 表级添加 constraint tbl_video_table_user_id_fk foreign key(tbl_user_id) references tbl_user(id));-- 一旦创建了约束,插入数据的时候需要注意的是.-- 外键列是允许为空的.insert into tbl_video values(1,&#x27;学好myql&#x27;,100,now(),1);insert into tbl_video values(2,&#x27;学好java&#x27;,100,now(),1);insert into tbl_video values(3,&#x27;学习jdbc&#x27;,100,now(),2);-- 评论表create table tbl_comment( id int(7) primary key, user_id int(7), video_id int(7), content varchar(50), comment_id int(7), constraint tbl_comment_user_id_fk foreign key(user_id) references tbl_user(id), constraint tbl_comment_video_id_fk foreign key(video_id) references tbl_video(id), constraint tbl_comment_id_fk foreign key(comment_id) references tbl_comment(id));insert into tbl_comment(id,user_id,video_id,content) values(1,1,1,&#x27;好的,我会学会mysql的&#x27;);insert into tbl_comment values(2,2,1,&#x27;好的,我会学会mysql的&#x27;,1); 分析删除表的顺序 1234567891011-- 如果删除的是tbl_user或者tbl_video都会报错-- 报错的原因就是由外键约束存在导致的mysql&gt; drop table tbl_user;ERROR 1217 (23000): Cannot delete or update a parent row: a foreign key constraint failsmysql&gt; drop table tbl_video;ERROR 1217 (23000): Cannot delete or update a parent row: a foreign key constraint fails-- 应该要先删除子记录[外键所在的表中的记录],然后再删除父记录 - 先删除多的一方表,再删除的一的一方的表-- 多的一方的外键引用的是一的一方的主键. 删除行记录123456789101112131415161718-- id=2的用户是在tbl_comment中存在一条行记录的,它是被引用了.mysql&gt; delete from tbl_user where id=2;ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`j03s`.`tbl_comment`, CONSTRAINT `tbl_comment_user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `tbl_user` (`id`))-- id=2的所有的评论的全部删除[删除子记录],然后再去删除id=2的用户mysql&gt; delete from tbl_comment where user_id=2;-- 然后才能去删除id=2的用户,已经把用户id=2这个用户的所有的评论全部删除了mysql&gt; delete from tbl_user where id=2;ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`j03s`.`tbl_video`, CONSTRAINT `tbl_video_table_user_id_fk` FOREIGN KEY (`tbl_user_id`) REFERENCES `tbl_user` (`id`))id=2的用户又发布了一条视频,它也在tbl_video表中被引用了.mysql&gt; delete from tbl_video where tbl_user_id=2;-- 等把id=2的用户的所有评论信息以及发布的视频全部删除完毕之后,才可以删除自己mysql&gt; delete from tbl_user where id=2; 约束的缺点 外键约束 - 保证数据的完整性和一致性.缺点 - 表之间的关系越强烈[手动创建了约束条件] - 表之间的耦合越高. 在下周DB设计 - 不要手动创建约束 - 弱化表之间的关系 - “表的关系 - 心中” 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061驰星CRM系统 - 学生信息,项目经理信息-- 假设一个项目经理可以教多个学生-- dev_id是外键列student(id,sname,school,dev_id);1 杨晓轩 文正养老学院 22 闫昊 八一农垦 13 刘静 八一农垦 2dev(id,dev_name,age);1 success 182 james 453 小强 19如果建表的时候create table student( //...foreign key(dv_id) references dev(id););-- 导致的后果,不能随意删除项目经理.项目经理只要有学生信息.就不能删除项目经理.-- 现实生活中 - success上台了,james开除了...mysql&gt; delete from dev where id=2;//删除失败了.因为james在student表中有子记录-- 要想删除james,需要删除他所有的学生.实际的业务 - 肯定不允许我去删除&quot;宝贵的学生信息&quot;-- 目标 - 1. 成功删除项目经理-- 2. 知道学生曾经是哪个老师带过的.-- 因此,在建表的时候,其实是允许数据的冗余性的.drop table t_student;drop table dev;create table dev( id int(7) primary key auto_increment,dev_name varchar(20),age int(3));insert into dev values(1,&#x27;success&#x27;,18);insert into dev values(2,&#x27;james&#x27;,45);create table t_student( id int(7) primary key auto_increment,sname varchar(20),school varchar(20),-- 此处没有进行约束的添加 - &quot;关系在心中即可&quot;dev_id int(7),-- 数据的冗余 - 防止项目经理的记录被删除dev_name varchar(20));insert into t_student values(1,&#x27;杨晓轩&#x27;,&#x27;文正养老学院&#x27;,2,&#x27;james&#x27;);insert into t_student values(2,&#x27;闫昊&#x27;,&#x27;八一农垦&#x27;,1,&#x27;success&#x27;);insert into t_student values(3,&#x27;刘静&#x27;,&#x27;八一农垦&#x27;,1,&#x27;success&#x27;);-- 虽然没有给dev_id列创建约束,业务分析可以确定该列就是用来&quot;维护俩表之间的关系的&quot;-- 查询学生的姓名以及项目经理的姓名以及年龄mysql&gt; select s.sname,d.dev_name,d.age from t_student s join dev d on s.dev_id=d.id;-- 开除james,没有约束,可以直接删除mysql&gt; delete from dev where id=2; 物理删除和逻辑删除 物理删除就是真正意义上的delete语句 逻辑删除 - 建议 - 比较安全. 因为数据是不能随意删除的.数据是需要后台进行数据分析的.用户的端的删除大部分都是逻辑删除. 实际上就是每张表都会增加逻辑列. 123456789101112131415161718drop table xx_del;create table xx_del( id int(7) primary key, name varchar(20), status int(7));insert into xx_del values(1,&#x27;tom&#x27;,0);insert into xx_del values(2,&#x27;admin&#x27;,0);-- 首页 - 加载xx_del表中所有的信息-- 查询逻辑列 - 把status=0的行记录全部加载List&lt;XX&gt; list = &quot;select * from xx_del where status=0&quot;;-- 删除按钮 - 删除 - 实际上是逻辑删 - 并不会执行delete语句,执行的是update语句update xx_del set status=1 where id=1;-- 再去根据status=0去加载,给用户端的感觉好像是这条记录被删除了.","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"part01_DQL_查询","slug":"part01-DQL-查询","date":"2021-08-30T16:07:54.000Z","updated":"2021-08-30T16:09:02.179Z","comments":true,"path":"2021/08/31/part01-DQL-查询/","link":"","permalink":"http://example.com/2021/08/31/part01-DQL-%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"数据库 数据库(Database - 简称DB) 数据按照一定的数据结构来进行组织,存储和管理的仓库. 学习的数据库mysql - 目前最主流的关系型数据库[免费的.现在属于oracle公司的] 安装的版本&gt;=5.7.x -&gt; 发展[mysql5.5.x,mysql5.6.x,mysql.5.7.x,mysql8.x] - 版本不一样,语法存在差异. SQL SQL - Structured Query Language - 结构化查询语言. 作用: 脚本文件 - 以.sql为脚本的文件 我们本质上就是通过sql语法/命令来操作我们的DB 按照功能来进行分类 DQL(Data Query Language) - 数据查询语言 - 也是整个sql的核心 - 最难的 select DML(Data Manipulation Language) - 数据操纵语言 insert update delete DDL(Data definition Language) - 数据定义语言 create alter drop DCL(Data Control Language) - 数据控制语言 grant[授权],revoke[取消权限] DTL(Data Transaction Language) - 数据事务语言 commit savepoint rollback 脚本文件 mysql中的script文件 - 是以.sql为后缀的文件. mysql - 数据库-由若干张表组成的仓库,数据是存储在一张二维**表[关系]**中的 如果一个数据库存储数据的格式是一个行和列组成表 - 关系[表格]型数据库 生成若干张表 表中插入若干条数据 准备工作##登录mysql 打开cmd mysql -u用户名 -p密码 1admindeMacBook-Pro:~ admin$ mysql -uroot -proot 创建仓库 MYSQL就是通过仓库的形式来管理我们的数据的. 语法:CREATE DATABASE 仓库名; sql的语法大小写是不敏感的. 12mysql&gt; create database j03s;Query OK, 1 row affected (0.00 sec) 查看所有的仓库12345678910mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || j03s || mysql || performance_schema || sys |+--------------------+ 使用仓库1mysql&gt; use j03s 查看所有的表1mysql&gt; show tables; 导入脚本1mysql&gt; source sql脚本文件的绝对路径; 1mysql&gt; source /Users/admin/Desktop/j03s_mysql_all/教学脚本/mysql_cn.sql; 该脚本文件中的表 123456789+----------------+| Tables_in_j03s |+----------------+| s_customer || s_dept || s_emp || s_ord || s_region |+----------------+ 继续导入 - 面试中常常使用到的一个脚本 123456789+----------------+| Tables_in_j03s |+----------------+| course || sc || student || teacher |+----------------+ 确认数据的编码 建议修改编码之后,建议重启mysql服务 右击计算机 - 管理 - 服务 - 服务和应用程序 - 右边的窗口 - mysql - 右击重启 12mysql&gt; show variables like &#x27;char%&#x27;; 12345678910111213+--------------------------+-----------------------------------------------------------+| Variable_name | Value |+--------------------------+-----------------------------------------------------------+| character_set_client | utf8 || character_set_connection | utf8 || character_set_database | utf8 || character_set_filesystem | binary || character_set_results | utf8 || character_set_server | utf8 || character_set_system | utf8 || character_sets_dir | /usr/local/mysql-5.7.28-macos10.14-x86_64/share/charsets/ |+--------------------------+-----------------------------------------------------------+ 123需要对每一项进行单独的设置mysql&gt;set character_set_client=utf8; mysql插入中文乱码 检测上面的编码 my.ini文件在哪里 12345678[client]# 设置mysql客户端默认字符集default-character-set=utf8 [mysqld]# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server=utf8 本身自己的cmd的编码 如果还有问题,卸载重来. 简单Query 属于DQL命令 - select命令 query语法 查询的本质 查什么 到哪里查[必须先使用数据库,然后才能查看这个库下的表] 12345-- 查询整张表的某些列SELECT 列1,列2,列n FROM 表名;-- 查询整张表中的所有列,*代表所有的列SELECT * FROM 表名; 查询表结构123456789101112desc 表名;mysql&gt; desc student;+-------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id | int(10) | YES | | NULL | || sname | varchar(10) | YES | | NULL | || age | datetime | YES | | NULL | || sex | varchar(10) | YES | | NULL | |+-------+-------------+------+-----+---------+-------+ 查询练习 查询student表中的姓名sname 12mysql&gt; select sname from student; 查询student表中的学生信息 12mysql&gt; select * from student; 查询s_emp员工表中的first_name和last_name 12mysql&gt; select first_name,last_name from s_emp; 查询客户[s_customer]的姓名以及客户的电话号码 12mysql&gt; select name,phone from s_customer; 查询s_emp中的title列 12mysql&gt; select title from s_emp; 排重关键字distinct 列名 12mysql&gt; select distinct title from s_emp; 条件查询 query-conditional语法 如果查询语句后面不加where条件,查询的是整张表中的数据 需要对数据进行筛选,需要使用条件查询 语法 12345-- 查询满足条件表达式的数据SELECT 列1,列2,列nFROM 表名WHERE 条件表达式; 运算符 比较运算符 =,&gt;,&lt;,&gt;=,&lt;=,!=,&lt;&gt; 其他运算符 2-1. in(集合列表) 2-2. not in(集合列表) 2-3. between … and … 在 … 和 …区间 - 是一个闭区间 is null - 判断某列是否为空,注意判断是否为空,不能使用= is not null - 判断某列是否不为空,不能使用!= 逻辑运算符 not and - 用来连接多个条件的,多个条件同时为true,才能返回结果 or - 用来连接多个条件的,只要有一个条件成立,就会返回结果. 条件查询练习 查询工资高于1200的员工的信息[id,first_name,salary] 12mysql&gt; select id,first_name,salary from s_emp where salary&gt;1200; 把部门编号为41,42,43的员工信息查询出来 123456-- 写法使用in关键字 - db设计,表列命名不能使用mysql关键字mysql&gt; select id,first_name,dept_id from s_emp where dept_id in(41,42,43);-- 写法 - 使用or逻辑运算符mysql&gt; select id,first_name,dept_id from s_emp where dept_id=41 or dept_id=42 or dept_id=43; 查询工资在1200~1450之间的员工的信息 123456-- between .. and .. 闭区间mysql&gt; select id,first_name,salary from s_emp where salary between 1200 and 1450;-- and逻辑运算符mysql&gt; select id,first_name,salary from s_emp where salary&gt;=1200 and salary&lt;=1450; 查询title[职称]为Stock Clerk的员工信息 12345678-- 注意title列的数据类型varchar(25) - 字符串-- mysql中使用单引号来表示字符串mysql&gt; select id,first_name,title from s_emp where title=&#x27;Stock Clerk&#x27;;-- 具体存储的值全部换成小写 - 也是可以查询出来的.-- mysql5.7.x版本不仅仅是sql语法忽略了大小写,表中查询也是忽略的 - 但是不建议这样做.mysql&gt; select id,first_name,title from s_emp where title=&#x27;stock clerk&#x27;; 查询有提成[commission_pct]的员工信息 12mysql&gt; select id,first_name,commission_pct from s_emp where commission_pct is not null; 列别名和列的计算 我们可以给列重新命名 123456789101112131415-- 语法一:列1 列别名1 - 推荐使用的语法mysql&gt; SELECT 列1 列别名1,列2 列别名2 FROM 表名 [WHERE条件查询];mysql&gt; select id 编号,first_name 名字,salary 工资 from s_emp;-- 语法二: 列1 as 列别名1 - 不推荐使用mysql&gt;select id as 编号,first_name as 名字,salary as 工资 from s_emp;-- 语法三: mysql中可以使用双引号来保持/包裹格式-- 列1 &quot;列别名1&quot;mysql&gt; select id &quot;编号&quot;,first_name &quot;名字&quot;,salary &quot;工资&quot; from s_emp;-- 需求:希望列别名每个汉字间距一点[空一格]mysql&gt; select id &quot;编 号&quot;,first_name &quot;名 字&quot;,salary &quot;工 资&quot; from s_emp; mysql中的列支持计算的 123-- 查询员工的年薪mysql&gt; select first_name,salary*12 年薪 from s_emp; 练习 123-- 查询员工的年薪,但是要包括提成mysql&gt; select first_name,salary*12*(1+commission_pct/100) 年薪 from s_emp; 以上的查询结果 - 有提成的员工全部查询成功,没有提成的员工,计算年薪都是null 在mysql中null值直接进行计算,结果还是null值,因此一般需要对null值进行处理,如果是数字列为null.需要作为0来进行处理 mysql中内置了很多函数 - 空值置换函数 - coalesce(m,n) 计算规则类似于java中的三元操作符m==null?n:m 12mysql&gt; select first_name,salary*12*(1+coalesce(commission_pct,0)/100) 年薪 from s_emp; 模糊查询 使用like关键字 % - 占位符 - 代表任意多个任意字符 _ 占位符 - 代表任意单个任意字符 练习 比如查询teacher表中所有的李姓老师 12mysql&gt; select * from teacher where tname like &#x27;李%&#x27;; 比如查询first_name第三个字母是e的员工信息 12mysql&gt; select first_name from s_emp where first_name like &#x27;__e%&#x27;; 查询职称title中包含VP的并且工资高于1200的员工信息 12mysql&gt; select first_name,title,salary from s_emp where title like &#x27;%VP%&#x27; and salary&gt;1200; 查询first_name以M开头的员工信息 12mysql&gt; select first_name from s_emp where first_name like &#x27;M%&#x27;; 查询first_name中不包含字母n的员工信息 12mysql&gt; select first_name from s_emp where first_name not like &#x27;%n%&#x27;; 找出非41,42,43部门的员工 12mysql&gt; select first_name,dept_id from s_emp where dept_id not in(41,42,43); 转义字符 了解即可 123mysql&gt; update s_emp set first_name=&#x27;Car_men&#x27; where id=1;mysql&gt; update s_emp set first_name=&#x27;Ma_rk&#x27; where id=4; 需求 - 查询first_name中包含_的员工信息 12345678mysql&gt; select first_name from s_emp where first_name like &#x27;%_%&#x27;;默认的转义字符mysql&gt; select first_name from s_emp where first_name like &#x27;%\\_%&#x27;;自定义转义字符mysql&gt; select first_name from s_emp where first_name like &#x27;%?_%&#x27; escape &#x27;?&#x27;; 列的拼接功能 s_emp表中first_name[名]和last_name[姓] db设计满足三大范式.第一范式保证列的原子性 - 列不可再分割. 姓名 -姓一列+名一列 123-- 拼接的过程也使用到了内置函数concat(...) - 可变长列表mysql&gt; select concat(last_name,&#x27; &#x27;,first_name) 姓名 from s_emp; 排序 123456-- 排序的语法SELECT 列1,列2,列nFROM 表名[WHERE 条件表达式][ORDER BY 列名] [asc | desc]; 练习 查看员工的信息,找出工资大于1200的,并且根据salary来升序 order by + 列的名称 123-- asc可以省略不写mysql&gt; select first_name,salary from s_emp where salary&gt;1200 order by salary; 123-- 如果是降序的,desc不能省略的mysql&gt; select first_name,salary from s_emp where salary&gt;1200 order by salary desc; order by + 列的序号 - 推荐使用的. 列的序号是查询语句中的列的序号,列的序号是从1开始的 12mysql&gt; select first_name,salary from s_emp where salary&gt;1200 order by 2; order by + 列别名 12mysql&gt; select first_name,salary _sal from s_emp where salary&gt;1200 order by _sal desc; 查看员工的信息,找出工资大于1200的,并且根据salary来降序.如果salary一样,那么继续根据first_name来进行一个升序. 12mysql&gt; select first_name,salary from s_emp where salary&gt;1200 order by 2 desc,1; 找出年薪高于21000的员工的信息[包括提成的],并且根据年薪降序排. 12mysql&gt; select first_name,salary*12*(1+coalesce(commission_pct,0)/100) year_salary from s_emp where salary*12*(1+coalesce(commission_pct,0)/100)&gt;21000 order by 2 desc; 为高级查询作个铺垫 - 子查询语法 - 精髓 - 就是把查询语句得到的表看成是真正的”临时表”. 123-- 分解 - &quot;临时表&quot;select first_name,salary*12*(1+coalesce(commission_pct,0)/100) year_salary from s_emp 1234-- 整合-- select * from (另外一个查询语句) 表别名select * from (select first_name,salary*12*(1+coalesce(commission_pct,0)/100) year_salary from s_emp) core_ where year_salary&gt;21000 order by 2 desc; 高级查询-part01 - 最关键 多表查询,表和表之间的关系 - 通过外键列来维护的. RDBMS专业术语 主键列 外键列 - 确定好外键列是进行多表查询的前提,通常外键列是交给多的一方进行维护的 关联查询传统的写法 如果没有直接关系的俩张表,它们是不能够直接进行一个join操作. 错误的写法❌ - 笛卡尔积 12345678910-- 查询员工(s_emp)的id,first_name以及这个员工所在的部门(s_dept)的id以及部门的名称mysql&gt; select id,first_name,id,name from s_emp,s_dept; ERROR 1052 (23000): Column &#x27;id&#x27; in field list is ambiguous 如果查询的结果中出现多个表中同名的列,请你给表取别名,通过表别名.列名mysql&gt; select e.id,e.first_name,d.id,d.name from s_emp e,s_dept as d; 总共出现了300条 = 25 * 12 进行筛选 - 去除错误的笛卡尔积 12mysql&gt; select e.id,e.first_name,d.id,d.name from s_emp e,s_dept as d where e.dept_id = d.id; 练习 3-1. 找出外键列 3-2. 去除笛卡尔积 123456-- 找出区域在&#x27;Asia&#x27;的所有的员工信息mysql&gt; select e.first_name,r.name from s_emp e,s_dept d,s_region r where r.name=&#x27;Asia&#x27; and r.id = d.region_id and e.dept_id=d.id; -- 缺点 - 如果表的数量一旦增多,发现哪些表和哪些之间是否有直接的关系.我们体验不会太好 查看学生的姓名,课程的名字,以及该课程授课的老师的名字以及该学生在这门课的得分情况 student,course,teacher,sc 12mysql&gt;select s.sname,c.cname,t.tname,_sc.score from student s,course c,teacher t,sc _sc where _sc.sid = s.id and _sc.cid = c.id and c.tid = t.id; join+on写法 表 join 表 on 一的一方的主键 = 多的一方的外键. on的目的不是为了进行条件筛选 - 目的去除笛卡尔积 只要具有直接关系的俩张表才能够使用join进行连接 内连接 - 默认的inner join,但是inner可以省略不写 123-- 查询部门id为31的部门名称以及该部门下的员工的名字和薪水mysql&gt; select d.id,d.name,e.first_name,e.salary from s_emp e join s_dept d on e.dept_id = d.id where d.id=31; 123-- 找出区域在&#x27;Asia&#x27;的所有的员工信息mysql&gt; select r.name,e.first_name from s_region r join s_dept d on r.id = d.region_id join s_emp e on d.id = e.dept_id where r.name=&#x27;Asia&#x27;; 123-- 李老师的授课情况信息,包括教的学生的姓名,课程的名字,以及该课程授课的老师的名字以及该学生在这门课的得分情况mysql&gt; select t.tname,s.sname,c.cname,_sc.score from student s join sc _sc on s.id = _sc.sid join course c on c.id = _sc.cid join teacher t on t.id = c.tid where t.tname like &#x27;李%&#x27;; 123-- 查看顾客的id,姓名以及该顾客拥有的订单信息[订单所有列]mysql&gt; select c.id,c.name,o.* from s_customer c join s_ord o on c.id = o.customer_id; 123-- 查看所有区域,以及这个区域上的部门信息mysql&gt; select r.name,d.* from s_region r join s_dept d on d.region_id = r.id; 左连接和右连接 内连接 - inner join 查看顾客的id,姓名以及该顾客拥有的订单id - 拥有订单的客户才能够被查询出来 - inner join 1234567891011121314151617181920212223242526272829mysql&gt;select c.id,c.name,o.id oid from s_customer c inner join s_ord o on c.id = o.customer_id;-- 总共查询得到16条数据-- inner join - 结果中少掉了207和215俩个客户 - 因为查看订单表s_ord,发现这俩个人就没有订单信息-- inner join - 内连接的写法,A表 join B表 - 如果A表中的记录在B表中不存在.那么关联查询之后.这个在B表中不存在的A表中的-- 这个记录也同样不会被关联查询出来.mysql&gt; select c.id,c.name,o.id oid from s_customer c inner join s_ord o on c.id = o.customer_id;+-----+----------------------------+-----+| id | name | oid |+-----+----------------------------+-----+| 201 | Unisports | 97 || 202 | OJ Atheletics | 98 || 203 | Delhi Sports | 99 || 204 | Womansport | 100 || 205 | Kam&#x27;s Sporting Goods | 101 || 206 | Sportique | 102 || 208 | Muench Sports | 103 || 208 | Muench Sports | 104 || 209 | Beisbol Si! | 105 || 210 | Futbol Sonora | 106 || 211 | Kuhn&#x27;s Sports | 107 || 212 | Hamada Sport | 108 || 213 | Big John&#x27;s Sports Emporium | 109 || 214 | Ojibway Retail | 110 || 204 | Womansport | 111 || 210 | Futbol Sonora | 112 |+-----+----------------------------+-----+16 rows in set (0.00 sec) 分析 123456789101112131415161718192021222324252627282930313233343536373839404142434445mysql&gt; select c.id,c.name from s_customer c;+-----+----------------------------+| id | name |+-----+----------------------------+| 201 | Unisports || 202 | OJ Atheletics || 203 | Delhi Sports || 204 | Womansport || 205 | Kam&#x27;s Sporting Goods || 206 | Sportique || 207 | Sweet Rock Sports || 208 | Muench Sports || 209 | Beisbol Si! || 210 | Futbol Sonora || 211 | Kuhn&#x27;s Sports || 212 | Hamada Sport || 213 | Big John&#x27;s Sports Emporium || 214 | Ojibway Retail || 215 | Sporta Russia |+-----+----------------------------+15 rows in set (0.00 sec)mysql&gt; select o.id,o.customer_id from s_ord o;+-----+-------------+| id | customer_id |+-----+-------------+| 97 | 201 || 98 | 202 || 99 | 203 || 100 | 204 || 101 | 205 || 102 | 206 || 103 | 208 || 104 | 208 || 105 | 209 || 106 | 210 || 107 | 211 || 108 | 212 || 109 | 213 || 110 | 214 || 111 | 204 || 112 | 210 |+-----+-------------+16 rows in set (0.00 sec) 左连接 - left join A表 join B表 - 以left join左边的表为基准表.右边的表非基准表.如果基准表中的记录在非基准表不存在.但是也能够查询出来. 如果这个客户没有订单信息,那么也要将这个客户的信息查询出来 1234567891011121314151617181920212223242526mysql&gt; select c.id,c.name,o.id oid from s_customer c left join s_ord o on c.id = o.customer_id;+-----+----------------------------+------+| id | name | oid |+-----+----------------------------+------+| 201 | Unisports | 97 || 202 | OJ Atheletics | 98 || 203 | Delhi Sports | 99 || 204 | Womansport | 100 || 205 | Kam&#x27;s Sporting Goods | 101 || 206 | Sportique | 102 || 208 | Muench Sports | 103 || 208 | Muench Sports | 104 || 209 | Beisbol Si! | 105 || 210 | Futbol Sonora | 106 || 211 | Kuhn&#x27;s Sports | 107 || 212 | Hamada Sport | 108 || 213 | Big John&#x27;s Sports Emporium | 109 || 214 | Ojibway Retail | 110 || 204 | Womansport | 111 || 210 | Futbol Sonora | 112 || 207 | Sweet Rock Sports | NULL || 215 | Sporta Russia | NULL |+-----+----------------------------+------+18 rows in set (0.00 sec) 右连接 - right join A表 join B表 - 以right join右边的表为基准表.左边的表非基准表.如果基准表中的记录在非基准表不存在.但是也能够查询出来. 12select c.id,c.name,o.id oid from s_ord o right join s_customer c on c.id = o.customer_id; 自关联 - 自己关联自己 – 员工s_emp表中的manager_id - 上司的id -&gt; 绑定的就是s_emp表中的id 1234567891011121314151617181920212223242526272829303132mysql&gt; select id,first_name,manager_id from s_emp;+----+------------+------------+| id | first_name | manager_id |+----+------------+------------+| 1 | Car_men | NULL || 2 | LaDoris | 1 || 3 | Midori | 1 || 4 | Ma_rk | 1 || 5 | Audry | 1 || 6 | Molly | 2 || 7 | Roberta | 2 || 8 | Ben | 2 || 9 | Antoinette | 2 || 10 | Marta | 2 || 11 | Colin | 3 || 12 | Henry | 3 || 13 | Yasmin | 3 || 14 | Mai | 3 || 15 | Andre | 3 || 16 | Elena | 6 || 17 | George | 6 || 18 | Akira | 7 || 19 | Vikram | 7 || 20 | Chad | 8 || 21 | Alexander | 8 || 22 | Eddie | 9 || 23 | Radha | 9 || 24 | Bela | 10 || 25 | Sylvie | 10 |+----+------------+------------+25 rows in set (0.00 sec) 练习 1234-- 查询员工的名字,以及这个员工的上司的名字 - 一个上司拥有多个下属的.-- 效果:这个员工没有上司,也要能够查询出来.mysql&gt; select e1.first_name 员工名字,e2.first_name 上司 from s_emp e1 left join s_emp e2 on e2.id = e1.manager_id 分组查询 SELECT 语句 WHERE 语句 GROUP BY 语句 [HAVING 组函数判断] ORDER BY语句 多行函数 count函数 - 统计个数 123456789101112131415-- 统计s_emp的员工的个数mysql&gt; select count(*) from s_emp;-- 除了可以写*,那么还可以推荐写idmysql&gt; select count(e.id) from s_emp e;-- 重复的数据也算1个mysql&gt; select count(title) from s_emp;-- 统计职称,重复的数据,只要统计一次mysql&gt; select count(distinct title) from s_emp;-- 如果遇到null值,忽略null值的统计mysql&gt; select count(commission_pct) from s_emp; avg,sum,min,max - 忽略null值 123-- 统计学生的得分情况mysql&gt;select avg(score),sum(score),min(score),max(score) from sc; group by 统计各个部门编号,以及这个部门的员工的数量 12mysql&gt; select dept_id,count(*) from s_emp group by dept_id; 统计部门人数大于等于3的部门的编号以及人数信息 条件是分组之后得到的,所以不能使用where语句,where语句是出现在group by分组之前的.一定是用having语句来进行判断 having后面一定只能跟组函数的判断 12mysql&gt; select dept_id,count(*) from s_emp group by dept_id having count(*)&gt;=3; 统计部门[41,42,43]人数大于等于4的部门的编号以及人数信息 12mysql&gt; select dept_id,count(*) from s_emp where dept_id in(41,42,43) group by dept_id having count(*)&gt;=4; 统计部门[41,42,43]人数大于等于3的部门的编号以及人数信息,并且根据部门编号降序排列 12mysql&gt; select dept_id,count(*) from s_emp where dept_id in(41,42,43) group by dept_id having count(*)&gt;=3 order by 1 desc; 分组练习 经常分组统计 - 分组+统计.也是可以只进行分组的动作. 123456-- 统计每个职称的人数 - 分组+统计了mysql&gt; select title,count(id) from s_emp group by title; -- 只是分组 - 除了可以使用distinct来去重.那么我们也可以直接使用分组进行去重.mysql&gt; select title from s_emp group by title; 统计部门的名称,编号以及该部门上的员工的数量 123456789101112mysql&gt; select d.id,d.name,count(e.id) from s_emp e join s_dept d on e.dept_id = d.id group by d.id,d.name; -- 注意点,写group by 容易发生错误的地方.-- mysql5.7以后对group by的写法要求变得高了.推荐.-- 如果select后面除了存在组函数以外,还存在其他列.那么group by后面的列一定要和select后面的列高度保持一致.-- 1. select 列1,列2,组函数 from 表 group by 列1,列2-- 但是如果select后面只有组函数select count(e.id) from s_emp e join s_dept d on e.dept_id = d.id group by d.id; 统计每个客户的订单数量[超过1的统计出来],没有订单的客户也要能够统计出来 12mysql&gt; select c.id,c.name,count(o.id) from s_customer c left join s_ord o on c.id = o.customer_id group by c.id,c.name having count(o.id)&gt;1; 统计每个区域的部门的数量 12mysql&gt; select r.id,r.name,count(d.id) from s_region r join s_dept d on r.id = d.region_id group by r.id,r.name; 统计每个区域上的员工的数量 123mysql&gt;select r.name,r.id,count(e.id) from s_region r join s_dept d on r.id = d.region_id join s_emp eon e.dept_id = d.id group by r.name,r.id; 统计每个学生的课程的总分,平均分 123456mysql&gt; select v.sid,sum(v.score),avg(v.score) from sc v group by v.sid;-- 统计每个学生的id,姓名以及他的课程的总分,平均分mysql&gt; select s.id,s.sname,sum(v.score),avg(v.score) from student s left join sc v on s.id = v.sidgroup by s.id,s.sname; 统计每个老师授课的课程的数量 12mysql&gt; select t.id,t.tname,count(c.id) from teacher t join course c on t.id = c.tid group by t.id,t.tname; 统计每个课程的最低分,最高分,平均分 123mysql&gt; select c.id,c.cname,min(v.score),max(v.score),avg(v.score) from course c join sc v on c.id = v.cid group by c.id,c.cname; 统计李老师的学生数量 12345mysql&gt; select t.id,t.tname,count(v.sid) from teacher t join course c on t.id = c.tidjoin sc v on v.cid = c.id where t.tname like &#x27;李%&#x27;group by t.id,t.tname; 子查询 - 最难的 子查询是效率不如关联查询.但是子查询更加灵活.能用关联查询解决的查询,肯定也是可以通过子查询去解决. 但是子查询可以解决关联查询解决的查询.使用原则优先使用关联查询. 注意点:子查询必须要使用()括号 三个维度 子查询作为外部查询的列. 子查询作为外部查询的where语句中 子查询可以看做是一张”虚拟表/临时表”,可以对这个”虚拟表”再次进行查询. ###子查询作为外部查询的where语句中 1234567891011-- 查询和&#x27;Ben&#x27;在同一个部门的员工first_name,dept_id;-- 分解 - 找出&#x27;Ben&#x27;的部门idmysql&gt; select dept_id from s_emp where first_name=&#x27;Ben&#x27;;//43-- 找出43部门的所有的员工,但是不包含Benmysql&gt; select first_name,dept_id from s_emp where first_name!=&#x27;Ben&#x27; and dept_id=43;-- 整合到一块儿mysql&gt; select first_name,dept_id from s_emp where first_name!=&#x27;Ben&#x27; and dept_id=(select dept_id from s_emp where first_name=&#x27;Ben&#x27;); 子查询作为外部查询的列 1234-- 查询客户的id,客户的姓名,以及该客户的订单个数mysql&gt; select c.id,c.name,(select count(o.customer_id) from s_ord o where c.id=o.customer_id) 订单数量from s_customer c; 123-- 查询部门的id,部门的名称,以及这个部门上的员工的个数mysql&gt; select d.id,d.name,(select count(e.id) from s_emp e where e.dept_id = d.id) 员工数 from s_dept d; ###子查询可以看做是一张”虚拟表/临时表”,可以对这个”虚拟表”再次进行查询. 使用场景最多的子查询 1234567891011121314151617181920212223-- 用子查询来实现 - 查询和&#x27;Ben&#x27;在同一个部门的员工first_name,dept_id-- (select e.dept_id from s_emp e1 where e1.first_name=&#x27;Ben&#x27;)结果必须返回单个值mysql&gt; select e.first_name,(select e.dept_id from s_emp e1 where e1.first_name=&#x27;Ben&#x27;) from s_emp e;和下面的这个效果是一样的mysql&gt; select e.first_name,e.dept_id from s_emp e;-- 修改-- 思路 e.first_name,子查询e.dept_id - 判断成立 - 有值,否则为null-- e.dept_id是否和&#x27;Ben&#x27;是一个部门的.select e.first_name,(select e.dept_id from s_emp e1 where e1.first_name=&#x27;Ben&#x27; and e.dept_id=e1.dept_id) didfrom s_emp e;-- 把上面的查询的结果作为&quot;虚拟表&quot; - 别名 - core_select * from ( select e.first_name,(select e.dept_id from s_emp e1 where e1.first_name=&#x27;Ben&#x27; and e.dept_id=e1.dept_id) did from s_emp e) core_ where core_.did is not null and core_.first_name&lt;&gt;&#x27;Ben&#x27;; exists和not exists用法 exists - 是否存在.只要存在,那么就返回true - 顺利被查询出来 not exists - 不存在 如果是false,反而会被顺利查询出来 案例 12345-- exists(子查询 - 如果有结果,返回true,否则返回false)mysql&gt;select first_name from s_emp where exists(select 1 from s_emp where 1=1);mysql&gt;select first_name from s_emp where not exists(select 1 from s_emp where 1=2); 练习 - salary是不重复的 查询和’Ben’在同一个部门的员工first_name,dept_id 1234mysql&gt; select e.first_name,e.dept_id from s_emp e where exists(select 1 from s_emp e1 where e1.first_name=&#x27;Ben&#x27; and e1.dept_id=e.dept_id) and e.first_name&lt;&gt;&#x27;Ben&#x27;; 找出各个部门工资排名前二的员工 “e-我”这个部门中,如果还有人工资比我高.那么这个数量不能超过1个. 12345mysql&gt; select e.dept_id,e.first_name,e.salary from s_emp e where exists( select 1 from s_emp e1 where e.dept_id = e1.dept_id and e1.salary&gt;e.salary having count(*)&lt;=1) order by 1; not exists来实现的 123456不存在&#x27;我e&#x27;这个部门中,有人的工资比我高.并且这个数量超过1个.mysql&gt; select e.dept_id,e.first_name,e.salary from s_emp e where not exists( select 1 from s_emp e1 where e.dept_id = e1.dept_id and e1.salary&gt;e.salary having count(*)&gt;1) order by 1; 找出各个部门中工资最高的 12345mysql&gt; select e.dept_id,e.first_name,e.salary from s_emp e where not exists( select 1 from s_emp e1 where e.dept_id = e1.dept_id and e1.salary&gt;e.salary having count(*)&gt;0) order by 1; mysql 单行函数 - 了解即可 第一个作业 - 字符串函数+数字函数+日期函数[能有多少] - mysql_function.md 字符串函数 instr(str,substr) - 返回字符串substr在字符串str第一次出现的位置(str不包含substr时返回0) mysql下标索引从1开始的 12mysql&gt;select instr(&#x27;ppopo&#x27;,&#x27;o&#x27;);//3,找不到则返回0 lpad(str,len,padstr) - 用字符串padstr填补str左端直到字串长度为len并返回 rpad(str,len,padstr) - 用字符串padstr填补str右端直到字串长度为len并返回 123456mysql&gt;select rpad(&#x27;abc&#x27;,6,&#x27;do&#x27;);//abcdodmysql&gt;select rpad(&#x27;吴亦凡&#x27;,10,&#x27;*&#x27;);//-- oracle数据库rpad函数 - 遇到汉字,一个汉字是占3个长度吴亦凡* left(str,len) - 返回字符串str的左端len个字符 right(str,len) - 返回字符串str的右端len个字符 substring(str,pos,len) - 返回字符串str的位置pos起len个字符 substring(str,pos) - 返回字符串str的位置pos起后面的子串 ltrim(str) - 返回删除了左空格的字符串str rtrim(str) - 返回删除了右空格的字符串str space(n) - 返回由n个空格字符组成的一个字符串 replace(str,from_str,to_str) - 用字符串to_str替换字符串str中的子串from_str并返回 reverse(str) - 颠倒字符串str的字符顺序并返回 insert(str,pos,len,newstr) - 把字符串str由位置pos起len个字符长的子串替换为字符串 12mysql&gt;select insert(&#x27;Carmen&#x27;,2,5,&#x27;*****&#x27;); lower(str) - 返回小写的字符串str upper(str) - 返回大写的字符串str char_length(str) - 不管汉字还是数字或者是字母都算是一个字符。 length(str);//汉字占3个,其他占1个. 列中的应用12345678910111213141516171819202122232425262728293031-- 将first_name列的数据全部反转mysql&gt; select first_name,reverse(first_name) from s_emp;-- 这些函数是允许嵌套使用的mysql&gt; select first_name,upper(reverse(first_name)) from s_emp;-- 练习 - 模拟银行账户的输出方式-考虑该列是中文的情况.-- 查询效果-- Car_men C******-- 吴亦凡 吴**-- Mark M**-- concat函数 - 字符串的拼接mysql&gt; select first_name,concat(substring(first_name,1,1),rpad(&#x27;*&#x27;,char_length(first_name)-1,&#x27;*&#x27;)) 显示账户 from s_emp;-- replace函数-- replace(str,oldStr,newStr);mysql&gt; select first_name,replace(first_name,substring(first_name,2),rpad(&#x27;*&#x27;,char_length(first_name)-1,&#x27;*&#x27;)) 账户 from s_emp;-- 直接使用rpad函数-- rpad(str,拼接之后总的长度,appendStr);mysql&gt;select first_name,rpad(substring(first_name,1,1),char_length(first_name),&#x27;*&#x27;) 账户 from s_emp;-- 使用insert函数-- insert(str,pos,len,newstr) - 把字符串str由位置pos起len个字符长的子串替换为字符串-- insert函数的基本使用mysql&gt; select insert(&#x27;abcde&#x27;,2,3,&#x27;*&#x27;);//a*emysql&gt; select first_name,insert(first_name,2,char_length(first_name)-1,rpad(&#x27;*&#x27;,char_length(first_name)-1,&#x27;*&#x27;)) 账户 from s_emp; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455剖析一下 - s_customer表phone列最后一个&#x27;-&#x27;后面的phone的数字.mysql&gt; select phone,reverse(phone) from s_customer;+----------------+----------------+| phone | reverse(phone) |+----------------+----------------+| 55-2066101 | 1016602-55 || 81-20101 | 10102-18 || 91-10351 | 15301-19 || 1-206-104-0103 | 3010-401-602-1 || 852-3692888 | 8882963-258 || 33-2257201 | 1027522-33 || 234-6036201 | 1026306-432 || 49-527454 | 454725-94 || 809-352689 | 986253-908 || 52-404562 | 265404-25 || 42-111292 | 292111-24 || 20-1209211 | 1129021-02 || 1-415-555-6281 | 1826-555-514-1 || 1-716-555-7171 | 1717-555-617-1 || 7-3892456 | 6542983-7 |+----------------+----------------+instr(str,substr);//从左到右查找substr在str中第一次出现的位置mysql&gt; select instr(reverse(phone),&#x27;-&#x27;) from s_customer;-- 取出&#x27;-&#x27;左边的元素left(str,len) - 返回字符串str的左端len个字符mysql&gt; select phone,left(reverse(phone),instr(reverse(phone),&#x27;-&#x27;)-1) from s_customer;+----------------+--------------------------------------------------+| phone | left(reverse(phone),instr(reverse(phone),&#x27;-&#x27;)-1) |+----------------+--------------------------------------------------+| 55-2066101 | 1016602 || 81-20101 | 10102 || 91-10351 | 15301 || 1-206-104-0103 | 3010 || 852-3692888 | 8882963 || 33-2257201 | 1027522 || 234-6036201 | 1026306 || 49-527454 | 454725 || 809-352689 | 986253 || 52-404562 | 265404 || 42-111292 | 292111 || 20-1209211 | 1129021 || 1-415-555-6281 | 1826 || 1-716-555-7171 | 1717 || 7-3892456 | 6542983 |+----------------+--------------------------------------------------+-- 继续反转mysql&gt; select phone,reverse(left(reverse(phone),instr(reverse(phone),&#x27;-&#x27;)-1)) from s_customer; 数字函数 abs(n) - 求绝对值 mod(n,m) - 取模运算,返回n被m除的余数(同%操作符) floor(n) - 返回不大于n的最大整数值 - 向下取整 ceiling(n) - 返回不小于n的最小整数值 - 向上取整 round(n[,d]) - 返回n的四舍五入值,保留d位小数(d的默认值为0) 1234mysql&gt;select round(3.5);mysql&gt;select round(3.456,2);//3.46 pow(x,y) - 返回值x的y次幂 sqrt(n) - 返回非负数n的平方根 pi() - 返回圆周率 rand() - 返回在范围**[0到1.0)**内的随机浮点值 truncate(n,d) - 保留数字n的d位小数并返回 - 直接截取 练习 求1~3之间的随机整数 123mysql&gt; select floor(rand()*3+1);mysql&gt; select truncate(rand()*3+1,0); 计算年薪 - 保留小数点2位 12select first_name,truncate(salary*12*(1+coalesce(commission_pct,0)/100),2) 年薪 from s_emp; 日期函数 查询当前系统的日期 - select now(); dayofweek(date) - 返回日期date是星期几(1=星期天,2=星期一,……7=星期六,odbc标准) weekday(date) - 返回日期date是星期几(0=星期一,1=星期二,……6= 星期天) year(date) - 返回date的年份(范围在1000到9999) month(date) - 返回date中的月份数值 dayofmonth(date) - 返回date是一月中的第几日(在1到31范围内) hour(time) - 返回time的小时数(范围是0到23) minute(time) - 返回time的分钟数(范围是0到59) second(time) - 返回time的秒数(范围是0到59) period_add(p,n) - 增加n个月到时期p并返回(p的格式yymm或yyyymm) 12345mysql&gt; select period_add(&#x27;202108&#x27;,3);-- 需求把s_emp表中的start_date往后延1个月mysql&gt; select start_date,period_add(date_format(start_date,&#x27;%Y%m&#x27;),1) from s_emp; 注意:p可以是字符串,一定要满足一定的格式,或者可以直接使用date类型. period_diff(p1,p2) - 返回在时期p1和p2之间月数(p1和p2的格式yymm或yyyymm) p1-p2 curdate() - 以’yyyy-mm-dd’或yyyymmdd格式返回当前日期值(根据返回值所处上下文是字符串或数字) curtime() - 以’hh:mm:ss’或hhmmss格式返回当前时间值(根据返回值所处上下文是字符串或数字) now() - 以’yyyy-mm-dd hh:mm:ss’或yyyymmddhhmmss格式返回当前日期时间(根据返回值所处上下文是字符串或数字) last_day(date) - date日期所在月的最后一天是什么时候 datediff(d1,d2) - 两个日期d1,d2之间相差的天数 timestampdiff(type,d1,d2) - type - year,month,day… mysql中,虽然日期date_format函数来转成字符串类型的,mysql内部为了简化我们的写法,有的时候有的函数. 只要你传入的字符串满足一定的格式,那么它就会自动被转成日期函数. 补充123456789101. date_add(date,interval n type)2. date_sub(date,interval n type)type:yearmonthdayhourminutesecond 日期格式化 date_format(date,format) - 把日期转换成指定模板的字符串. 根据format字符串格式化date值 (在format字符串中可用标志符: %m 月名字(january……december) %w 星期名字(sunday……saturday) %d 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。） %Y 年, 数字, 4 位 %y 年, 数字, 2 位 %a 缩写的星期名字(sun……sat) %d 月份中的天数, 数字(00……31) %e 月份中的天数, 数字(0……31) %m 月, 数字(01……12) %c 月, 数字(1……12) %b 缩写的月份名字(jan……dec) %j 一年中的天数(001……366) %H 24时制小时(00……23) %k 小时(0……23) %h 12时小时(01……12) %i 小时(01……12) %l 小时(1……12) %i 分钟, 数字(00……59) %r 时间,12 小时(hh:mm:ss [ap]m) %t 时间,24 小时(hh:mm:ss) %s 秒(00……59) %p am或pm %w 一个星期中的天数(0=sunday ……6=saturday ） demo12mysql&gt; select start_date,date_format(start_date,&#x27;%Y-%m-%d %H:%i:%s&#x27;) from s_emp; 日期练习 找出员工的工作月数 - 和当前的日比较的 12mysql&gt; select first_name,start_date,timestampdiff(month,start_date,now()) 月份 from s_emp; 查询员工的工作天数 1234mysql&gt; select first_name,start_date,timestampdiff(day,start_date,now()) 天数 from s_emp;mysql&gt; select first_name,start_date,abs(datediff(start_date,now())) 天数 from s_emp; 计算一年前,当前,一年后的日期 date_add(date,interval n type) date_sub(date,interval n type) 1234mysql&gt; select date_sub(now(),interval 1 year) 一年前,now() 当前,date_add(now(),interval 1 year) 一年后;mysql&gt; select date_add(now(),interval -12 month) 一年前,now() 当前,date_add(now(),interval 12 month) 一年后; 当前日期前6个月的最后一天 12mysql&gt; select last_day(date_sub(now(),interval 6 month)); 把员工的入职日期格式化为年/月/日 12345mysql&gt; select start_date,date_format(start_date,&#x27;%Y-%m-%d&#x27;) from s_emp;-- 1990年05月03日mysql&gt; select start_date,date_format(start_date,&#x27;%Y年%m月%d日&#x27;) from s_emp; 找出5月份入职的员工 12mysql&gt; select first_name,start_date from s_emp where month(start_date)=5; 类型的转换日期转字符串 数据查询出来之后显示用的. date_format(date,模板); 字符串转日期 插入数据的时候,需要将日期列的字符串转换成日期类型,才能够插入到date类型列. mysql中只要你的字符串满足默认支持的格式.那么就会默认转成date类型. 12345678910-- date列insert into test_date values(3,&#x27;xx&#x27;,&#x27;2019-09-08&#x27;);//ok &#x27;2019-09-08&#x27;insert into test_date values(4,&#x27;xx&#x27;,&#x27;2019/10/08&#x27;);//ok &#x27;2019/10/08&#x27;insert into test_date values(5,&#x27;xx&#x27;,&#x27;20191105&#x27;);//ok &#x27;20191105&#x27;insert into test_date values(5,&#x27;xx&#x27;,&#x27;2018-11-05 13:08:09&#x27;);//ok假设如果指定的是一个非法的字符串模板mysql&gt; insert into test_date values(5,&#x27;xx&#x27;,&#x27;05/11/2023&#x27;);ERROR 1292 (22007): Incorrect date value: &#x27;05/11/2023&#x27; for column &#x27;d1&#x27; at row 1 解决一个非法模板的字符串 - mysql不能把这个形式的字符串自动转换成date/datetime类型 str_to_date(str,pattern) 1234str的格式也必须要和pattern是匹配 - 实现str-date类型的转换 mysql&gt; insert into test_date values(6,&#x27;xx&#x27;,str_to_date(&#x27;05/11/2023&#x27;,&#x27;%d/%m/%Y&#x27;)); date和datetime date - 年月日 datetime - 年月日时分秒 mysql中列如果是一个日期,常用的俩个类型分别是date和datetime 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051drop table test_date;create table test_date( id int(7), name varchar(20), d1 date);-- 插入数据insert into test_date values(1,&#x27;admin&#x27;,now());-- 插入指定的日期到表中mysql&gt; insert into test_date values(5,&#x27;xx&#x27;,&#x27;20191105&#x27;);-- 列是date,但是插入数据包含时分秒的mysql&gt; insert into test_date values(5,&#x27;xx&#x27;,&#x27;2018-11-05 13:08:09&#x27;);-- 查询出来的d1列的内容默认显示的日期的格式%Y-%m-%dmysql&gt; select * from test_date;+------+-------+------------+| id | name | d1 |+------+-------+------------+| 1 | admin | 2021-08-17 |+------+-------+------------+drop table test_datetime;create table test_datetime( id int(7), name varchar(20), d1 datetime);insert into test_datetime values(1,&#x27;tom&#x27;,now());-- 效果,如果列设置成了datetime,查询出来的模板是-%Y-%m-%d %H:%i:%smysql&gt; select * from test_datetime;+------+------+---------------------+| id | name | d1 |+------+------+---------------------+| 1 | tom | 2021-08-17 10:12:18 |+------+------+---------------------+-- 插入一个指定的日期 - 仅仅包含年月日mysql&gt; insert into test_datetime values(5,&#x27;xx&#x27;,&#x27;2019-09-08&#x27;);-- 时分秒是自动归05 | xx | 2019-09-08 00:00:00 mysql&gt;insert into test_datetime values(5,&#x27;xx&#x27;,&#x27;2019/09/08 13:12:18&#x27;);5 | xx | 2019-09-08 13:12:18","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"反射","slug":"反射","date":"2021-08-15T05:55:17.000Z","updated":"2021-08-15T05:56:06.098Z","comments":true,"path":"2021/08/15/反射/","link":"","permalink":"http://example.com/2021/08/15/%E5%8F%8D%E5%B0%84/","excerpt":"","text":"反射定义 反射式编程（英语：reflective programming）或反射（英语：reflection)或者内省 是指计算机程序在运行时可以访问、检测和修改它本身状态或行为的一种能力。[1]用比喻来说，反射就是程序在运行的时候能够“观察”并且修改自己的行为。 “通俗讲” - 通过反射技术在程序的运行过程中,来获取类/接口的信息[修饰符,类的名称,父类],属性的信息[修饰符,数据类型,属性名],方法的信息[修饰符,数据类型,名称]等. 在运行的时候才知道我操作的是哪个类 掌握目标: 3-1. 通过反射技术来动态获取属性的信息以及操作属性[反射的技术来对属性的值进行设置和获取] 3-2. 通过反射技术来动态调用类中的构造方法以及获取构造方法的信息[修饰符,方法名,参数列表] 3-3. 通过反射技术来动态获取类里面的方法的信息[修饰符,数据类型,方法名以及方法参数列表]以及反射调用方法 api包 - java.lang.reflect 反射优势 - “很流氓” - 破坏封装性. 学好反射和设计模式 - 帮助我们未来来读懂一些框架源码的.所有的框架的底层都是基于反射技术来实现的. java.lang.Class class实例 - 一个类无论被实例化多少次,那么它在JVM中的class实例永远只有1个. 它是学习反射技术的必备的类 - 提供了很多api来完成掌握目标中的动作. 所有被类加载器加载到内存中的类都是属于Class的对象 - Class类是用来描述类的类[用来描述类的元信息] 我们的类在Class面前,就是一个Class的对象而已 反射相关api Field getDeclaredField(String name);//根据属性的名称来得到Field对象 Field[] getDeclaredFields();//获取类里面所有的[包括私有的]声明的属性对应的Field数组 123只能获取到非私有的 1. Field getField(String name); 2. Field[] getFields(); String getName();//获取类的全限定名 String getSimpleName();//获取类的简称 T newInstance();//调用空参构造 Constructor getDeclaredConstructor(Class&lt;?&gt;… parameterTypes); 根据指定的参数类型来得到指定的构造对应的实例Constructor对象. 如果什么参数都不传入,拿到的就是空参构造对应的Constructor对应的实例. Constructor&lt;?&gt;[] getDeclaredConstructors(); 直接获取类中的所有的构造,每个构造对应一个Constructor. Method getDeclaredMethod(String methodName,Class&lt;?&gt;… parameterTypes); Method][] getDeclaredMethods(); 获取类的Class实例的方式 类名.class 调用java.lang.Object类提供的方法Class&lt;?&gt; getClass(); 框架底层喜欢的使用一种,更加灵活 Class类中提供的static Class&lt;?&gt; forName(“类的全限定名”);//需要抓取一个非运行时异常java.lang.ClassNotFoundException类型找不到异常 基本类型.class demo123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package tech.aistar.day16;/** * 本类用来演示: java.lang.Class&lt;T&gt; * * * @author: success * @date: 2021/8/12 10:26 上午 */public class ClassDemo &#123; public static void main(String[] args) &#123; //获取类的class实例的方式 //每个类在JVM中的class实例永远只有1个 - 无论构建了多少个对象 //1. 类名.class Class&lt;?&gt; c1 = Point.class; Class&lt;?&gt; c2 = Point.class; System.out.println(c1);//class tech.aistar.day16.Point System.out.println(c1 == c2); Class&lt;?&gt; c3 = String.class; System.out.println(c3);//class java.lang.String //2. 对象.getClass(); Point p1 = new Point(); Point p2 = new Point(); Class&lt;?&gt; c4 = p1.getClass();//对象的类型 Class&lt;?&gt; c5 = p2.getClass(); // 类型判断 对象 instanceof 类 System.out.println(c4);//class tech.aistar.day16.Point System.out.println(c4 == c5);//true //3. Class类中提供的static Class&lt;?&gt; forName(&quot;类的全限定名&quot;); //TODO... 为甚鼓励使用这种 ??? try &#123; Class&lt;?&gt; c6 = Class.forName(&quot;tech.aistar.day16.Point&quot;); System.out.println(&quot;c6:&quot;+c6);//c6:class tech.aistar.day16.Point &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; //4. 基本类型.class Class&lt;?&gt; c7 = int.class; System.out.println(c7);//int &#125;&#125; Field字段实例 java.lang.reflect.Field api int getModifiers();返回由该 Field对象表示的字段的Java语言修饰符，作为整数。 1234//默认的 - 0//public -1//private - 2//protected - 4 Class&lt;?&gt; getType();//返回属性的数据类型 String getName();//属性的名称 void set(Object obj,Object value);//通过属性对应的Field对象来告知JVM,应该把value设置到哪个obj对象上去. void setAccessible(boolean on);//反射操作私有属性,必须要设置为true,否则会抛出-java.lang.IllegalAccessException Object get(Object obj);//返回obj中属性字段的对应的属性值. Constructor构造实例调用空参构造 直接调用java.lang.Class提供的方法T newsIntance(); java.lang.reflect.Constructor提供了方法 1234public T newInstance(Object... initargs) Constructor&lt;?&gt; c1 = c.getDeclaredConstructor();Point p2 = (Point) c1.newInstance();//可变长列表的方法 调用带参构造 java.lang.reflect.Constructor - 提供的方法 public T newInstance(Object … initargs) 常用方法 int getModifiers();//获取修饰符对应的数字 String getName();//构造方法的名称 - [类的全限定名] void setAccessible(boolean on);//如果设置true,直接调用私有的的构造方法 1反射可以破坏单例 Modifier java.lang.reflect 传入一个修饰符对应的数字,来返回修饰的具体的中文的名称 1234567891011121314151617181920212223public static String toString(int mod) &#123; StringBuilder sb = new StringBuilder(); int len; if ((mod &amp; PUBLIC) != 0) sb.append(&quot;public &quot;); if ((mod &amp; PROTECTED) != 0) sb.append(&quot;protected &quot;); if ((mod &amp; PRIVATE) != 0) sb.append(&quot;private &quot;); /* Canonical order */ if ((mod &amp; ABSTRACT) != 0) sb.append(&quot;abstract &quot;); if ((mod &amp; STATIC) != 0) sb.append(&quot;static &quot;); if ((mod &amp; FINAL) != 0) sb.append(&quot;final &quot;); if ((mod &amp; TRANSIENT) != 0) sb.append(&quot;transient &quot;); if ((mod &amp; VOLATILE) != 0) sb.append(&quot;volatile &quot;); if ((mod &amp; SYNCHRONIZED) != 0) sb.append(&quot;synchronized &quot;); if ((mod &amp; NATIVE) != 0) sb.append(&quot;native &quot;); if ((mod &amp; STRICT) != 0) sb.append(&quot;strictfp &quot;); if ((mod &amp; INTERFACE) != 0) sb.append(&quot;interface &quot;); if ((len = sb.length()) &gt; 0) /* trim trailing space */ return sb.toString().substring(0, len-1); return &quot;&quot;;&#125; 拓展应用反射可以破坏单例 反射破坏不了枚举单例 12345678910111213141516171819202122232425262728293031323334353637383940414243package tech.aistar.day16;import tech.aistar.design.singleton.version03.Singleton03;import tech.aistar.design.singleton.version04.Singleton04;import java.lang.reflect.Constructor;import java.lang.reflect.InvocationTargetException;/** * 本类用来演示: 反射可以破坏单例* * @author: success * @date: 2021/8/12 2:25 下午*/public class ReflectPoSingleton &#123; public static void main(String[] args) &#123; //1. 获取单例的Class实例 try &#123; Class&lt;?&gt; c = Class.forName(&quot;tech.aistar.design.singleton.version03.Singleton03&quot;); //2. 获取空参构造对应的Constructor实例 Constructor&lt;?&gt; c1 = c.getDeclaredConstructor(); //3. 调用私有的空参构造 c1.setAccessible(true); //4. 调用 Singleton03 s1 = (Singleton03) c1.newInstance(); //反射连续调用俩次私有的空参构造 Singleton03 s2 = (Singleton03) c1.newInstance(); System.out.println(s1 == s2);//false &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; catch (NoSuchMethodException e) &#123; e.printStackTrace(); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; catch (InstantiationException e) &#123; e.printStackTrace(); &#125; catch (InvocationTargetException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 为何破坏不了枚举类型单例分析-NoSuchMethodException123//记载类,初始化静态属性,调用空参构造 Class&lt;?&gt; c5 = Class.forName(&quot;tech.aistar.design.singleton.version05.Singleton05&quot;);Constructor&lt;?&gt; cc = c5.getDeclaredConstructor(); 123456789控制台效果比较繁琐的操作的事情,费时费力的事情//不存在一个空参构造的方法让我们去调用java.lang.NoSuchMethodException: tech.aistar.design.singleton.version05.Singleton05.&lt;init&gt;() at java.lang.Class.getConstructor0(Class.java:3082) at java.lang.Class.getDeclaredConstructor(Class.java:2178) at tech.aistar.day16.ReflectPoSingleton.main(ReflectPoSingleton.java:36) 控制台 hello.java 1234public enum hello&#123; INSTANCE&#125; 12345确认jdk-bin-jad.exe - 没有下载 - http://varaneckas.com/jad/javac hellojad -s java hello反编译之后出来之后 hello(String.class,int.class) 解决方案12Constructor&lt;?&gt; cc = c5.getDeclaredConstructor(String.class,int.class); 分析 - IllegalArgumentException 1234567891011//加载这个类Class&lt;?&gt; c5 = Class.forName(&quot;tech.aistar.design.singleton.version05.Singleton05&quot;);Constructor&lt;?&gt; cc = c5.getDeclaredConstructor(String.class,int.class);//java.lang.NoSuchMethodException - 抛出一个不存在这个方法cc.setAccessible(true);//Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: // Cannot reflectively create enum objectsSingleton05 s05 = (Singleton05) cc.newInstance(); 原因剖析newInstance方法 123456789101112@CallerSensitivepublic T newInstance(Object ... initargs)throws InstantiationException, IllegalAccessException,IllegalArgumentException, InvocationTargetException&#123;//判断是否为枚举类型,如果是枚举类型直接抛出了这个异常了.if ((clazz.getModifiers() &amp; Modifier.ENUM) != 0)&#123; throw new IllegalArgumentException(&quot;Cannot reflectively create enum objects&quot;);&#125;return inst;&#125; 结论 - 不允许我们用反射的技术来构建枚举类型的实例,底层会进行类型的判断,发现如果是枚举类型对应的class实例,直接抛出异常 作业 一个对象的中的所有String类型的成员变量所对应的字符串内容中的”b”改为”a” 12345678910111213141516public class Obj&#123;private int age = 10;private String s2 = &quot;b&quot;;private String name = &quot;tbm&quot;;private String s1 = &quot;adminb&quot;;//...&#125;//反射技术 - 所有字段拿出来 - Field数组中 //获取到Field的类型,判断是不是String类型//如果是String-&quot;b&quot;改为&quot;a&quot; 反射工厂 回忆工厂设计模式[GOF] 简单工厂方法,多方法工厂,静态方法工厂 - 本质上不属于GOF 工厂方法设计模式以及抽象工厂[专注于产品族] - 属于GOF 反射工厂 - 工厂类中利用反射技术来构建某个类的/接口的具体的实例. 补充Properties 属于集合框架的类 - 属于Map[I] java.util.Properties extends java.util.Hashtable[哈希表,多线程安全的] 作用:通过io流把本地的.properties文件读取到内存中,然后映射到Properties对象 Properties对象就是.properties属性文件[encoding=utf-8]在内存中的映射. File - 本地磁盘的文件在java内存中的映射的那个对象. 存储数据的格式然后是一个键值对的形式 1234# key=value - key也是不要重复的.username=tompassword=123 根据key来获取value的方法 12String getProperty(String key); demo 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package tech.aistar.day16.prop;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.util.Properties;/** * 本类用来演示: 读取Properties文件 * * @author: success * @date: 2021/8/13 8:41 上午 */public enum ReadPropDemo &#123; INSTANCE; // 定义一个Properties属性 private Properties properties; ReadPropDemo()&#123; //可以在构造方法 - 初始化的 //Properties对象就是.properties属性文件[encoding=utf-8]在内存中的映射. properties = new Properties(); //读取属性文件 //InputStream in = new FileInputStream(&quot;src/tech/aistar/day16/prop.bean.properties&quot;); //固定的语法 - 死记住 //获取属性文件字节输入流 InputStream in = Thread.currentThread() .getContextClassLoader() .getResourceAsStream(&quot;tech/aistar/day16/prop/bean.properties&quot;); //加载 try &#123; //Properties对象就是.properties属性文件[encoding=utf-8]在内存中的映射. properties.load(in); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; //普通方法 public String getValue(String key)&#123; //确认properties不为null return properties == null?null:properties.getProperty(key); &#125;&#125; 单元测试 123456789101112131415package tech.aistar.day16.prop;/** * 本类用来演示: * * @author: success * @date: 2021/8/13 8:47 上午 */public class ReadPropDemoTest &#123; public static void main(String[] args) &#123; String value = ReadPropDemo.INSTANCE.getValue(&quot;username&quot;); System.out.println(value); &#125;&#125; 反射工厂demo 简单工厂的缺点 - 如果有新的产品的加入,需要修改工厂类的 - 违背了软件开发的设计原则 - “开闭原则” 优点 - 够简单 工厂方法设计模式 - 优点:一个工厂类只负责生产一个产品,如果有新的产品的加入.不需要修改工厂类,只需要增加一个工厂类 缺点 - 项目中会存在很多的工厂类. 抽象工厂 - 负责创建一个产品族. 反射工厂既能够保证在新增一个产品的时候,能够遵守”开闭原则”,又能够保证始终仅仅只有一个工厂类. 1234567891011121314151617181920212223242526272829303132333435363738package tech.aistar.design.factory.reflect;/** * 本类用来演示: 反射工厂 - 反射工厂既能够保证在新增一个产品的时候,能够遵守&quot;开闭原则&quot;, * 又能够保证始终仅仅只有一个工厂类. * * Properties + 反射 + 泛型方法/泛型类 * * @author: success * @date: 2021/8/13 9:13 上午 */public class BaseFactory&lt;T&gt;&#123; //面向接口编程 //泛型方法 - 静态方法&lt;T&gt;,同时也要设置泛型类 public static&lt;T&gt; T getInstance(String type)&#123; T t = null; //如果传入进来的是type - 是某个类的全限定名,比如 //tech.aistar.design.factory.reflect.TeacherDaoImpl //获取class实例的方式 try &#123; Class&lt;?&gt; c = Class.forName(type); //反射调用空参构造 try &#123; //Point p = (Point) c.newInstance(); t = (T) c.newInstance(); &#125; catch (InstantiationException e) &#123; e.printStackTrace(); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; return t; &#125;&#125; Method java.lang.reflect.Method 常用方法 int getModifiers();返回由该 method对象表示的字段的Java语言修饰符，作为整数。 12345//默认的 - 0//public -1//private - 2//protected - 4 Class&lt;?&gt; getReturnType();//返回方法的返回类型 String getName();//方法的名称 Class&lt;?&gt;[] getParameterTypes();//返回方法的参数列表. Object invoke(Object obj,Object… args);//反射调用方法 void setAccessible(boolean on);//调用私有方法需要调用之前来设置可见性 - true Array java.lang.reflect.Array - Array类提供静态方法来动态创建和访问Java数组 - 反射技术操作java数组 面试题 - Arrays和Array的区别! java.util.Arrays - 数组工具类. 常用用法 static int getLength(Object array)返回指定数组对象的长度，如 int 。 static Object get(Object array, int index)返回指定数组对象中的索引组件的值。 static Object newInstance(Class&lt;?&gt; componentType, int length)创建具有指定组件类型和长度的新数组。 static void set(Object array, int index, Object value)将指定数组对象的索引组件的值设置为指定的新值。 demo123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081package tech.aistar.day16;import java.lang.reflect.Array;import java.util.Arrays;/** * 本类用来演示: 反射操作java数组 * * @author: success * @date: 2021/8/13 1:32 下午 */public class ArrayDemo &#123; public static void main(String[] args) &#123; Integer[] arr1 = &#123;10,20,30&#125;; String[] arr2 = &#123;&quot;java&quot;,&quot;python&quot;,&quot;db&quot;,&quot;web&quot;&#125;; //用一个方法,来遍历上面俩个不同元素类型数组 //反射技术来遍历数组 printArr(arr1); System.out.println(&quot;====华丽丽的分割线====&quot;); printArr(arr2); System.out.println(&quot;===反射动态创建数组===&quot;); //对任何元素类型的数组,都可以进行扩容操作 //1. 确定新的数组的长度 - 原来数组的长度+扩容长度[反射创建新的数组] //2. 读取原来数组中的每个下标的数据[反射读取]一一复制到新的数组中[反射设置值] //3. 返回类型确定[扩容之后的] - Object Integer[] temp = (Integer[]) extendsArr(arr1); printArr(temp); System.out.println(&quot;---&quot;); String[] strTemp = (String[]) extendsArr(arr2); printArr(strTemp); &#125; //数组的扩容 public static Object extendsArr(Object arr)&#123; //1. 创建数组必不可少的俩个条件.a. 数组的元素类型 b.数组的长度 //获取旧数组长度 int len = Array.getLength(arr); //确定新的数组的长度 int newLen = len*2; //2. 获取原来数组的组件的类型 - 数组的元素类型 Class&lt;?&gt; type = arr.getClass().getComponentType(); //3. 反射创建新的数组了 Object newArr = Array.newInstance(type,newLen); //4. 把arr旧数组中的元素拷贝新的数组中去 for (int i = 0; i &lt; len; i++) &#123; //根据下标获取值 Object o = Array.get(arr,i); //把o设置到newArr数组的下标i处 Array.set(newArr,i,o); &#125; return newArr; &#125; //反射访问 //Integer[] String[] - 数组 - extends Object //并不是extends Object[] private static void printArr(Object arr) &#123; //1. 数组的长度 int len = Array.getLength(arr); //2. 遍历这个数组 for (int i = 0; i &lt; len; i++) &#123; //反射的技术通过下标去取元素 Object obj = Array.get(arr,i); System.out.println(obj); &#125; &#125;&#125; 注解 只要了解即可.jdk5.0开始引入了注解的机制. 现在框架的配置,框架的使用 - 1. 基于xml的配置方式 2. 基于注解的配置/开发方式 - 简洁 学习注解的目的是为了以后能够知道我们框架的使用中遇到注解,知道这个注解背后是个大概什么底层即可. 内置注解 @Override - 检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。 @Deprecated - 标记过时方法。如果使用该方法，会报编译警告。 @SuppressWarnings - 指示编译器去忽略注解中声明的警告。 @SuppressWarnings(“all”) - 抑制所有的警告 @FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。 自定义注解 使用@interface来修饰注解,自定义的注解默认都会继承java.lang.Annotation @Target - 指定你这个注解可以在什么地方被使用 哪些地方 - 类,方法,参数,接口,局部变量上,属性,构造 值可以设置成枚举类型java.lang.annotation.ElementType中的枚举常量 12345678910111213141516171819202122232425262728293031323334353637383940public enum ElementType &#123; /** Class, interface (including annotation type), or enum declaration */ TYPE, /** Field declaration (includes enum constants) */ FIELD, /** Method declaration */ METHOD, /** Formal parameter declaration */ PARAMETER, /** Constructor declaration */ CONSTRUCTOR, /** Local variable declaration */ LOCAL_VARIABLE, /** Annotation type declaration */ ANNOTATION_TYPE, /** Package declaration */ PACKAGE, /** * Type parameter declaration * * @since 1.8 */ TYPE_PARAMETER, /** * Use of a type * * @since 1.8 */ TYPE_USE&#125; @Retention(RetentionPolicy.RUNTIME) 可以在程序的运行过程中,通过反射的技术来得到注解的信息. 注解中只有方法的概念,没有的属性的概念 反射获取注解的值 有办法来判断类或者方法是否加入了注解 有办法通过反射技术来获取类/方法上加入注解的属性值 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package tech.aistar.day16.anno;import java.lang.reflect.Method;import java.util.Arrays;/** * 本类用来演示: 反射获取注解的值 * * @author: success * @date: 2021/8/13 2:39 下午 */public class MyAnnoTest &#123; public static void main(String[] args) &#123; //1. 判断某个类或者某个方法上是否有注解 //有注解 - 标志 - 对这个有注解的类该干嘛干嘛... //注解还配置了属性值 - 需要取出属性值,然后再进行进一步的处理... //类 Class&lt;?&gt; c = UseMyAnno.class; //1. 判断类上是否加入了MyAnno注解 boolean flag = c.isAnnotationPresent(MyAnno.class); if(flag)&#123; System.out.println(c.getSimpleName()+&quot;加入了注解!&quot;); //获取注解的属性值 - 前提是有 MyAnno myAnno = c.getAnnotation(MyAnno.class); //获取属性值 String[] arr = myAnno.value(); System.out.println(Arrays.toString(arr)); &#125;else&#123; System.out.println(c.getSimpleName()+&quot;上没有加入注解!&quot;); &#125; System.out.println(&quot;====方法上的注解的信息 - 反射技术===&quot;); try &#123; Method m = c.getDeclaredMethod(&quot;add&quot;); if(m.isAnnotationPresent(MyAnno.class))&#123; System.out.println(&quot;方法上有注解!&quot;); MyAnno myAnno = m.getAnnotation(MyAnno.class); String[] arr = myAnno.value(); System.out.println(Arrays.toString(arr)); &#125;else&#123; System.out.println(&quot;方法上没有注解...&quot;); &#125; &#125; catch (NoSuchMethodException e) &#123; e.printStackTrace(); &#125; &#125;&#125; mybatis注解开发方法 mybatis底层使用到的是jdbc技术 - 和数据库打交道的技术 1234567891011jdbc步骤很繁琐,步骤比较多~打开Connection con = DriverManager.getConnection(url,&quot;root&quot;,&quot;root&quot;);String sql=&quot;delete from user&quot;;PreparedStatement pstmt = con.prepareStatement(sql); ResultSet rs = pstmt.executeQuery();关闭rs.close();pstmt.close();con.close(); mybatis就是会对jdbc的代码进行一个封装 123456789public interface IUserDao &#123; /** * 查询所有用户 * @return */ @Select(&quot;select * from user&quot;) List&lt;User&gt; findAll();&#125; 尝试走一遍mybatis作者的路线 自定义一个注解 1234public @interface Select&#123; String value();&#125; 注解本身是不会完成任何的业务逻辑的. 12345678910111213通过反射的技术-&gt;select * from user 工具类&#123; Connection con = DriverManager.getConnection(url,&quot;root&quot;,&quot;root&quot;); String sql=&quot;反射技术获取的&quot;; PreparedStatement pstmt = con.prepareStatement(sql); ResultSet rs = pstmt.executeQuery(); 关闭 rs.close(); pstmt.close(); con.close();&#125; 第一阶段corejava总结 JVM内存模型+GC算法 - 面试必问 静态代理和动态代理 - 设计模式 体系回顾 part01-基础语法-数组的排重/排序算法/递归算[阶乘,杨辉,斐波那契数列] part02 封装,继承,多态 四种访问修饰符 static关键字,final,abstract修饰符 String,StringBuffer,StringBuilder 包装类型Integer - [IntegerCache缓冲区,-128~127] 设计模式 - 单例[双重锁检测]+工厂+模板+装饰器 Object - equals&amp;hashcode,clone,toString,wait,notify,notifyAll,finalize,getClass() Date&amp;Calendar&amp;SimpleDateFormat&amp;BigInteger - 常用的内置的api part03 - 集合框架 ArrayList&amp;LinkedList&amp;Vector HashSet&amp;TreeSet HashMap&amp;Properties 多线程体系 反射+注解 第二阶段的知识点 周一之前 - mysql环境装好 围绕数据库 mysql学习 - 关系型数据 jdbc学习 - java和db进行交互的技术 myabtis框架学习 - 持久层技术,对jdbc的封装 相关知识点 - mybatis-plus框架,redis - 非关系型数据","categories":[{"name":"反射","slug":"反射","permalink":"http://example.com/categories/%E5%8F%8D%E5%B0%84/"}],"tags":[{"name":"反射","slug":"反射","permalink":"http://example.com/tags/%E5%8F%8D%E5%B0%84/"}]},{"title":"线程","slug":"线程","date":"2021-08-10T12:50:34.000Z","updated":"2021-10-25T03:24:25.150Z","comments":true,"path":"2021/08/10/线程/","link":"","permalink":"http://example.com/2021/08/10/%E7%BA%BF%E7%A8%8B/","excerpt":"","text":"进程和线程 一个程序至少一个进程，一个进程至少一个线程。线程不能单独执行运行的,它一定是运行在进程的内部的 进程[正在执行中的应用程序]：是并发执行的程序在执行过程中分配和管理资源的基本单位，是一个动态概念， 竞争计算机系统资源的基本单位。 - “多任务操作系统” - “多个进程在**”同时”**在运行” - CPU分配资源 - “分时分片” 处理器[cpu]调度的基本单位 线程：是进程的一个执行单元，是进程内部调度实体。比进程更小的独立运行的基本单位。线程也被称为轻量级进程。 一个进程可以拥有多个线程的同一个进程内部的多个线程是可以共享进程资源的. 进程和线程区别 地址空间：同一进程的线程共享本进程的地址空间，而进程之间则是独立的地址空间。 进程与进程之间是独立的. 同一个进程内部的多个线程是可以共享进程资源的. 资源拥有：同一进程内的线程共享本进程的资源，但是进程之间的资源是独立的。 一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃整个进程都死掉。所以多进程要比多线程健壮。 进程切换时，消耗的资源大，效率高。所以涉及到频繁的切换时，使用线程要好于进程。同样如果要求同时进行并且又要共享某些变量的并发操作，只能用线程不能用进程。 -进程重量级的单位(创建,切换,销毁 - 费时) -线程轻量级的单位(创建,切换,销毁 - 比较高) 执行过程：每个独立的进程有一个程序运行的入口、顺序执行序列和程序入口。但是线程不能独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。 线程是处理器调度的基本单位，但是进程不是。 两者均可并发执行。 一个线程只属于一个进程，但是一个进程可以拥有多个线程，但至少一个线程资源分配给进程，同一进程中所有线程共享该进程的所有资源。 内存空间和资源,调度,个数,健壮. 线程状态 - 线程生命周期 简介:线程的生命周期. New：新建状态/瞬态，当线程对象创立后，即进入了新建状态，如：Thread t = new MyThread() Runnable：就绪状态，当调用线程对象的start()方法（t.start()），线程就进入就绪状态。处于就绪状态的线程，只是说明此线程已经做好了准备，随时等待cpu调度执行，并不是说执行了t.start()此线程立即就会执行 Running：运行状态，当cpu开始调度处于就绪状态的线程时，此时线程才得以真正执行，即进入到运行状态。 Blocked：阻塞状态，处于运行状态中的线程由于某种原因，暂时放弃对cpu的使用权，停止执行，此时进入阻塞状态，直到其进入到就绪状态，才有机会再次被cpu调用以进入到运行状态 Dead：死亡状态(结束状态)，线程执行完了或者因异常退出了run()方法，该线程结束生命周期 （1）就绪状态是进入到运行状态的唯一入口（2）线程想要进入到运行状态执行，首先必须处于就绪状态中（3）根据阻塞产生的原因，阻塞状态又可以分为三种： 【1】等待阻塞：运行状态中的线程执行wait()方法，使本线程进入到等待阻塞状态 【2】同步阻塞：线程在获取synchronized同步锁失败（因为锁被其他线程占用），它会进入同步阻塞状态 【3】其他阻塞：通过调用线程的sleep()或join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态.之前获取键盘输入. 比如启动Java程序1234567891. 启动Java程序实际上就是启动JVM[对字节码文件进行逐行翻译 - 翻译成底层的机器语言] 开启一个JVM进程 - jvm.exe[windows中的可执行文件.C语言写的程序直接编译成了.exe可执行文件] 2. 当JVM进程启动之后,同时开启俩个线程 - 分别是main主线程以及一个GC线程[后台守护线程] 守护线程 - 如果后台只剩下守护线程在执行的时候,那么进程就会结束. 进程的结束不需要等到守护线程全部执行完才会结束. 3. main线程负责执行main方法中的程序 - main方法中的程序全部执行完之后,main线程运行结束 GC线程负责进行垃圾对象的回收 创建线程的传统的方式 写一个类去继承java.lang.Thread类 - 重写里面的run方法 写一个类去实现java.lang.Runnable接口 - 重写里面的run方法 12需要用到java.lang.Thread类中的构造方法Thread(Runnable r); 12System.out.println(Thread.currentThread());//Thread[Thread-0,5,main] 上面这条输出语句: 另外关于Thread对象的打印形式为[Thread-0,5,main]，其中依次代表[线程名，线程优先级、线程组名], 具体可查看Thread类的toString方法； Thread和Runnable区别 第一种方式extends Thread方式 - 共享代码,不共享资源 只有将资源设置成静态的 - 也是进行一个资源的共享的 第二种方式implements Runnable接口 - 共享代码,共享资源 线程安全的类和线程非安全的类 StringBuilder - 线程非安全的字符串类,StringBuffer - 线程安全的字符串类 ArrayList - 线程非安全的集合,Vector - 线程安全的集合 HashMap - 线程非安全的集合,Hashtable - 线程安全的集合 以上线程安全的类 - api方法使用到了synchronized方法进行了修饰 - 在某个时刻,只能由一个线程去访问,其他线程都是出于等待状态 Thread提供的常用方法 static Thread currentThread();//返回当前正在执行的线程的引用对象 String getName();//返回线程的名称 void start();//启动线程,本质当t1.start()方法的时候底层会让JVM去启动线程,我们的程序是没有资格和能力去真正的把一个线程给启动起来的. CPU调度JVM进程-调用t1线程. void setName(String name);//给线程设置名称 synchronized关键字 Java语言的关键字， 可用来给对象和方法或者代码块加锁 当它锁定一个方法[同步方法]或者一个代码块[同步代码块]的时候，同一时刻最多只有一个线程执行这段代码 当两个并发线程访问同一个对象object中的这个加锁同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。 非公平锁 如果同步代码块中出现了异常,那么仍然还是会自动释放锁资源的. 基础方法 在java中,每个对象有且仅有一个同步锁,并且同步锁是依赖于对象存在的.当我们调用对象的synchronized修饰的同步方法时候,就是获取了该对象的同步锁. 修饰普通方法 - 对象锁 - 不同的对象拥有独立的”一把锁”,每个对象的”锁”是不冲突的 - “自助餐” **修饰静态方法 - “类锁” - **作用于这个类下的所有的对象 - 这个类实例化出来的所有的对象竞争的是”同一把锁” - 类锁 - “一个桌子上” 修饰代码块synchronized(this) - 对象锁 修饰代码块(XXX.class) - “类锁” synchronized特性 原子性 123456所谓的原子性代表一个操作或者多个操作,要么执行全部并且执行的过程中不能被任何因素打断.要么就不执行.比如i++,i+=2,i=i+1;这些操作都不是原子操作[读取,计算,赋值].这三个步骤不是原子性 - 三个步骤中的任何一个步骤在执行的过程.其他都可能去打断它.int x = 10;//原子操作特殊的 - 了解即可double x = 3.0d或者long x1 = 20L - 不具备原子性的. 可见性 原因:遇到synchronized之后,清空本地工作内存,重新从主存去拷贝最新的值 1多个线程访问同一个资源时,这个资源的状态,信息等对于其他线程都是可见的 有序性 可重入性 JMM JMM就是Java内存模型(java memory model - 不是JVM内存模型 Java内存模型规定所有的变量都存储在主内存中，包括实例变量[类中的非静态属性]，静态变量，但是不包括局部变量和方法参数。每个线程都有自己的工作内存，线程的工作内存保存了该线程用到的变量和主内存的副本拷贝，线程对变量的操作都在工作内存中进行。线程不能直接读写主内存中的变量。 不同的线程之间也无法访问对方工作内存中的变量。线程之间变量值的传递均需要通过主内存来完成。 描述i++过程 - 多线程安全问题 前提: 线程是不能够操作对主存中的数据进行直接的操作的,必须是在本地的工作内存中去完成的.完成之后,刷回主存的 线程之间是隔离的.每个线程去执行方法的时候,都会在本地开辟一块区域[栈帧 - 线程栈],每个线程在本地工作内存中 对资源的修改,那么这个资源的信息,状态对其他线程都是不可见的. add方法没有使用synchronized进行修饰的流程 脏数据 - 本地工作内存中的变量的数据和主存中的变量的数据的值已经不一样,违背了”JMM中的缓存一致性”的原则. 1234567891011121314151617i++ 不是一个原子性操作的意思就是在它的中间的过程中,可以被被其他线程打断①T1线程从主存中拷贝变量的副本到本地的工作内存中 - read读取(i=0) =&gt; T1 `T1线程让出了CPU执行权力.T0线程获取执行权力 - 从主存拷贝变量的副本(i=0)` =&gt; T0 `T0线程直接进行了计算,赋值,重新刷回到主存[i=1]` =&gt; T0 `T0线程刷回i到主存之后,此时主存的i=1,T0线程让出cpu执行权` ②在本地的工作内存中对i进行计算,计算完之后,再把自增的数据重新赋值个i =&gt; T1 `T1线程继续执行②,由于之前T1线程并没有执行结束,因此它不会从已经更新的主存中重新去拷贝i的副本` `所以T1线程继续执行的时候,使用的仍然是自己本地工作内存中的那个变量i[read下来的,初始值仍然是0]` `T1线程i = i + 1,刷回到主存[i=1]` `因为线程是隔离的,T1线程它是不知道T0线程对i进行了修改的.`③把最终的本地工作内存中的i的计算结果 - [当前线程执行完毕之后]刷回到主存中[时间是不固定的.但是当前线程执行完毕之后,它肯定会刷回到主存] =&gt; T1 [如果是单线程环境下,当T1线程把最终的结果刷回到主存之后,第二次再次调用add()方法的时候,那么T1线程仍然会再次从主存中 获取变量的副本,重复执行①②③) 隐约的信号:如果线程T1没有执行结束,那么它是不会从主存中重新拉取值的 看到的效果是 - 俩个线程都同时操作了i++,但是主存中的i实际上是只加了1次的结果. 如何解决问题 使用synchronized对i++所在的方法进行修饰. 当某个对象调用add方法,得到锁资源的时候,会先清空本地工作内存.清空的目的是为了让后面的操作重新从主存中拷贝最新的值. 123public synchronized void add()&#123; i++;&#125; 因为add方法进行了同步 - synchronized进行了修饰了.在某个时刻,只能由一个线程[获得锁资源的]进去执行 [读取,计算,赋值] - 三个步骤中.其他线程是不可能介入的.因为没有获取锁资源的线程都在外部进行同步阻塞. 当正在执行的线程释放锁资源之前,它会将本地工作内存中的改变刷回到主存. 什么时候工作内存中的改变会同步到主存中单线程 当前的单线程执行方法结束的时候 ###多线程 线程释放锁资源的时候 线程切换 分析可见性代码先写再读 读线程为什么可以终止循环. 1234567891011//如果先写后读t1.start(); //x=5//此处的睡一秒,已经足够让我们的写线程把x=5的最终结果刷回到主存了呀try &#123;Thread.sleep(1000);&#125; catch (InterruptedException e) &#123;e.printStackTrace();&#125;t2.start();//发现x变成了5 先读再写 多个线程访问同一个资源时,这个资源的状态,信息等对于其他线程都是不可见的 12345678910 //如果先读后写t2.start();//读try &#123; Thread.sleep(1000);&#125; catch (InterruptedException e) &#123; e.printStackTrace();&#125;t1.start();//写 synchronized深入 特点 - 对象重新获得锁资源的时候,会先清空本地工作内存.强制从主存中去拷贝已经更新的变量. 1234567891011121314151617先读再写,仅仅是在循环体中添加了一行代码 public void readX()&#123;//写线程过了许久之后,x=5的改变刷回到主存//但是读线程在执行循环 - 循环体中出现了同步代码块 - 遇到synchronized//一旦遇到synchronized - 尝试去获取锁资源 - 会清空本地工作内存[把x清空掉了]//继续循环又会使用到x,由于本地工作内存已经清空了呀,所以读线程只能到主存中去强制再去拷贝一份x的变量到本地工作内存//拿到的肯定是写线程已经更新之后的那个值x=5while(x!=5)&#123; // System.out.println();//增加的代码 - read线程跳出了循环 - 发现了新的x,重新拷贝最新的x&#125;if(x==5) &#123; System.out.println(&quot;-----stopped---&quot;);&#125;&#125; 原因 123456789101112131415System.out.println()这个println方法的内部底层是 - 同步代码块 - synchronizedprivate void newLine() &#123;try &#123; synchronized (this) &#123; //... &#125;&#125;catch (InterruptedIOException x) &#123; Thread.currentThread().interrupt();&#125;catch (IOException x) &#123; trouble = true;&#125;&#125; 如何保证可见性 - 解决方案 使用synchronized来保证可见性 使用volatile来修饰实例变量 作用1:强制让程序遵守”缓存一致性”协议.如果主存中的变量一旦发生了改变.线程就会强制从主存中重新拷贝这个最新的数据到自己的本地工作内存中去. 作用2:禁止指令重排的 - 单例 1234567891011Student s = new Student();指令重排 - JVM指令优化之后①给对象分配空间②空间地址立即给s,s保存到栈③对象的初始化 volatile Student s = new Student();//禁止指令重排①给对象分配空间③对象的初始化②空间地址立即给s,s保存到栈 volatile关键字的作用 保证可见性 volatile是不会造成阻塞的 禁止指令重排 不能保证原子性 12345678910111213141516171819202122232425volatile int i = 0;//i对于俩个线程而言都是可见的.主存中一旦改变了.另外一个线程肯定就能够&quot;看到&quot; - 自己会强制再去重新拷贝 //一份到本地缓存中@Overridepublic void run()&#123; add();&#125;public void add()&#123; i++;&#125;t1.start();t2.start();//诱导 - //强制让程序遵守&quot;缓存一致性&quot;协议.如果主存中的变量一旦发生了改变.线程就会强制从主存中重新拷贝这个最新的数据到自己的本地工作内存中去.//最终的i出来的结果&lt;200000 -&gt; 不能保证原子性//t1执行到最后一步,在自己的工作内存中已经计算结束了 ,i已经自增完毕,i=1&lt;---其他线程介入了----------&gt;但是还没有来得及刷回到主存. t0线程直接计算完,i=1,刷回到主存,结束 但是t1已经对i操作已经结束了,t1的内部已经不会再去操作i 只剩下最后一个动作-&gt;i=1也会刷回到主存中 volatile和synchronized区别 volatile只能作用于变量，而synchronized可以作用于变量、方法和代码块 多线程访问volatile不会发生阻塞，而synchronized关键字可能发生阻塞。 volatile能够保证数据的可见性，就是在多个线程之间是可见的，不能保证原子性，而synchronized关键字都可以保证。 volatile关键字主要解决的是多个线程之间的可见性，而synchronized关键字保证的是多个线程访问资源的同步性。 volatile是可以禁止jvm指令重排的,但是synchronized是不能的. (1)Synchronized：保证可见性和原子性 Synchronized能够实现原子性和可见性；在Java内存模型中，synchronized规定，线程在加锁时，先清空工作内存→在主内存中拷贝最新变量的副本到工作内存→执行完代码→将更改后的共享变量的值刷新到主内存中→释放互斥锁。 (2)Volatile：保证可见性，但不保证操作的原子性 Volatile实现内存可见性是通过store和load指令完成的；也就是对volatile变量执行写操作时，会在写操作后加入一条store指令，即强迫线程将最新的值刷新到主内存中；而在读操作时，会加入一条load指令，即强迫从主内存中读入变量的值。但volatile不保证volatile变量的原子性. 1234561）Synchronized保证内存可见性和操作的原子性2）Volatile只能保证内存可见性3）Volatile不需要加锁，比Synchronized更轻量级，并不会阻塞线程（volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。）4）volatile标记的变量不会被编译器优化,而synchronized标记的变量可以被编译器优化（如编译器重排序的优化）.5）volatile是变量修饰符，仅能用于变量，而synchronized是一个方法或块的修饰符。6)volatile关键字主要解决的是多个线程之间的可见性，而synchronized关键字保证的是多个线程访问资源的同步性。 synchronized的底层原理 了解即可 每一个锁都对应一个monitor对象，在HotSpot虚拟机中它是由ObjectMonitor实现的（C++实现）。 守护线程 GC - 运行在后台的 - 负责回收垃圾对象的. 核心:线程结束的时候不需要关心后台的守护线程是否也运行结束.线程是不会等后台的守护线程全部运行结束才结束. 当后台只有守护线程在执行的时候,就可以认为线程可以结束了. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package tech.aistar.day15.thread02;/** * 本类用来演示: 后台的守护线程* * @author: success * @date: 2021/8/11 9:03 上午*/public class DaemonDemo &#123; public static void main(String[] args) &#123; Thread t1 = new T1(); Thread t2 = new T2(); //将打印数字的线程 - 设置成后台守护线程 //如果后台只剩下守护线程在执行 - 可以结束了. //不需要等待所有的守护线程运行结束才结束. t2.setDaemon(true); //如果t1和t2都不是守护线程 - main线程一定是等待俩个线程全部执行完之后,才会结束 t1.start(); t2.start(); &#125;&#125;//业务线程class T1 extends Thread&#123; @Override public void run() &#123; for (int i = 65; i &lt;=90 ; i++) &#123; System.out.println((char)i); try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125;class T2 extends Thread&#123; @Override public void run() &#123; for (int i = 0; i &lt; 100; i++) &#123; System.out.println(i); try &#123; Thread.sleep(500); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125; Lock - 同步代码简介:它是一个接口,下面有很多实现类,笔试题lock和synchronized的区别! lock是接口,synchronized它是一个关键字 lock锁是一个显示锁(手动申请锁,手动释放锁),synchronized隐式锁(自动申请/释放锁) lock手动申请锁**(对象锁)** lock是锁代码块 lock出现异常的时候,是不会主动释放资源的. demo123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package tech.aistar.day15.lock;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;/** * 本类用来演示: Lock同步代码 - 同步代码块 * * 申请的是对象锁 - 相同的对象才会去竞争一把锁. * * 如果出现了异常 - 是不会主动释放锁的. * * @author: success * @date: 2021/8/11 1:32 下午 */public class LockHelloDemo &#123; //构建lock对象 - 接口 Lock lock = new ReentrantLock(); public void add()&#123; try &#123; //begin.. //多个线程就会去竞争&quot;锁资源&quot; lock.lock();//手动申请&quot;锁资源&quot; - 显示锁 //在某个时刻只能由一个线程进入去执行... //同步代码开始 System.out.println(Thread.currentThread().getName()+&quot;:0&quot;); try &#123; //sleep如果出现同步代码中,它并不会释放锁资源,只会让出cpu时间片段 Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(Thread.currentThread().getName()+&quot;:1&quot;); //end... //同步代码结束 &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; lock.unlock();//手动释放锁 &#125; &#125; public static void main(String[] args) &#123; LockHelloDemo hello = new LockHelloDemo(); //1. 创建第一个线程对象 Thread t1 = new Thread(()-&gt;&#123; hello.add(); &#125;); Thread t2 = new Thread(()-&gt;&#123; hello.add(); &#125;); t1.setName(&quot;one&quot;); t2.setName(&quot;two&quot;); t1.start(); t2.start(); &#125;&#125; 面试题-synchronized和Lock有什么区别？ synchronized和lock都是属于独占锁. 实现层面不一样。synchronized 是 Java 关键字，JVM层面 实现加锁和释放锁；Lock 是一个接口，在代码层面实现加锁和释放锁 是否自动释放锁。synchronized 在线程代码执行完或出现异常时自动释放锁；Lock 不会自动释放锁，需要再 finally {} 代码块显式地中释放锁 是否一直等待。synchronized 会导致线程拿不到锁一直等待；Lock 可以设置尝试获取锁或者获取锁失败一定时间超时 1234567Lock接口中提供的方法 1. void lock();//手动上锁 2. boolean tryLock();//如果获取锁失败 - 直接返回false,如果获取锁成功,返回true if(lock.tryLock())&#123; &#125; 3. boolean tryLock(long time, TimeUnit unit);//如果在尝试获取锁的过程中等待超过了time,那么就会导致获取锁失败 获取锁成功是否可知。synchronized 无法得知是否获取锁成功；Lock 可以通过 tryLock 获得加锁是否成功 功能复杂性。synchronized 加锁可重入、不可中断、非公平；Lock 可重入、可中断、可公平和不公平、细分读写锁提高效率 读锁 - java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock - 共享锁 - 允许多个线程去读. 写锁 - java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock - 互斥锁 - 一次只能由一个线程去写. 123不可中断synchronized - A线程竞争到锁资源 - 顺利进入同步代码块执行 - 只要A资源不释放这个锁资源.B线程只能在外面等待. 可中断Lock -&gt; A线程顺利执行同步代码,B线程如果tryLock方法话,那么B线程不断尝试获取锁资源.如果设置了超时等待时间.B线程等太久.已经超过了设置的时间.B线程将不会再傻乎乎继续等待下去[可中断],B线程就有可能去干别的事情了. 锁 乐观锁,悲观锁[synchronized] - 数据库的时候 互斥锁 - synchronized和lock 读写锁 锁升级 锁粗化 偏向锁 分布式锁 线程的通信 - 重点 同程公司笔试题 - 循环打印abc ABC 123 abc ABC 123 打印小写字母abc的线程,打印大写字母ABC线程,打印数字123的线程 保证必须按照上面的顺序进行输出 - synchronized - wait和notify/notifyAll不能解决原因是notify随机唤醒,notifyAll唤醒所有 使用Lock中的同步队列 - 解决方案 - 唤醒指定的等待队列上的某个线程. Lock接口中提供的构建等待队列的方法 - Condition newCondition(); Contion提供的关于线程通信的俩个方法 - 出现在同步代码内部 - lock()-&gt;unlock()内部 void await();//当前线程会进入到阻塞状态.必须要等其他线程唤醒的 void signal();//哪个线程的Conition对象去调用signal()方法,哪个线程就会被唤醒 demo 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140package tech.aistar.day15.lock; import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock; /** * 本类用来演示: * * 同程公司笔试题 - 循环打印abc ABC 123 abc ABC 123 * * 打印小写字母abc的线程,打印大写字母ABC线程,打印数字123的线程 * * 使用Lock中的同步队列 - 解决方案 - **唤醒指定的等待队列上的某个线程.** * * @author: success * @date: 2021/8/11 2:29 下午 */public class LockTongxinDemo &#123; private Lock lock = new ReentrantLock(); //有几个线程,就构建几个队列 //打印小写字母的 private Condition c1 = lock.newCondition(); //打印大写字母的 private Condition c2 = lock.newCondition(); //打印数字的 private Condition c3 = lock.newCondition(); //定义了一个标记 private int count = 0; //count = 0,打印小写字母的执行 //count = 1,打印大写字母的执行 //count = 2,打印数字的执行 //1. void await();//当前线程会进入到阻塞状态.必须要等其他线程唤醒的 //2. void signal();//哪个线程的Conition对象去调用signal()方法,哪个线程就会被唤醒 public void printLower()&#123; while(true)&#123; try &#123; lock.lock(); if(count!=0)&#123; //等待 //一开始,第一次count=0,说明打印小写字母的线程正常执行 c1.await(); &#125; System.out.print(&quot;abc&quot;); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; count=1; c2.signal();//唤醒打印大写字母的线程 &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; lock.unlock(); &#125; &#125; &#125; public void printUpper()&#123; while(true)&#123; try &#123; lock.lock(); if(count!=1)&#123; try &#123; c2.await(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; System.out.print(&quot;ABC&quot;); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; count=2; c3.signal(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; lock.unlock(); &#125; &#125; &#125; public void printNum()&#123; while(true)&#123; try &#123; lock.lock(); if(count!=2)&#123; c3.await(); &#125; System.out.print(123); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; count = 0; c1.signal(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; lock.unlock(); &#125; &#125; &#125; public static void main(String[] args) &#123; LockTongxinDemo demo = new LockTongxinDemo(); Thread t1 = new Thread(()-&gt;&#123; demo.printLower(); &#125;); Thread t2 = new Thread(()-&gt;&#123; demo.printUpper(); &#125;); Thread t3 = new Thread(()-&gt;&#123; demo.printNum(); &#125;); t1.start(); t2.start(); t3.start(); &#125;&#125; 面试题 - 常用方法区别 wait方法和sleep方法的区别? a. wait方法一定是出现在synchronized同步代码内部的.[sleep是可以放在同步/不同步的代码内部的] b. wait方法,执行这个方法的线程就会释放锁,释放cpu.但是sleep是不会释放锁的.只是释放了cpu - 核心的区别 c. sleep - 线程会自动进入到阻塞状态[其他阻塞状态],一旦睡眠时间结束.会自动从阻塞状态恢复到可就绪态 - 等到cpu到来 - 运行态. ​ wait - 线程会自动进入到等待阻塞状态,自己不会主动”醒过来”,必须是其他线程调用notify或者notifyAll,进入到锁定状态[再次尝试 去获取锁] sleep：Thread类的方法，必须带一个时间参数。会让当前线程休眠进入阻塞状态并释放CPU（阿里面试题 Sleep释放CPU，wait 也会释放cpu，因为cpu资源太宝贵了，只有在线程running的时候，才会获取cpu片段），提供其他线程运行的机会且不考虑优先级，但如果有同步锁则sleep不会释放锁即其他线程无法获得同步锁 可通过调用interrupt()方法来唤醒休眠线程。 yield：让出CPU调度，Thread类的方法，类似sleep只是不能由用户指定暂停多长时间 ，并且yield()方法只能让同优先级的线程有执行的机会。 yield()只是使当前线程重新回到可执行状态，所以执行yield()的线程有可能在进入到可执行状态后马上又被执行。调用yield方法只是一个建议，告诉线程调度器我的工作已经做的差不多了，可以让别的相同优先级的线程使用CPU了，没有任何机制保证采纳。 wait：Object类的方法(notify()、notifyAll() 也是Object对象)，必须放在循环体和同步代码块中，执行该方法的线程会释放锁，进入线程等待池中等待被再次唤醒(notify随机唤醒，notifyAll全部唤醒，线程结束自动唤醒)即放入锁池中竞争同步锁 join：一种特殊的wait，当前运行线程调用另一个线程的join方法，当前线程进入阻塞状态直到另一个线程运行结束等待该线程终止。 注意该方法也需要捕捉异常。等待调用join方法的线程结束，再继续执行。如：t.join();//主要用于等待t线程运行结束，若无此句，main则会执行完毕，导致结果不可预测。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package tech.aistar.day15.thread02; /** * 本类用来演示: * join：一种特殊的wait[等待]，当前运行线程[mother]调用另一个线程[son]的join方法， * 当前线程[mother]进入阻塞状态直到另一个线程[son]运行结束等待该线程终止。 * 注意该方法也需要捕捉异常。等待调用join方法的线程结束，再继续执行。 * * @author: success * @date: 2021/8/11 9:21 上午 */public class JoinDemo &#123; public static void main(String[] args) &#123; Thread mother = new Mother(); mother.start(); &#125;&#125; class Mother extends Thread&#123; @Override public void run() &#123; System.out.println(&quot;妈妈正在做饭...&quot;); System.out.println(&quot;妈妈发现酱油了...&quot;); System.out.println(&quot;妈妈让熊孩子打酱油...&quot;); //应该是希望儿子的线程介入进来了吧... Thread son = new Son(); son.start();//启动儿子线程 //希望妈妈的线程先暂停一下,然后等儿子的线程跑完,妈妈的线程才继续跑. try &#123; son.join(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; //期望的是这条语句一定是出现在最后的... System.out.println(&quot;妈妈可以继续做饭了~~~&quot;); &#125;&#125; class Son extends Thread&#123; @Override public void run() &#123; System.out.println(&quot;熊孩子接到任务...屁颠颠打酱油去了...&quot;); for (int i = 5; i &gt;=0; i--) &#123; System.out.println(&quot;熊孩子还有&quot;+i+&quot;分钟就回来了...&quot;); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; System.out.println(&quot;熊孩子把酱油打回来了~~~&quot;); &#125;&#125; 线程之间的通信 wait：Object类的方法(notify()、notifyAll())，必须放在循环体和同步代码块中，执行该方法的线程会释放锁， 进入线程等待池中等待被再次唤醒(notify随机唤醒，notifyAll全部唤醒，线程结束自动唤醒)即放入锁池中竞争同步锁 生产者和消费者 单个生产者和单个消费者 生产者线程 - 负责生产产品-box[把产品放入到box] 消费者线程 - 负责消费产品-box[从box中去获取产品] 通信的流程 俩条线程并发执行 - 调用的是不同的方法 假设消费者线程先执行 - 直接从box中去获取产品.但是此时此刻box中尚无产品. 消费者线程就需要调用wait方法 - 自己会释放锁资源,消费者线程进入到线程等待池[意味着当前的线程会进入到等待阻塞的状态] -getter方法 假设生产者线程 - setter方法 先执行了.发现box中没有产品的,顺利放入一个产品到box中的.但是放完之后.生产者还是会继续执行.继续执行的时候又会调用 setter方法.这个时候,不能允许生产者线程连续再放 - 就得调用生产者线程的wait方法,同时还需要唤醒消费者线程过来消费. 消费者线程一旦消费成功,它还是会继续执行自己的getter方法.发现box中没有了.回到第2个步骤 demo123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135package tech.aistar.day15.thread02;/** * 本类用来演示: 线程之间的通信 - 生产者和消费者 * * 效果是:必须是生产者线程先进去执行. * 放1个 * 取1个 * 放2个 * 取2个 * 放3个 * 取3个 * * 一次性放,一次性取. * 不能连续出现俩次放/取. * * @author: success * @date: 2021/8/11 9:55 上午 */public class ThreadTongXinDemo &#123; public static void main(String[] args) &#123; //典型的不共享代码,但是共享资源. Box box = new Box(); Thread product = new ProductThread(box); Thread customer = new CustomerThread(box); product.setName(&quot;生产者&quot;); customer.setName(&quot;消费者&quot;); product.start(); customer.start(); &#125;&#125;//定义一个临界资源class Box&#123; private int content;//产品 //假设的是是要调用getter方法 - 消费了 - box中没有东西了. //如果box中有东西 - 刚生产完,flag为true //如果box中没有东西 - 刚消费完 - flag为false private boolean flag;//标志 //生产者线程去调用的 //线程通信的方法wait,notify,notifyAll方法必须存在于循环体的同步方法中. public synchronized void setContent(int content) &#123; if(flag)&#123;//box中是有东西的 //一旦调用wait方法之后,线程会释放锁.并且会自动进入到线程等待池中 //进入到一个阻塞的状态. //它自己是不会主动被唤醒的.必须由其他线程调用notify或者notifyAll才能够 //notify - 随机唤醒线程等待池中的一个线程 //notifyAll - 唤醒所有的等待的线程 try &#123; wait();//为了防止生产者线程连续执行.. &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; //生产者顺利去执行. //设置flag flag = true; this.content = content; //通知一下消费者来消费.消费者很有可能已经处于等待阻塞的状态. notifyAll();//唤醒全部等待阻塞的线程 &#125; //消费者线程去调用的 public synchronized int getContent() &#123; if(!flag)&#123;//1. 保证消费者第一次执行,肯定会进来 try &#123; wait();//释放锁,自己是不会主动&quot;醒过来的&quot; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; flag = false;//消费完了... //唤醒一下生产者 notifyAll(); return content; &#125;&#125;//定义生产者线程class ProductThread extends Thread&#123; private Box box; private int i = 0;//产品 public ProductThread(Box box)&#123; this.box = box; &#125; @Override public void run() &#123; //不断去生产 while(true)&#123; System.out.println(Thread.currentThread().getName()+&quot;=&gt;放&quot;+(++i)+&quot;个&quot;); box.setContent(i); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125;//定义一个消费者线程class CustomerThread extends Thread&#123; private Box box; public CustomerThread(Box box)&#123; this.box = box; &#125; @Override public void run() &#123; while(true)&#123; System.out.println(Thread.currentThread().getName()+&quot;-&gt;取&quot;+box.getContent()+&quot;个&quot;); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125; 死锁 - 笔试题“哲学家吃饭的问题” 死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程. 死锁产生的条件1）互斥条件：指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。 2）请求和保持条件：指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。 3）不剥夺条件：指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。 4）环路等待条件：指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。 只要打破四个条件的一个,就可以防止死锁. 死锁是不可避免,但是需要写程序的破坏四个条件中的一个. 静态域容易产生死锁. 四种常见的线程池 - 必考线程池的返回值ExecutorService简介 ExecutorService是Java提供的用于管理线程池的类。该类的两个作用：控制线程数量和重用线程 Executors.newCacheThreadPool()：可缓存线程池，先查看池中有没有以前建立的线程，如果有，就直接使用。如果没有，就建一个新的线程加入池中，缓存型池子通常用于执行一些生存期很短的异步型任务 Executors.newFixedThreadPool(int n)：创建一个可重用固定个数的线程池，以共享的无界队列方式来运行这些线程。 Executors.newScheduledThreadPool(int n)：创建一个定长线程池，支持定时及周期性任务执行 Executors.newSingleThreadExecutor()：创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。 作业 Lock和Condition - 生产者和消费者的demo 编写俩个线程,一个线程用来计算2100000之间的素数的个数.第二个线程用来计算1000000200000之间的素数的个数 将俩个线程计算的结果相加. 面试题 - 请你谈谈java.util.concurrent下的api的认识! 主题 - 围绕线程池去问题了. 1234import java.util.concurrent.Callable;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.Future;","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"枚举","slug":"枚举","date":"2021-08-10T12:49:36.000Z","updated":"2021-08-10T12:50:02.407Z","comments":true,"path":"2021/08/10/枚举/","link":"","permalink":"http://example.com/2021/08/10/%E6%9E%9A%E4%B8%BE/","excerpt":"","text":"枚举类型 枚举常量 - 类型安全的常量 - 公共的静态的常量[final]属性 - 不可变的 jdk5.0开始提供的,以前的作用就是用来替代常量接口的 回忆常量接口 - 管理和维护项目中所有的常量的 12345678910public interface IConsts&#123;//最全的写法 - 接口中只能出现公开的静态的常量属性//public static final int Car = 1;//精简的写法//public int CAR = 1;//最精简的写法int CAR = 1;&#125; 关键字 使用enum关键字来定义一个枚举类型的 switch()中的参数类型可以是byte,short,int,char,enum,String,Byte,Short,Integer 特点 枚举常量,多个枚举常量,使用,隔开.最后一个枚举常量不需要使用逗号了. 如果最后一个枚举常量下面还有代码的话,那么需要使用分号隔开 允许存在构造 - 访问修饰符不能是公开的,protected 枚举类型是不能够被实例化的 枚举类型中可以提供普通属性 每个枚举类型默认都会自动继承java.lang.Enum&lt;E extends Enum&gt; 枚举类型中是可以存在抽象方法的,但是每个枚举常量必须要实现这个抽象方法 枚举类型不支持再去extends另外一个枚举类型 枚举类型不支持再去手动extends另外一个类 应用 如果某些属性具有固定的一些标识,就可以考虑定义成枚举类型. 比如:User实体类中维护了一个性别属性Gender[性别的枚举类型] 比如:Order实体类也会存在固定的状态 - 未付款,已付款.已下单未付款.取消订单等… 字符串-&gt;枚举常量 比如一个注册页面 用户名 tom 性别 单选按钮 男 单选按钮 女 确定按钮 未来.当点击确定按钮,后台接受到M,F - 后台接受到的数据都是字符串数据. 我们是不能够直接将这个字符串数据设置到实体类中的枚举常量属性上的. 每个自定义的枚举类型Gender.java默认都会继承java.lang.Enum&lt;E extends Enum&gt; 123public static &lt;T extends Enum&lt;T&gt;&gt; T valueOf(Class&lt;T&gt; enumType, String name) &#123;&#125; 1234567891011121314151617181920212223242526272829package tech.aistar.day14.enums;/** * 本类用来演示: String-&gt;枚举类型* * @author: success * @date: 2021/8/9 10:10 上午*/public class StringToEnumDemo &#123; public static void main(String[] args) &#123; String gender = &quot;F&quot;;//接受到页面传过来的数据 - 都是字符串类型 //字符串类型是不能够直接设置给实体类的那个枚举常量属性上的 //System.out.println(FString.class); // System.out.println(Integer.class); //Class&lt;?&gt; c = String.class; //System.out.println(c); //将字符串转换成枚举常量类型 //注意 - 字符串的值一定是和枚举常量的名称是保持一致的. //否则 - java.lang.IllegalArgumentException: // No enum constant tech.aistar.day14.enums.Gender.S Gender g = Enum.valueOf(Gender.class,gender); User user = new User(1,&quot;tom&quot;,g); System.out.println(user); &#125;&#125; 枚举单例 它是effective java作者极力推荐的写法 - 枚举实例 - 1. 枚举类型天生就是线程安全的.2. 可以防止序列化或者反射来破坏这种单例的. 单例 - 保证在整个应用程序中,某个类的具体的实例永远只有1个. 什么时候需要把类做成单例的 - 这个类是一个重量级的类[类的创建和销毁的成本比较高.] 枚举常量是类型安全的常量???12345678910111213141516171819public enum Gender&#123; F,M&#125;因为使用枚举常量 - 第一步肯定是先加载枚举类型Gender - JVM通过类加载器[java.lang.ClassLoader]来加载枚举类型protected Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException &#123; //使用到了synchronized关键字 synchronized (getClassLoadingLock(name)) &#123; //.... 加载类,接口,枚举类型到JVM内存 &#125; &#125;很多线程都在调用Gender.M - &gt; 都想尝试加载Gender枚举类型到JVM内存.但是由于loadClass加载的那块代码使用到了synchronized[锁]只能由一个线程进去执行,并且只会执行一次. 由于每个枚举常量F 本质 就是 public static final Gender F = new Gender();//使用到了static关键字//意味着当枚举类型一旦被加载了,枚举常量立即就会被分配空间以及初始化,并且机会只有一次.所以在整个内存中F常量也就只会存在一份.//无论在哪里被调用.无论被多少给线程调用 - 大家拿到的都是同一个/同一份那个枚举常量. 具体的代码的实现12345678910111213141516171819202122232425262728293031323334353637383940414243package tech.aistar.design.singleton.version04;import java.io.Serializable;/** * 本类用来演示: 枚举单例实现方式 * * @author: success * @date: 2021/8/9 10:45 上午 */public class Singleton04 implements Serializable &#123; private Singleton04()&#123; System.out.println(&quot;私有化构造&quot;); &#125; //内部的枚举类型 private enum SingletonEnum&#123; //枚举常量的实例 INSTANCE;//public static final SingletonEnum INSTANCE = new SingletonEnum(); //final修饰的变量要赋值 private final Singleton04 instance; //枚举类型提供一个空参构造 - 枚举类型是不能new的 SingletonEnum()&#123; instance = new Singleton04(); &#125; //提供一个普通方法 public Singleton04 getInstance()&#123; return instance; &#125; &#125; //外部类肯定是要提供一个方法,返回自己的一个唯一实例的 public static Singleton04 getInstance()&#123; return SingletonEnum.INSTANCE.getInstance(); &#125;&#125;class TestSingle04&#123; public static void main(String[] args) &#123; System.out.println(s1 == s2);//true &#125;&#125; 枚举单例写法1234567891011121314151617181920/** * 本类用来演示: 枚举单例 - 最精简的写法 - 多线程安全的写法 - 饿汉模式 只有最外层的是枚举类型 - 序列化这个枚举类型的单例,才能阻止序列化破坏单例的模式 * * @author: success * @date: 2021/8/9 11:11 上午 */public enum Singleton05 &#123; //public static final Singleton05 INSTANCE = new Singleton05(); INSTANCE; Singleton05()&#123; System.out.println(&quot;比较繁琐的操作的事情,费时费力的事情&quot;); &#125; public static Singleton05 getInstance()&#123; return INSTANCE; &#125;&#125; 对比饿汉模式的写法 123456789101112131415public class Singleton01 &#123; //2. 初始化一个变量,该变量就是该类的唯一实例[对象] private static Singleton01 instance = new Singleton01(); //1. 私有化构造 private Singleton01()&#123; //比较费时费力的代码,可能需要更多的时间 System.out.println(&quot;Singleton01...&quot;); &#125; //3. 提供一个公开的静态的方法来返回这个类的唯一实例 public static Singleton01 getInstance()&#123; return instance; &#125;&#125; 枚举单例阻止序列化的破坏 序列化单例对象s1 反序列化封装到单例对象s3 s1 == s3 ;// 仍然为true 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package tech.aistar.design.singleton.version05;import tech.aistar.day14.enums.Gender;import java.io.*;/** * 本类用来演示: 枚举单例 - 最精简的写法* * @author: success * @date: 2021/8/9 11:11 上午*/public enum Singleton05 &#123; //public static final Singleton05 INSTANCE = new Singleton05(); INSTANCE; Singleton05()&#123; System.out.println(&quot;比较繁琐的操作的事情,费时费力的事情&quot;); &#125; public static Singleton05 getInstance()&#123; return INSTANCE; &#125;&#125;class TestSingleton05&#123; public static void main(String[] args) &#123; Singleton05 s1 = Singleton05.getInstance(); Singleton05 s2 = Singleton05.getInstance(); System.out.println(s1 == s2);//true //序列化 try(ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(&quot;src/tech/aistar/design/ss.txt&quot;)))&#123; //对单例进行序列化操作 out.writeObject(s1); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; //反序列化 try(ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;src/tech/aistar/design/ss.txt&quot;)))&#123; Singleton05 s3 = (Singleton05) in.readObject(); System.out.println(s1 == s3);//true &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 枚举细节 - 抽象方法 枚举类型中是可以存在抽象方法的,但是每个枚举常量必须要实现这个抽象方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869package tech.aistar.day14.enums;/** * 本类用来演示: 季节的枚举类型* * @author: success * @date: 2021/8/9 1:43 下午*/public enum Season&#123; //枚举类型中是可以存在抽象方法的,但是每个枚举常量必须要实现这个抽象方法 SPRING(&quot;春天&quot;)&#123; @Override public Season next() &#123; return Season.SUMMER; &#125; &#125;, SUMMER(&quot;夏天&quot;) &#123; @Override public Season next() &#123; return Season.AUTUMN; &#125; &#125;, AUTUMN(&quot;秋天&quot;) &#123; @Override public Season next() &#123; return Season.WINTER; &#125; &#125;, WINTER(&quot;冬天&quot;) &#123; @Override public Season next() &#123; return Season.SPRING; &#125; &#125;; private String sign; Season()&#123; &#125; Season(String sign) &#123; this.sign = sign; &#125; public String getSign() &#123; return sign; &#125; //提供一个抽象方法 - 但是要求所有的枚举常量都要重写这个抽象方法 public abstract Season next();&#125;class TestSeason&#123; public static void main(String[] args) &#123; Season s = Season.SPRING; for(;;)&#123; System.out.println(s+&quot;-&quot;+s.getSign()); try &#123; //让程序睡一秒钟 Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; s = s.next(); &#125; &#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"泛型","slug":"泛型","date":"2021-08-07T06:54:55.000Z","updated":"2021-08-22T08:13:46.032Z","comments":true,"path":"2021/08/07/泛型/","link":"","permalink":"http://example.com/2021/08/07/%E6%B3%9B%E5%9E%8B/","excerpt":"","text":"泛型Generic定义 Java在1.5之后加入了泛型的概念。泛型，即“参数化类型”。 泛型的本质是为了参数化类型(将类型参数化传递)（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数， 这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。 泛型只能是对象类型,比如User,Student,内置对象类型比如String,Integer[一定是包装类型] 1234567891011//jdk5.0之前List list = new ArrayList();//集合中可以添加任意类型的数据//jdk5.0开始~jdk7.0之前//类型安全的集合框架List&lt;Integer&gt; list - new ArrayList&lt;Integer&gt;();//在编译期间确定了集合中添加的数据的类型,只能是Integer类型.//jdk7.0开始//结论:泛型只有编译期间的概念,在运行期间将会被擦除.List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); 泛型符号 E 元素 K,V - 键值对 N - 数字 T - 类型 ? - 通配符 为何要有泛型呢 对别一下没有泛型,会导致什么结果. 加入了泛型之后,可以保证代码的健壮性 加入了泛型之后,取值的时候,不需要进行强制类型的转换 加入了泛型之后,代码会变得更加简洁 123456789101112131415161718192021222324252627282930313233343536package tech.aistar.day14;import java.util.ArrayList;import java.util.List;/** * 本类用来演示: 泛型的好处* * @author: success * @date: 2021/8/7 9:05 上午*/public class GenericDemo &#123; public static void main(String[] args) &#123; //jdk5.0之前 List list = new ArrayList();//集合中可以添加任意类型的数据 list.add(10);//10-&gt;java.lang.Integer list.add(&quot;ok&quot;);//字符串 //没有泛型的时候,获取集合中的元素 - 统计的返回类型都是Object类型 //需要进行强制类型的转换.转换的过程中有可能会抛出java.lang.ClassCastException类型转换失败异常 //在类型转换之前,建议先进行类型的判断,使用instanceof关键字 String ok = (String) list.get(1); System.out.println(ok); //jdk7.0开始 //一旦指定了泛型,add方法中的E成了String类型,返回类型也是String类型 List&lt;String&gt; strList = new ArrayList&lt;&gt;(); strList.add(&quot;ok&quot;); strList.add(&quot;java&quot;); //根据下标获取 - 不需要进行类型的强制转换了.自动能够识别出返回类型就是你指定的那个泛型. String result = strList.get(1); System.out.println(result); &#125;&#125; 泛型只有编译期间的概念,在运行期间将会被擦除. 结论:泛型是没有多态的 泛型只有编译期间的概念 - 泛型仅仅是在编译期间是有效的 在编译期间一旦确定了泛型,那么在编译期间就只能向这个容器中添加对应类型的数据. 否则编译报错. 运行期间将会被擦除 - 泛型是不存在运行时类型的 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package tech.aistar.day14;import tech.aistar.day05.User;import java.util.ArrayList;import java.util.List;/** * 本类用来演示: 泛型只有编译期间的概念,在运行期间将会被擦除. * * @author: success * @date: 2021/8/7 9:16 上午 */public class GenericRuntimeDemo &#123; public static void main(String[] args) &#123; //多态的语法 - 多态的应用 //面向父类编程/面向接口编程 //编译时类型 对象名 = new 运行时类型(); //父类 对象 = new 子类(); //接口 对象 = new 实现类(); //java.lang.Integer extends java.lang.Number //java.lang.Long extends java.lang.Number Number n1 = new Integer(10); Number n2 = new Long(20L); //jdk5.0~jdk7.0之前 List&lt;Integer&gt; list01 = new ArrayList&lt;Integer&gt;(); //思考 - 编译是错误的 //结论:泛型是没有多态的 //原因:泛型只有编译期间的概念,在运行期间将会被擦除. //List&lt;Number&gt; numberList = new ArrayList&lt;Integer&gt;(); List&lt;Long&gt; list02 = new ArrayList&lt;Long&gt;(); //获取对象的运行时类型 //忘记了 - java.lang.Object中的toString方法 getClass().getName()+&quot;@&quot;+Integer.toHexString(hashCode()); //Class实例 - 别名:对象的运行时类型 Class&lt;?&gt; c1 = list01.getClass(); Class&lt;?&gt; c2 = list02.getClass(); System.out.println(c1 == c2);//true //结论:获取运行时类型始终都是ArrayList,和&lt;Integer&gt;和&lt;Long&gt;是无关的 //所以泛型仅仅是在编译期间有效,但是在运行期间是无效的[将会被擦除,将会失效] System.out.println(c1);//class java.util.ArrayList System.out.println(c2);//class java.util.ArrayList //结论:一个类无论被实例化多少次,它在JVM中的Class对象/实例永远只有1个// User user1 = new User();// System.out.println(user1.getClass());//class tech.aistar.day05.User//// User user2 = new User();// System.out.println(user2.getClass());//class tech.aistar.day05.User//// System.out.println(user1.getClass() == user2.getClass());//true &#125;&#125; 注意: 1、创建泛型对象的时候，一定要指出类型变量T的具体类型。争取让编译器检查出错误，而不是留给JVM运行的时候抛出类不匹配的异常。 2、JVM如何理解泛型概念 —— 类型擦除。事实上，JVM并不知道泛型，所有的泛型在编译阶段就已经被处理成了普通类和方法。 处理方法很简单，我们叫做类型变量T的擦除(erased) 。 总结：泛型代码与JVM ① 虚拟机中没有泛型，只有普通类和方法。 ② 在编译阶段，所有泛型类的类型参数都会被Object或者它们的限定边界来替换。(类型擦除) ③ 在继承泛型类型的时候，桥方法的合成是为了避免类型变量擦除所带来的多态灾难。 无论我们如何定义一个泛型类型，相应的都会有一个原始类型被自动提供。原始类型的名字就是擦除类型参数的泛型类型的名字。 ​ 泛型通配符 **? extends T - 只能是T类型或者T类型的子类 **- 指定类型的上限 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package tech.aistar.day14;import java.util.*;/** * 本类用来演示: 问号的通配符 * * @author: success * @date: 2021/8/7 9:45 上午 */public class WildCardDemo &#123; public static void main(String[] args) &#123; //只能添加添加null// List&lt;?&gt; list = new ArrayList&lt;&gt;();// //list.add(10);//error// //list.add(&quot;ok&quot;);//error// list.add(null);//ok List&lt;Integer&gt; intList = new ArrayList&lt;&gt;(); intList.add(10); intList.add(20); intList.add(30); List&lt;Long&gt; longList = new ArrayList&lt;&gt;(); longList.add(100L); longList.add(200L); longList.add(300L); //能否定义一个方法,能够打印上面俩个集合 printList(intList); System.out.println(&quot;=====&quot;); printList(longList); &#125; //泛型是不存在多态的. //假设认为是List&lt;Number&gt; list = new ArrayList&lt;Long&gt;();//error //Integer和Long都是extends Number //? extends T - 只能是T类型或者T类型的子类 - 指定类型的上限 //? super T - 只能是T类型或者T类型的父类 - 指定类型的下限 public static void printList(List&lt;? extends Number&gt; list)&#123; //推荐使用集合的迭代器 //获取集合的迭代器对象 Iterator&lt;? extends Number&gt; iter = list.iterator(); while(iter.hasNext())&#123; //Integer,Long -&gt; extends-&gt;Number-&gt;多态的语法 Number result = iter.next(); System.out.println(result); &#125; &#125;&#125; ? super T - 只能是T类型或者T类型的父类 - 指定类型的下限 泛型类 定义类的时候,给定一个泛型,真正使用的时候,再确定具体的类型 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package tech.aistar.day14;/** * 本类用来演示: 泛型类* * @author: success * @date: 2021/8/7 10:11 上午*/public class GenericClassDemo&lt;T&gt; &#123; //定义属性 private T type; public GenericClassDemo() &#123; &#125; //将类型参数化传递 public GenericClassDemo(T type) &#123; this.type = type; &#125; //泛型方法 public T getType() &#123; return type; &#125; //将类型参数化传递 public void setType(T type) &#123; this.type = type; &#125; public static void main(String[] args) &#123; //测试泛型类 GenericClassDemo&lt;String&gt; c1 = new GenericClassDemo&lt;&gt;(&quot;python&quot;); c1.setType(&quot;java&quot;); String result = c1.getType(); System.out.println(&quot;result:&quot;+result); System.out.println(&quot;===华丽丽的分割线===&quot;); GenericClassDemo&lt;Integer&gt; c2 = new GenericClassDemo&lt;&gt;(); c2.setType(10); System.out.println(c2.getType()); &#125;&#125; 泛型方法 如果泛型加在类上面,对整个类内部的泛型的地方都会有影响 可能某个类中就那么几个方法需要使用到泛型,没有必要定义泛型类,只需要定义泛型方法即可. 如果若干个很多个方法都使用到了泛型,有必要定义一个泛型类. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package tech.aistar.day14;/** * 本类用来演示: 泛型方法* * @author: success * @date: 2021/8/7 10:17 上午*/public class GenericMethodDemo &#123; //非静态方法 - 无返回类型 public &lt;T&gt; void test01(T t)&#123; System.out.println(&quot;test01...&quot;+t); &#125; //非静态方法 - 带返回类型 public &lt;E&gt; E test02(E e)&#123; System.out.println(&quot;e:&quot;+e); return e; &#125; //静态方法 public static &lt;N&gt; N test03(N n)&#123; System.out.println(&quot;n:&quot;+n); return n; &#125; public static void main(String[] args) &#123; GenericMethodDemo m = new GenericMethodDemo(); //如何确定到方法的参数T //JVM根据传入的方法的实参 - 拿到这个实参的类型 -&gt; 方法的参数T m.test01(10);//Integer m.test01(&quot;ok&quot;);//ok //调用带有返回类型 String ok = m.test02(&quot;ok&quot;); System.out.println(ok); Integer t = m.test02(100); System.out.println(t); System.out.println(&quot;====&quot;); //泛型是类型安全的 Integer s = GenericMethodDemo.test03(12); System.out.println(s); &#125;&#125; 泛型应用1234567ObjectInputStream/ObjectOuputStream - 操作对象类型的字节文件输入流和对象类型的文件字节输出流 Object in.readObject()/out.writeObject(Object obj);Jdk没有对readObject方法进行优化,每次调用完之后,进行强制类型的转换操作的. 思考 - 无论是保存/读取User对象或者Book对象 - 用一个方法去实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293package tech.aistar.util;import tech.aistar.day13.Book;import tech.aistar.day14.Product;import java.io.*;import java.util.ArrayList;import java.util.List;/** * 本类用来演示: IO流的工具类 * * @author: success * @date: 2021/8/7 10:59 上午 */public class IOUtil &#123; //提供一个方法可以保存任意对象 public static &lt;T&gt; void writeList(List&lt;T&gt; list,String path)&#123; try(ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(path)))&#123; out.writeObject(list); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; //提供一个方法可以读取文件中的任意对象 //语法如果定义成了一个泛型类,并且是静态方法的话,那么必须要把这个静态方法也设置成泛型方法 //如果是定义成了一个泛型类,但是是普通方法的话,那么这个普通方法是不需要设置成泛型方法的 public static &lt;T&gt; List&lt;T&gt; readList(String path)&#123; List&lt;T&gt; list = null; try(ObjectInputStream in = new ObjectInputStream(new FileInputStream(path)))&#123; list = (List&lt;T&gt;) in.readObject(); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; return list; &#125;&#125;class IOUtilTest&#123; public static void main(String[] args) &#123; Book b1 = new Book(1,&quot;1001&quot;,&quot;python&quot;,100.0d); Book b2 = new Book(2,&quot;1002&quot;,&quot;java&quot;,100.0d); List&lt;Book&gt; books = new ArrayList&lt;&gt;(); books.add(b1); books.add(b2); String path = &quot;src/tech/aistar/util/content.txt&quot;; //写入 //IOUtil.writeList(books,path); //读// List&lt;Book&gt; list = IOUtil.readList(path);// if(null!=list &amp;&amp; list.size()&gt;0)&#123;// for (Book book : list) &#123;// System.out.println(book);// &#125;// &#125; System.out.println(&quot;======&quot;); Product p1 = new Product(1,&quot;macbook&quot;); Product p2 = new Product(2,&quot;linux&quot;); List&lt;Product&gt; products = new ArrayList&lt;&gt;(); products.add(p1); products.add(p2); //IOUtil.writeList(products,path); List&lt;Product&gt; ps = IOUtil.readList(path); if(null!=ps &amp;&amp; ps.size()&gt;0)&#123; for (Product p : ps) &#123; System.out.println(p); &#125; &#125; &#125;&#125; 泛型类的继承 子类不指定具体的类型 子类指定具体的类型 demo1234567891011121314151617181920212223package tech.aistar.day14;/** * 本类用来演示: 泛型类的继承 * * @author: success * @date: 2021/8/9 8:34 上午 */public class GenericExtendsDemo &#123;&#125;//泛型父类class Sup&lt;T&gt;&#123; &#125;//子类继承父类的时候,没有指定具体的类型class Sub&lt;T&gt; extends Sup&lt;T&gt;&#123; &#125;//子类继承父类的时候,指定了具体的类型class Sub01&lt;Product&gt; extends Sup&lt;Product&gt;&#123; &#125; 泛型的具体应用 了解一下即可 场景:在接口的制定中.很多接口具有相同的或者类似的功能.比如 1234567891011121314151617181920//dao层接口 - data access object - 数据访问对象层 - 数据持久层//这一层专门和数据库[crud增删改查操作][文件_IO流操作]打交道//教师的业务接口public interface ITeacherDao&#123; //保存教师 void save(Teacher teacher);&#125;//学生的业务接口public interface IStudentDao&#123;// 保存学生void save(Student student);&#125;//再去写俩个具体的实现类分别是TeacherDaoImpl.java以及StudentDaoImpl.java//这俩个实现类中 - 具体的代码,现阶段知识点 - 把单个java对象保存到文件中[IO流技术].//未来 - 肯定是要把java对象保存到db中 - 持久化的操作[java内存中的对象保存到DB中]//关于dao层 - java如何操作数据库 - 原生技术jdbc,dao层框架 - Hibernate框架以及mybatis框架//比如现在选取的是所谓的Hibernate框架 Hibernate框架来把java的内存对象保存到DB中 123session.beginTransaction();//开启一个事务session.save(user);//具体的调用的是这个框架中的保存方法session.getTransaction().commit();//提交一个事务 TeacherDaoImpl.java伪代码 12345678public class TeacherDaoImpl implements ITeacherDao&#123; @Override public void save(Teacher teacher)&#123; session.beginTransaction();//开启一个事务 session.save(teacher);//具体的调用的是这个框架中的保存方法 session.getTransaction().commit();//提交一个事务 &#125;&#125; StudentDaoImpl.java 12345678public class StudentDaoImpl implements IStudentDao&#123; @Override public void save(Student student)&#123; session.beginTransaction();//开启一个事务 session.save(student);//具体的调用的是这个框架中的保存方法 session.getTransaction().commit();//提交一个事务 &#125;&#125; 发现在未来使用框架的时候,会发现很多步骤都是重复的.可能就涉及到具体的对象那一行的代码才会不一样而已 1session.save(具体的java对象); 考虑抽象出一个顶级的业务接口出来-IBaseDao&lt;T&gt; 1234567891011/** * 本类用来演示: 顶级的业务接口 * * @author: success * @date: 2021/8/9 8:50 上午 */public interface IBaseDao&lt;T&gt; &#123; //顶级的业务接口中应该存储的就是各个子接口中共性的方法 //这些方法都有共同点 - 大部分的代码是一样的,仅仅是操作的对象不一样而已. void save(T t);&#125; 制定顶级的接口的实现类BaseDaoImpl.java 123456789101112131415161718package tech.aistar.day14.app.dao;/** * 本类用来演示: 顶级接口的实现类 * * @author: success * @date: 2021/8/9 8:53 上午 */public class BaseDaoImpl&lt;T&gt; implements IBaseDao&lt;T&gt; &#123; @Override public void save(T t) &#123;// session.beginTransaction();//开启一个事务// session.save(t);//具体的调用的是这个框架中的保存方法// session.getTransaction().commit();//提交一个事务 System.out.println(t); &#125;&#125; IStudentDao.java继承了顶级的业务接口 12345678910111213package tech.aistar.day14.app.dao;import tech.aistar.day14.app.Student;/** * 本类用来演示: 具体的业务接口去继承这个顶级的业务接口 * * @author: success * @date: 2021/8/9 8:52 上午 */public interface IStudentDao extends IBaseDao&lt;Student&gt;&#123; void taoKe();//子接口中特有的方法&#125; ITeacherDao.java继承了顶级的业务接口 1234567891011121314package tech.aistar.day14.app.dao;import tech.aistar.day14.app.Teacher;/** * 本类用来演示: * * @author: success * @date: 2021/8/9 8:52 上午 */public interface ITeacherDao extends IBaseDao&lt;Teacher&gt;&#123; void buKe();//子接口中特有的方法&#125; 俩个具体的实现类 - 需要继承顶级的BaseDaoImpl.java - save方法已经实现好了.同时还需要各自实现自己的接口 123456789101112131415161718package tech.aistar.day14.app.dao;import tech.aistar.day14.app.Student;/** * 本类用来演示: 具体的学生接口的实现类 * * @author: success * @date: 2021/8/9 8:55 上午 *///泛型继承 - 指定了泛型类public class StudentDaoImpl extends BaseDaoImpl&lt;Student&gt; implements IStudentDao&#123; @Override public void taoKe() &#123; System.out.println(&quot;逃课...&quot;); &#125;&#125; 12345678910111213141516package tech.aistar.day14.app.dao;import tech.aistar.day14.app.Teacher;/** * 本类用来演示: * * @author: success * @date: 2021/8/9 9:02 上午 */public class TeacherDaoImpl extends BaseDaoImpl&lt;Teacher&gt; implements ITeacherDao&#123; @Override public void buKe() &#123; System.out.println(&quot;补课...&quot;); &#125;&#125; 单元测试 1234567891011121314151617181920212223package tech.aistar.day14.app.dao;import tech.aistar.day14.app.Student;import tech.aistar.day14.app.Teacher;/** * 本类用来演示: * * @author: success * @date: 2021/8/9 8:56 上午 */public class TestBase &#123; public static void main(String[] args) &#123; Student s = new Student(1,&quot;tom&quot;); IStudentDao studentDao = new StudentDaoImpl(); studentDao.save(s); Teacher teacher = new Teacher(1,&quot;仓考试&quot;); ITeacherDao teacherDao = new TeacherDaoImpl(); teacherDao.save(teacher); &#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"设计模式","slug":"设计模式","date":"2021-08-06T02:22:33.000Z","updated":"2021-08-08T14:22:47.270Z","comments":true,"path":"2021/08/06/设计模式/","link":"","permalink":"http://example.com/2021/08/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"设计模式概述设计模式概念设计模式（Design Pattern）是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。 使用设计模式的目的：为了代码可重用性、让代码更容易被他人理解、保证代码可靠性。 设计模式使代码编写真正工程化；设计模式是软件工程的基石脉络，如同大厦的结构一样。 项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。 七大原则为什么要提倡“Design Pattern”呢？根本原因是为了代码复用，增加可维护性。那么怎么才能实现代码复用呢？面开闭原则具有理想主义的色彩，它是面向对象设计的终极目标。其他几条，则可以看做是开闭原则的实现方法。 单一职责原则简介:单一职责原则（Single Responsiblity Principle SRP） 接口或类只提供一种业务实现。单一职责原则宗旨是每个接口、类的功能，只能用来做专门的事，强调系统内业务职责唯一，避免职责扩散，做到业务统一管理. 开闭原则简介:总原则:开闭原则（Open Close Principle） 开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代 码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等，后面的具体设计中我们会提到这点。 单一职责原则不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。 里氏替换原则简介:里氏替换原则（Liskov Substitution Principle） 里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP 是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实 现抽象化的具体步骤的规范。里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。 因为继承带来的侵入性，增加了耦合性，也降低了代码灵活性，父类修改代码，子类也会受到影响，此时就需要里氏替换原则。 子类必须实现父类的抽象方法，但不得重写（覆盖）父类的非抽象（已实现）方法。 子类中可以增加自己特有的方法。 当子类覆盖或实现父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。 当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。 依赖倒转原则简介:依赖倒转原则（Dependence Inversion Principle） 这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。 接口隔离原则简介:接口隔离原则（Interface Segregation Principle） 这个原则的意思是：每个接口中不存在实现类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。 迪米特法则简介:迪米特法则（最少知道原则）（Demeter Principle) 就是说：一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装方法的内部，通过 public 方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。 最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部 变量出现在类中。 合成复用原则简介:合成复用原则（Composite Reuse Principle) 原则是尽量首先使用合成/聚合的方式，而不是使用继承。 static关键字 static修饰的成员是在JVM加载类的时候就会被立即分配空间以及初始化 - 只有1次,内存的实例只有1份 非静态的成员的是在每次创建对象的时候才会被分配空间以及初始化 作用 static修饰符类 - 静态内部类[过] 修饰的属性 - 静态属性 方法 - 静态方法 代码块 - 静态代码块 JVM加载类进内存的活动顺序 JVM加载类进内存 给所有的静态属性分配空间以及初始化 给所有的静态方法分配空间以及初始化 调用静态代码块 如果创建了对象 4-1. 给这个对象的所有的非静态属性分配空间以及初始化 4-2. 给这个对象的所有的非静态方法分配空间 4-3. 调用普通代码块 4-4. 调用构造块 static关键字应用 设计模式 - 单例模式 如何保证某个类的对象在内存中永远只有1份.后期,某些类的创建和销毁的时间成本比较高.这些类有必要设计成单例的. 比如jdbc中的连接池对象[重量级的对象] 单例饿汉模式 多线程安全12345678910111213141516171819202122232425262728293031package tech.aistar.design.singleton.version01;/** * 本类用来演示: 将Singleton01设置成饿汉模式 - 单例的 * * @author: success * @date: 2021/7/27 9:28 上午 */public class Singleton01 &#123; //2. 初始化一个变量,该变量就是该类的唯一实例[对象] private static Singleton01 instance = new Singleton01(); //1. 私有化构造 private Singleton01()&#123; //比较费时费力的代码,可能需要更多的时间 System.out.println(&quot;Singleton01...&quot;); &#125; //3. 提供一个公开的静态的方法来返回这个类的唯一实例 public static Singleton01 getInstance()&#123; return instance; &#125;&#125;class TestSingleton01&#123; public static void main(String[] args) &#123; //获取类的实例 Singleton01 s1 = Singleton01.getInstance(); Singleton01 s2 = Singleton01.getInstance(); System.out.println(s1 == s2);//true &#125;&#125; 懒汉模式 多线程不安全123456789101112131415161718192021222324252627package tech.aistar.design.singleton.version02;/** * 本类用来演示: 懒汉 * * @author: success * @date: 2021/7/27 9:35 上午 */public class Singleton02 &#123; private static Singleton02 instance; private Singleton02()&#123; System.out.println(&quot;私有化构造&quot;); &#125; public static Singleton02 getInstance()&#123; return instance == null?instance = new Singleton02():instance; &#125;&#125;class TestSingleton02&#123; public static void main(String[] args) &#123;// Singleton02 s1 = Singleton02.getInstance();// Singleton02 s2 = Singleton02.getInstance();// System.out.println(s1 == s2); &#125;&#125; 双重检查锁 - 笔试脱手写的版本 懒汉模式下 - 仍然是多线程安全的 1234567891011121314151617181920212223242526272829303132333435363738package tech.aistar.design.singleton.version03;/** * 本类用来演示:双重检查锁 - 笔试脱手写的版本* * @author: success * @date: 2021/7/27 10:07 上午*/public class Singleton03 &#123; private static Singleton03 instance; private Singleton03()&#123; System.out.println(&quot;私有化构造&quot;); &#125; public static Singleton03 getInstance()&#123; //因为本身&quot;锁&quot;资源就是一个比较昂贵的资源,为了避免跑得慢的线程去抢这个把锁,所以此处也要进行非空判断. if(instance == null)&#123; //跑得快的线程都会进入此处A,B //A,B线程就会去争抢锁资源,谁抢到锁资源,谁就会进入 //同步代码块去执行里面的代码 //假设A线程抢到了,B就会在等待 synchronized (Singleton03.class)&#123; //A进入判断instance==null //只要抢到&quot;锁&quot;的线程,如果此处没有非null判断 //那么进入到这的线程都会去执行instance = new Singleton03(); if(instance == null)&#123; //由A线程进行实例的初始化 //A继续执行,等A执行完毕之后,那么A就会释放锁资源 //其他线程继续争抢锁资源. instance = new Singleton03(); &#125; &#125; &#125; return instance; &#125;&#125; volatile 可见性 - 忽略 禁止JVM的指令重排 12345678910int i=10;//原子性操作Student s = new Student();//不是一个原子性操作①给s对象分配内存空间②调用构造块,执行构造函数 - 初始化动作③将引用s指向内存中的那个对象. 但是JVM内部会对这些指令进行一个优化操作.本来你的顺序应该是①-②-③,经过JVM指令重排之后,顺序有可能变成①-③-② 123456789101112131415161718192021222324252627282930313233343536373839package tech.aistar.design.singleton.version03;/** * 本类用来演示:双重检查锁 - 笔试脱手写的版本 * * @author: success * @date: 2021/7/27 10:07 上午 */public class Singleton03 &#123; private volatile static Singleton03 instance; //private static Singleton03 instance; private Singleton03()&#123; System.out.println(&quot;私有化构造&quot;); &#125; public static Singleton03 getInstance()&#123; //② - 跑得很慢的线程刚刚到达此处,其他线程判断instance是不为null的 //但是instance可能指向的是一个&quot;半成品&quot; - A线程还没有完成构造方法. //其他线程可能会使用到这个&quot;半成品&quot;对象,肯定会有问题. if(instance == null)&#123; synchronized (Singleton03.class)&#123; if(instance == null)&#123; //① - A线程可能执行到2步骤的时候,instance已经不为null //不是一个原子性操作,可能经过JVM指令重排 //1. 给instance对象分配空间 //2. 将对象的内存地址赋值给了instance //3. 调用构造方法 instance = new Singleton03(); &#125; &#125; &#125; return instance; &#125;&#125; 简单工厂模式简单工厂模式是属于创建型模式，但不属于23种GOF设计模式之一。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式，可以理解为是不同工厂模式的一个特殊实现。简单工厂一般分为：普通简单工厂、多方法简单工厂、静态方法简单工厂。 作用:把对象的创建和对象的使用分离 User user = new User();//对象的创建和对象使用没有分离 普通简单工厂 - 必须要脱手写出来的.1234567891011121314151617181920212223242526272829303132333435//1. 根据传入的参数来返回某个具体的产品[对象]package tech.aistar.design.factory.simple01;/** * 本类用来演示: 简单工厂 * * @author: success * @date: 2021/7/23 3:19 下午 */public class ProductFactory &#123; public static final int QQ = 1; public static final int WX = 2; //根据传入的参数来返回某个具体的产品 //多态的应用 - 面向接口编程 //3. 方法的返回类型写成接口,方法的执行结果可以是这个接口的任意一个实现类. public static Sender getInstance(int type)&#123; Sender sender = null; switch (type)&#123; case 1: //对象的创建 - 复杂的过程... sender = new QQSender(); break; case 2: sender = new WXSender(); break; default: System.out.println(&quot;参数不合法&quot;); break; &#125; return sender; &#125;&#125; 多方法简单工厂1234567891011121314151617181920package tech.aistar.design.factory.simple02;/** * 本类用来演示: 多方法工厂 * * @author: success * @date: 2021/7/23 3:32 下午 */public class ProductFactory &#123; //有几个产品,就定义几个方法 //每个方法负责生成一个产品 public Sender createQQ()&#123; return new QQSender(); &#125; public Sender createWx()&#123; return new WXSender(); &#125;&#125; 静态方法简单工厂1234567891011121314151617181920package tech.aistar.design.factory.simple02;/** * 本类用来演示: 多方法工厂 * * @author: success * @date: 2021/7/23 3:32 下午 */public class ProductFactory &#123; //有几个产品,就定义几个方法 //每个方法负责生成一个产品 public static Sender createQQ()&#123; return new QQSender(); &#125; public static Sender createWx()&#123; return new WXSender(); &#125;&#125; 简单工厂优缺点优点： 很明显，简单工厂的特点就是“简单粗暴”，通过一个含参的工厂方法，我们可以实例化任何产品类，上至飞机火箭，下至土豆面条，无所不能。所以简单工厂有一个别名：上帝类。 缺点： 任何”东西“的子类都可以被生产，负担太重。当所要生产产品种类非常多时，工厂方法的代码量可能会很庞大 在遵循开闭原则（对拓展开放，对修改关闭）的条件下，简单工厂对于增加新的产品，无能为力。因为增加新产品只能通过修改工厂方法来实现。 工厂方法模式简单工厂模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了开闭原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到工厂方法模式，创建一个工厂接口和创建多个工厂实现类，这样一旦需要增加新的功能， 直接增加新的工厂类就可以了，不需要修改之前的代码。 工厂方法模式优缺点优点： 工厂方法模式就很好的减轻了工厂类的负担，把某一类/某一种东西交由一个工厂生产；（对应简单工厂的缺点1） 同时增加某一类”东西“并不需要修改工厂类，只需要添加生产这类”东西“的工厂即可，使得工厂类符合开闭原则。 缺点： 相比简单工厂，实现略复杂。 对于某些可以形成产品族的情况处理比较复杂（相对抽象工厂）。 抽象工厂模式抽象工厂模式是所有形态的工厂模式中最为抽象和最具一般性的一种形态。抽象工厂模式是指当有多个抽象角色时，使用的一种工厂模式。抽象工厂模式可以向客户端提供一个接口，使客户端在不必指定产品的具体的情况下，创建多个产品族中的产品对象。根据里氏替换原则，任何接受父类型的地方，都应当能够接受子类型。因此，实际上系统所需要的，仅仅是类型与这些抽象产品角色相同的一些实例，而不是这些抽象产品的实例。换言之，也就是这些抽象产品的具体子类的实例。工厂类负责创建抽象产品的具体子类的实例。 抽象工厂模式优缺点优点： 抽象工厂模式隔离了具体类的生产，使得客户并不需要知道什么被创建。 当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。 增加新的具体工厂和产品族很方便，无须修改已有系统，符合“开闭原则”。 ​ 缺点： 增加新的产品等级结构很复杂，需要修改抽象工厂和所有的具体工厂类。 装饰器模式 IO流使用到了”装饰器”设计模式思想 装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。 UML Unified Modeling Language- 统一建模语言 BA - 需求分析师 powerndesigner starUML 掌握目标: 看懂箭头即可 类与类之间由弱到强关系是: *没关系 &gt;** **依赖 &gt; 关联 &gt; 聚合 &gt; 组合。* 依赖 虚线+箭头&lt;—— 可以简单的理解，就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、、临时性的、非常弱的 123456789101112131415public class A&#123;public void test(B b)&#123; //自己的功能 //B类中的功能 b.test();&#125;&#125;public class B&#123;&#125; 关联 箭头 实线+箭头&lt;- A类关联了B类 - A依赖于B 1234567public class A&#123;private B b;&#125;public class B&#123;&#125; 组合关系 属于关联的一种 - 强调的是整体和局部的关系,这种关系非常紧密.整体是可以决定局部的生命周期的. 箭头 - 实线+实心菱形 123456789101112131415161718192021222324package tech.aistar.uml.combination;/** * 本类用来演示:属于关联的一种 - 强调的是整体和局部的关系,这种关系非常紧密. * 整体是可以决定局部的生命周期的.* * @author: success * @date: 2021/8/4 10:34 上午*/public class Baby &#123; private Eye eye; private Hand hand; public Baby()&#123; this.eye = new Eye(); this.hand = new Hand(); &#125; public static void main(String[] args) &#123; Baby b = new Baby(); &#125;&#125; 聚合关系 属于关联的一种 - 强调的是整体和局部的关系,这种关系较紧密.整体是可以不用决定局部的生命周期的 - 局部单独存在的 箭头 - 实线+空心菱形 1234567public class Computer &#123; private Cpu cpu; public Computer(Cpu cpu)&#123; this.cpu = cpu; &#125;&#125;","categories":[{"name":"设计模式","slug":"设计模式","permalink":"http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"IO流","slug":"IO流","date":"2021-08-05T12:13:04.000Z","updated":"2021-08-05T12:44:18.837Z","comments":true,"path":"2021/08/05/IO流/","link":"","permalink":"http://example.com/2021/08/05/IO%E6%B5%81/","excerpt":"","text":"IO流 流是一种抽象概念，它代表了数据的无结构化传递。按照流的方式[数据在传输之前,需要进行转换,转换成无结构的字节/字符序列]进行有序的输入输出，数据被当成无结构的字节序或字符序列。从流中取得数据的操作称为提取操作，而向流中添加数据的操作称为插入操作。用来进行输入输出操作的流就称为IO流。换句话说，IO流就是以流的方式进行输入(Input)输出(Output)……… 流想象成是数据传输的那个管道 磁盘中数据加载/读入到内存中 - 输入 java内存中数据写出去到磁盘中 - 输出 流的分类 按照流的方向 - 输入流和输出流 按照流的读取的单位不同 - 字节流[按照单个字节单个字节进行读写,文本文件或者二进制文件]和字符流[单个字符进行读写,只能操作文本字符文件] 按照流的功能 - 节点流[基础流]和拓展流[过滤流或者包装流] - 采用了”装饰器设计模式思想” **节点流才具备真正操作文件的能力.**拓展流只是让流的功能更加强大而已,拓展流脱离了节点流的话,那么是不允许的. 拓展流的使用必须要建立在节点流的基础之上. 字节流字节输入流 java.io.InputStream[C] - 字节输入流的顶级的抽象的父类 java.io.FileInputStream[C] - 文件字节输入流 - 操作文件的读操作. - 典型的节点流 java.io.ObjectInputStream[C] - 操作对象类型的字节输入流 - 典型的包装流 java.io.FilterInputStream[C] - 过滤流 java.io.BufferedInputStream[C] - 带缓存功能的流 - 缓冲流 java.io.DataInputStream[C] - 操作基本数据类型的字节输入流 字节输出流 java.io.OutputStream[C] - 字节输出流的顶级的抽象的父类 java.io.FileOutputStream[C] - 文件字节输出流 - 操作文件的写操作. - 典型的节点流 java.io.ObjectOutputStream[C] - 操作对象类型的字节输出流 - 典型的包装流 java.io.FilterOutputStream[C] - 过滤流 java.io.BufferedOutputStream[C] - 带缓存功能的流 - 缓冲流 java.io.DataOutputStream[C] - 操作基本数据类型的字节输出流 InputStream常用方法 void close();//关闭流,流本身就是一个对象[占内存 - 昂贵的资源] abstract int read();//单个字节单个字节的读取,如果读不到,返回-1 int read(byte[] b);//从输入流读取一些字节数，并将它们存储到缓冲区 b 。 OutputStream常用方法 void close();//关闭 abstract void write(int b);将指定的字节写入此输出流。 void write(byte[] b, int off, int len); IO流的编程步骤 确定流 - 选什么流 确定源头和目标 循环读取,循环写出 - while 关闭流 缓冲流BufferedInputStream 在它出来之前,可以可以单个字节单个字节进行读写操作 - 弊端:java程序和磁盘的IO交互比较频繁,性能就会低下. 采取了自定义的数组的方式.从磁盘文件中读取一定数量的字节先放入到缓冲数组中.然后再从缓冲数组中一次性写出到磁盘中. 减少了java程序和磁盘的IO交互 - 性能提高. JDK中发现了这点,提供了缓冲流BufferedInputStream 123456789101112131415private static int DEFAULT_BUFFER_SIZE = 8192;//默认的容量8kbprotected volatile byte buf[];//内置的缓冲区public BufferedInputStream(InputStream in) &#123;this(in, DEFAULT_BUFFER_SIZE);&#125;public BufferedInputStream(InputStream in, int size) &#123;super(in);if (size &lt;= 0) &#123; throw new IllegalArgumentException(&quot;Buffer size &lt;= 0&quot;);&#125;buf = new byte[size];//初始化内置的缓冲区数组 - 大小是8kb&#125; 底层利用了”装饰器”思想.这个流属于包装流,拓展流,过滤流,本身不具备真正的文件的读写能力. 构建带缓冲功能的流,必须要以节点流作为支撑 构架一个带缓冲功能的能够读取文件的字节输入流 BufferedInputStream in = new BufferedInputStream(new FileInputStream(“路径”)); BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(“路径”)); 缓冲数组 BufferedInputStream本身已经在底层定义了8kb的字节数组,那么为什么程序中还自定义了一个3kb的字节数组[可以不定义,read()方法],自定义的byte[]和内置的byte[]各自的作用是什么? 内置的8kb的byte[] - 在一开始或者后面空闲的时候,由JVM去装载磁盘上的数据,提前放入到这个内置的byte[]中的. 12345678910111213141516171819202122232425262728293031323334353637383940414243package tech.aistar.day13;import java.io.*;/** * 本类用来演示: 缓冲流 * * @author: success * @date: 2021/8/5 2:18 下午 */public class BufferDemo &#123; public static void main(String[] args) &#123; BufferedInputStream in = null; BufferedOutputStream out = null; try &#123; //jvm加载磁盘上的数据到内置的byte[]中 in = new BufferedInputStream(new FileInputStream(&quot;src/tech/aistar/day13/fast.gif&quot;)); out = new BufferedOutputStream(new FileOutputStream(&quot;src/tech/aistar/day13/fast_副本.gif&quot;)); //自定义一个byte[] //真正的读 byte[] buf = new byte[3*1024]; int len = -1; while(true)&#123; len = in.read(buf); if(len==-1) break; out.write(buf,0,len); &#125; System.out.println(&quot;文件拷贝成功!&quot;); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 读过程 当初始化好缓冲流之后,jvm会立即读取磁盘中的数据到内置的缓冲数组中 当程序中循环读取到的时候 len = in.read(buf); = 程序是直接从内置的缓冲区[内置的缓冲数组中] 一旦内置的数组中的8kb数据被取完,那么jvm在空闲的时候,继续加载文件中下一个8kb的字节到内置的缓冲区. 语法糖 jdk7.0提供的写法 作用 - 把流的关闭交给JVM 12345try(资源对象的声明1;资源对象的声明2)&#123;&#125;catch(..)&#123;...&#125; 123456789101112131415161718192021222324252627282930313233343536package tech.aistar.day13;import java.io.*;/** * 本类用来演示: 语法糖 - JVM去关闭流 * * @author: success * @date: 2021/8/5 2:39 下午 */@SuppressWarnings(&quot;all&quot;)public class StreamAutoCloseDemo &#123; public static void main(String[] args) &#123; //自动关闭这些资源 try(BufferedInputStream in = new BufferedInputStream(new FileInputStream(&quot;src/tech/aistar/day13/fast.gif&quot;)); BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(&quot;src/tech/aistar/day13/fasts.gif&quot;)))&#123; //自定义一个byte[] byte[] buf = new byte[3*1024]; int len = -1; while(true)&#123; len = in.read(buf); if(len==-1) break; out.write(buf,0,len); &#125; System.out.println(&quot;文件拷贝成功!&quot;); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125;&#125; ObjectInputStream/ObjectOutputStream 操作对象类型的字节输入流和字节输出流,拓展流,必须要以节点流作为支撑 构建一个能够读写对象类型的文件字节输入流/输出流 1ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;path&quot;)) 构建一个能够读写对象类型的并且带缓冲功能的文件字节输入流 1ObjectInputStream in = new ObjectInputStream(new BufferedInputStream(new FileInputStream(&quot;path&quot;))); 利用”装饰器”思想,我们构建出功能更加强大的流,但是又不会对原来的流的结构产生任何影响. 对象的序列化 也叫做 - 数据的持久化的过程. - 把内存中的java对象存储到磁盘的文件的过程. 注意点: 如果保存的是单个对象,这个对象的实体类必须要实现java.io.Serializable序列化接口 如果没有实现这个接口,进行序列化的时候,抛出一个java.io.NotSerializableException不可被序列化的异常 保存的是数组/集合,那么集合中的每个对象对应的实体类也是需要实现这个序列化的接口 关于追加写入,设置FileOutputStream(String path,boolean append);//append设置true,但是不支持分批次读取. 对象的反序列化 java对象已经存储到磁盘的文件中,希望再从文件中将这些对象数据加载到内存中[映射到java对象上]. CURD操作① 实体类 - 接口 - 实现类 - 单元测试 操作文件中的数据 tech.aistar.day13.prj entity - Phone.java[id,name,price] dao - data access object [IPhoneDao.java]数据对象访问 - 数据持久层 - 和文件进行打交道的一层 - 接口 impl - 接口的实现类PhoneDaoImpl.java test - 单元测试 笔试题 文件夹的拷贝②","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"File类","slug":"File类","date":"2021-08-05T12:11:22.000Z","updated":"2021-08-05T12:11:47.756Z","comments":true,"path":"2021/08/05/File类/","link":"","permalink":"http://example.com/2021/08/05/File%E7%B1%BB/","excerpt":"","text":"File java.io.File[C] - File包含文件或者文件夹[目录directory] 作用:它是用来操作File本身的元信息的[比如支持File的创建,删除,获取File的名称,获取File的路径等信息] 它并不支持文件里面的内容的读写操作[文件内中的内容的读写操作是交给IO流去实现] 支持本地File以及远程File的操作的. File对象 - Java程序将磁盘上的文件加载内存中然后映射到File对象上 - File是内存中的磁盘上的映射. 构造方法 File(String path);//利用一个路径来构建一个File实例.这个路径可以是文件的路径,也可以是文件夹的路径 路径分成相对路径和绝对路径. 绝对路径 - windows操作系统是以盘符号开头的路径,Linux/mac以/开头的路径 相对路径 - 不是以盘符或者/开头的路径 常用方法 boolean createNewFile();//创建一个文件,该方法是要抓取异常的. String getAbsolutePath();//获取该File的绝对路径 String getName();//获取File的名称 String getParent();//获取该File的父目录的绝对路径 boolean exists();//判断File是否存在 boolean delete();//删除文件或者文件夹 6-1. 文件是否可以直接被删除的 6-2. 如果是空目录 - 直接删除的 6-2. 如果是非空目录 - 将会删除失败 - 递归算法来实现的. boolean mkdir();//创建单层次的目录,一次只能创建一个目录 boolean mkdirs();//既可以创建单层次的目录,又可以同时创建多个不存在的目录. boolean isFile();//判断File实例是否为文件的实例 boolean isDirectory();//判断file实例是否为文件夹的实例 String[] list();//返回的是File的名称,返回的是传入的路径下的第一层的内容. File[] listFiles();//返回的第一层的File实例 File[] listFiles(FilenameFilter filter);//找到指定后缀/前缀/满足条件的这么一个File实例 练习 传入一个目录,输出这个目录下的所有的内容. 如果是文件 - 直接输出名称 如果是文件夹 - 输出绝对路径 作业 删除一个非空目录","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"异常","slug":"异常","date":"2021-08-04T04:31:31.000Z","updated":"2021-08-06T13:12:29.848Z","comments":true,"path":"2021/08/04/异常/","link":"","permalink":"http://example.com/2021/08/04/%E5%BC%82%E5%B8%B8/","excerpt":"","text":"四种内部类 看懂别人写的内部类语法即可 成员内部类 - 把内部类看成是外部类的一个成员 a. 成员内部类不能再去定义静态成员 b. 成员内部类中可以通过Outer.this.非静态属性名来访问外部类的非静态属性 1外部类.内部类 对象名 = 外部类对象.new 内部类(); 静态内部类- 把内部类看成是外部类的一个静态成员 1外部类.内部类 对象名 = new 外部类.内部类(); a. 内部是可以定义静态和非静态属性的 b. 内部的普通方法中是不允许访问外部类的非静态属性的. c. 内部的普通方法中是允许访问外部类的静态属性的 局部内部类 - 内部类是出现在外部类的方法中. a. 内部类是不允许使用访问修饰符,比如不能使用public b. 不能定义静态属性的 c. 访问到外部类的静态和非静态成员的 d. 生命只在所在的方法中,方法外部是没有办法拿到这个对象的(不能直接在外部new) 匿名内部类 - 必须掌握的 好处 - 我们可以在程序中少写实现类 jdk8.x中如果遇到函数式接口.推荐使用lambda表达式来替代匿名内部类的写法的. Throwable java.lang.Throwable - 异常和错误的顶级的类 两个分支: java.lang.Error - 错误 - 错误一旦发生,程序员是么有办法进行扭转的 - 不需要在代码中进行处理. 1-1. 子类VirtualMachineError虚拟机级别的错误 ​ 1-1-1. 子类java.lang.StackOverflowError 堆栈溢出 - 应用程序因为递归太深没有指定出口的时候. ​ 1-1-2. 子类java.lang.OutOfMemoryError 内存泄漏 - [GC垃圾回收机制 - 后台自动回收垃圾对象] java.lang.Exception - 异常 - 程序在运行的过程中发生了不正常的情况. 异常的分类 运行时异常[RuntimeException]都是非运行时异常的子类[Exception] 运行时异常 - 未检测异常 顶级的父类java.lang.RuntimeException java.lang.NullPointerException - 空指针异常 java.util.InputMismatchException - 输入不匹配异常 12Scanner sc = new Scanner(System.in);int n = sc.nextInt();//只能获取整数.但是输入了一个字符串&quot;abc&quot; java.lang.ArithmeticException - 分母为0 java.lang.IllegalArgumentException - 非法参数异常 12SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);构造中的模板如果传入了一个非法模板 java.lang.IndexOutOfBoundsException - 下标越界异常 - 比如list.get(100); 5-1. java.lang.StringIndexOutOfBoundsException - 字符串下标越界异常 5-2. java.lang.ArrayIndexOutOfBoundsException - 数组下标越界异常 java.util.NoSuchElementException - 不存在此元素 12LinkedList&lt;Character&gt; list = new LinkedList&lt;&gt;();System.out.println(list.getFirst());//获取栈顶元素,但是栈顶没有元素 java.lang.ClassCastException - 类型转换失败异常 1父类类型转换成子类类型之前,推荐先使用instanceof关键字进行类型的判断 非运行时异常 - 已检测异常 java.text.ParseException - 解析失败异常 - 字符串的模板和pattern不匹配 InterruptedException - 中断异常 - Thread.sleep(1000); java.lang.CloneNotSupportedException - 不允许被clone. 1当调用对象的clone方法,但是这个对象没有去实现java.lang.Cloneable接口 java.io.IOExcetion - IO流异常 4-1. java.io.EOFException - 已经读取到文件的末尾了. 4-2. java.io.FileNotFoundException - 文件找不到异常 java.sql.SQLException - SQL异常,比如程序中的sql语句要是写错了. 异常的处理方式 运行时异常不需要处理(也是可以处理的),只需要在编程的时候,注意一下验证/判断.稍微谨慎一点. 非运行时异常 - 编译期间就需要立即对其进行处理.处理的方式有俩种.一种是积极处理 - try..catch的方式 另外一种是消极处理. 积极处理方式 语法一 - try….catch….catch….finally 推荐使用到的 - 因为针对每种不同的异常进行单独的日志记录,单独的异常处理. 1234567891011try&#123; //code.. //code..&#125;catch(异常类型1 e1)&#123; &#125;catch(异常类型2 e2)&#123; &#125;finally&#123; //无论是否出现异常,都会执行&#125;注意:上方的异常类型不能是下方的异常类型的父类. 语法二 - jdk7.0提供的新的写法 123456try&#123; //code... //code...&#125;catch(异常类型1 | 异常类型2)&#123; //...&#125; 语法三 - 简单粗暴 12345try&#123; //....&#125;catch(异常总父类)&#123; //...&#125; finally中对于返回变量做的改变会影响最终的返回结果吗 当变量的值为基础类型时，不会影响最终的返回结果。 当变量为引用变量的时，会影响最终的返回结果。 消极处理 比如在某个方法中某些代码出现了非运行时异常,那么在自己方法的内部”不着急”去积极处理.而是把这个异常抛出去了. 为了自己不处理,而是抛出去? - 因为这个方法有可能会被反复在其他地方调用 - 原则:谁调用,谁负责最终处理. 原则谨记 - 不要把异常抛给main方法,等同于把异常抛给jvm,等同于一旦出现异常,程序就会崩溃. 直接在方法的签名[声明]上使用throws关键字+异常类型1,异常类型2 在方法体中使用throw+异常对象 12345678910111213public static void d(int n) throws FileNotFoundException &#123; if(n==0)&#123; //System.out.println(&quot;异常的描述....&quot;); //throw + 运行时异常对象,不需要在方法的签名上抛出异常 - 本身运行时异常就不需要处理呀! //throw new RuntimeException(&quot;发生异常了...&quot;); //throw + 非运行时异常 配合 必须要在方法的签名上throws+非运行时异常类型 throw new FileNotFoundException(&quot;文件不存在!&quot;); &#125; System.out.println(&quot;n:&quot;+n);&#125; 笔试题 - throws和throw有什么区别 throws：用来声明一个方法可能产生的所有异常，不做任何处理而是将异常往上传，谁调用我我就抛给谁。 用在方法声明后面，跟的是异常类名 可以跟多个异常类名，用逗号隔开 表示抛出异常，由该方法的调用者来处理 throws表示出现异常的一种可能性，并不一定会发生这些异常throw：则是用来抛出一个具体的异常类型。 用在方法体内，跟的是异常对象名 只能抛出一个异常对象名 表示抛出异常，由方法体内的语句处理 throw则是抛出了异常，执行throw则一定抛出了某种异常 笔试题1123456789101112131415try&#123; //code... //code.. return;//结束整个方法&#125;catch(异常类型 e)&#123; &#125;catch(异常类型 e)&#123; &#125;finally&#123; //无论是否出现异常,都会执行&#125;假设try&#123;&#125;中没有任何异常发生,所有的code都会顺利执行.1. finally中的代码执行否? - 肯定会执行2. return语句是在finally块之前执行还是之后执行? - 之后 笔试题2123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package tech.aistar.day12.exception;/** * 本类用来演示: 笔试题 * * @author: success * @date: 2021/8/4 3:23 下午 */public class FinallyDemo &#123; public static void main(String[] args) &#123; System.out.println(test());//1 System.out.println(change());//A&#123;age=200&#125; &#125; //finally中修改了基本数据类型 public static int test()&#123; int i = 0;//① //try可以直接和finally一起使用.... try&#123; //此处将i自增后的结果缓存起来了.并且这个缓存的结果就是作为最终返回出去的一个结果 - 对待基本数据类型. return ++i; &#125;finally &#123; ++i;//③ System.out.println(&quot;i:&quot;+i); &#125; &#125; //finally修改了对象类型的属性 public static A change()&#123; A a = new A(); try&#123; a.age = 100; //return是在finally之后执行 return a; &#125;finally &#123; //对待对象类型 - finally中的修改对象的属性值,是对return的结果是产生了影响的. a.age = 200; &#125; &#125;&#125;class A&#123; public int age = 18; @Override public String toString() &#123; final StringBuilder sb = new StringBuilder(&quot;A&#123;&quot;); sb.append(&quot;age=&quot;).append(age); sb.append(&#x27;&#125;&#x27;); return sb.toString(); &#125;&#125; 笔试题3 final和finally和finalize三者之间的区别? - 一点关系都没有 final a. 修饰的局部变量一旦赋值成功,不可改变 b. 修饰的属性一旦赋值成功,不可改变 c. 修饰的类不可被继承 d. 修饰的方法不可被重写 finally a. 一般是和try..catch搭配使用的.try块中无论是否出现异常,finally块中代码都会执行 b. finally块中一般写的是释放或者关闭资源的代码 finalize - Object类中提供的方法 a. 当GC想去回收一个垃圾对象之前,会去调用这个对象的finalize方法.是由JVM去调用. b. 该方法未必一定会被调用得到. 自定义异常 项目中其实是专门包exception - 专门自定义自己的异常[大量的] jdk内置的异常不够用,不符合实际的业务场景. 步骤 写一个异常类继承java.lang.Exception 提供父类的5个构造方法即可 思考为什么要自定义异常 1234System.out.println(&quot;余额小于0&quot;); throw new BalanceLtZeroException(&quot;余额小于0!&quot;); 场景:有的时候访问某些网站的时候 - 跳转到一个友好的页面 - 显示比如服务器正在维护/升级… 我们应该提供一个异常处理器 - 会监控软件程序在整个项目运行的过程中发生的一切异常. 一旦它发现了某个地方产生了异常,那么它就会对这些异常进行一个日志记录,然后再让程序跳转到一个友好的界面. SpringMVC/SpringBoot - 异常处理器 - 只认识异常. 复习 重点围绕OO - 面向对象 三大特性 - 封装,继承,多态 抽象类和接口区别 四种访问修饰符的作用权限 方法的重载和方法的重写 单例 - 双重检测锁 简单工厂 static关键字的作用 - static练习 预习 泛型 IO流 - 大头 并发编程 - 多线程 - 大头中的大头 - 最难的最难的最难的 反射技术 - 看懂框架的源码[反射技术 + 设计模式] 动态代理 - [jdk动态代理 + cglib动态代理] 枚举类型","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"面试总","slug":"面试总","date":"2021-07-31T07:18:01.000Z","updated":"2021-08-22T10:33:01.804Z","comments":true,"path":"2021/07/31/面试总/","link":"","permalink":"http://example.com/2021/07/31/%E9%9D%A2%E8%AF%95%E6%80%BB/","excerpt":"","text":"面试Int和Integer的区别 笔试题:int和Integer之间的区别 Integer是int的包装类；int是基本数据类型； Integer变量必须实例化后才能使用；int变量不需要； Integer实际是对象的引用，指向此new的Integer对象；int是直接存储数据值 ； Integer的默认值是null；int的默认值是0。 泛型不支持int，但是支持Integer int 存储在栈中，Integer 对象的引用存储在栈空间中，对象的数据存储在堆空间中。 String,StringBuilder,StringBuffer三者的区别? 三者之间都是使用final修饰的,都是不可被继承的,jdk处于安全角度考虑的 - 共同点 不同点 2-1. String它是不可变的字符串,线程安全的.比较耗系统资源和内存的.性能是三个当中最低的. 2-2. StringBuilder可变的字符串 - 线程不安全的,效率是最高的. 2-3. StringBuffer可变的字符串 - 线程安全的.效率低于StringBuilder,但是高于String 12345自己整理的1. 首先说运行速度，或者说是执行速度，在这方面运行速度快慢为：StringBuilder &gt; StringBuffer &gt; String String最慢的原因：String为字符串常量，而StringBuilder和StringBuffer均为字符串变量，即String对象一旦创建之后该对象是不可更改的，但后两者的对象是变量，是可以更改的。 2. 在线程安全上，String, StringBuilder是线程不安全的，而StringBuffer(有synchronized关键字)是线程安全的 重写和重载的区别 区别点 重载方法 重写方法 参数列表 必须修改 一定不能修改 返回类型 可以修改 一定不能修改 异常 可以修改 可以减少或删除，一定不能抛出新的或者更广的异常 访问 可以修改 一定不能做更严格的限制（可以降低限制） 方法的重写(Overriding)和重载(Overloading)是java多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载可以理解成多态的具体表现形式。 (1)方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。 (2)方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。 (3)方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。 1、目的不同 overload用于增加程序的可读性(做法不同,但是做的同一事情)。 override用于提供其超级类已经提供的方法的特定实现。 2、范围不同 overload 在相同的类范围内内执行。 override发生在两类具有继承（继承）的关系。 3、参数不同 overload参数必须不同。 override参数必须相同。 4、多态性不同 overload 静态多态,调用的函数在编译时被选中。 override 是运行时多态性的。 5、返回类型不同 overload中可以相同或不同。但你必须改变参数。 override必须是相同的或协变的。 throws和throw有什么区别throws：用来声明一个方法可能产生的所有异常，不做任何处理而是将异常往上传，谁调用我我就抛给谁。 用在方法声明后面，跟的是异常类名 可以跟多个异常类名，用逗号隔开 表示抛出异常，由该方法的调用者来处理 throws表示出现异常的一种可能性，并不一定会发生这些异常 throw：则是用来抛出一个具体的异常类型。 用在方法体内，跟的是异常对象名 只能抛出一个异常对象名 表示抛出异常，由方法体内的语句处理 throw则是抛出了异常，执行throw则一定抛出了某种异常 synchronized和Lock有什么区别？ synchronized和lock都是属于独占锁. 实现层面不一样。synchronized 是 Java 关键字，JVM层面 实现加锁和释放锁；Lock 是一个接口，在代码层面实现加锁和释放锁 是否自动释放锁。synchronized 在线程代码执行完或出现异常时自动释放锁；Lock 不会自动释放锁，需要再 finally {} 代码块显式地中释放锁 是否一直等待。synchronized 会导致线程拿不到锁一直等待；Lock 可以设置尝试获取锁或者获取锁失败一定时间超时 1234567Lock接口中提供的方法 1. void lock();//手动上锁 2. boolean tryLock();//如果获取锁失败 - 直接返回false,如果获取锁成功,返回true if(lock.tryLock())&#123; &#125; 3. boolean tryLock(long time, TimeUnit unit);//如果在尝试获取锁的过程中等待超过了time,那么就会导致获取锁失败 获取锁成功是否可知。synchronized 无法得知是否获取锁成功；Lock 可以通过 tryLock 获得加锁是否成功 功能复杂性。synchronized 加锁可重入、不可中断、非公平；Lock 可重入、可中断、可公平和不公平、细分读写锁提高效率 读锁 - java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock - 共享锁 - 允许多个线程去读. 写锁 - java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock - 互斥锁 - 一次只能由一个线程去写. 123不可中断synchronized - A线程竞争到锁资源 - 顺利进入同步代码块执行 - 只要A资源不释放这个锁资源.B线程只能在外面等待. 可中断Lock -&gt; A线程顺利执行同步代码,B线程如果tryLock方法话,那么B线程不断尝试获取锁资源.如果设置了超时等待时间.B线程等太久.已经超过了设置的时间.B线程将不会再傻乎乎继续等待下去[可中断],B线程就有可能去干别的事情了. 线程 常用方法区别 wait方法和sleep方法的区别? a. wait方法一定是出现在synchronized同步代码内部的.[sleep是可以放在同步/不同步的代码内部的] b. wait方法,执行这个方法的线程就会释放锁,释放cpu.但是sleep是不会释放锁的.只是释放了cpu - 核心的区别 c. sleep - 线程会自动进入到阻塞状态[其他阻塞状态],一旦睡眠时间结束.会自动从阻塞状态恢复到可就绪态 - 等到cpu到来 - 运行态. ​ wait - 线程会自动进入到等待阻塞状态,自己不会主动”醒过来”,必须是其他线程调用notify或者notifyAll,进入到锁定状态[再次尝试 去获取锁] sleep：Thread类的方法，必须带一个时间参数。会让当前线程休眠进入阻塞状态并释放CPU（阿里面试题 Sleep释放CPU，wait 也会释放cpu，因为cpu资源太宝贵了，只有在线程running的时候，才会获取cpu片段），提供其他线程运行的机会且不考虑优先级，但如果有同步锁则sleep不会释放锁即其他线程无法获得同步锁 可通过调用interrupt()方法来唤醒休眠线程。 yield：让出CPU调度，Thread类的方法，类似sleep只是不能由用户指定暂停多长时间 ，并且yield()方法只能让同优先级的线程有执行的机会。 yield()只是使当前线程重新回到可执行状态，所以执行yield()的线程有可能在进入到可执行状态后马上又被执行。调用yield方法只是一个建议，告诉线程调度器我的工作已经做的差不多了，可以让别的相同优先级的线程使用CPU了，没有任何机制保证采纳。 wait：Object类的方法(notify()、notifyAll() 也是Object对象)，必须放在循环体和同步代码块中，执行该方法的线程会释放锁，进入线程等待池中等待被再次唤醒(notify随机唤醒，notifyAll全部唤醒，线程结束自动唤醒)即放入锁池中竞争同步锁 join：一种特殊的wait，当前运行线程调用另一个线程的join方法，当前线程进入阻塞状态直到另一个线程运行结束等待该线程终止。 注意该方法也需要捕捉异常。等待调用join方法的线程结束，再继续执行。如：t.join();//主要用于等待t线程运行结束，若无此句，main则会执行完毕，导致结果不可预测。 死锁产生的条件1）互斥条件：指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。 2）请求和保持条件：指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。 3）不剥夺条件：指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。 4）环路等待条件：指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。 只要打破四个条件的一个,就可以防止死锁. 死锁是不可避免,但是需要写程序的破坏四个条件中的一个. 静态域容易产生死锁. 四种常见的线程池 - 必考线程池的返回值ExecutorService简介 ExecutorService是Java提供的用于管理线程池的类。该类的两个作用：控制线程数量和重用线程 Executors.newCacheThreadPool()：可缓存线程池，先查看池中有没有以前建立的线程，如果有，就直接使用。如果没有，就建一个新的线程加入池中，缓存型池子通常用于执行一些生存期很短的异步型任务 Executors.newFixedThreadPool(int n)：创建一个可重用固定个数的线程池，以共享的无界队列方式来运行这些线程。 Executors.newScheduledThreadPool(int n)：创建一个定长线程池，支持定时及周期性任务执行 Executors.newSingleThreadExecutor()：创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。 笔试题 文件夹的拷贝②","categories":[{"name":"面试","slug":"面试","permalink":"http://example.com/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[{"name":"面试","slug":"面试","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"集合面试","slug":"集合面试","date":"2021-07-31T01:13:06.000Z","updated":"2021-08-04T00:30:33.022Z","comments":true,"path":"2021/07/31/集合面试/","link":"","permalink":"http://example.com/2021/07/31/%E9%9B%86%E5%90%88%E9%9D%A2%E8%AF%95/","excerpt":"","text":"面试题HashMap 和 HashTable 区别 HashMap 是 HashTable 的轻量级实现，他们都完成了Map 接口，主要区别在于 HashMap 允许 null key 和 null value,由于非线程安全，效率上可能高于 Hashtable。主要区别如下: HashMap允许将 null 作为一个 entry 的 key 或者 value，而 Hashtable 不允许。 HashMap 把 Hashtable 的 contains 方法去掉了，改成 containsValue 和 containsKey。因为 contains 方法容易让人引起误解。 HashTable 继承自 Dictionary 类，而 HashMap 是 Java1.2 引进的 Map interface 的一个实现。 HashTable 的方法是 Synchronize 的，而 HashMap 不是，在多个线程访问 Hashtable 时，不需要自己为它的方法实现同步，而 HashMap 就必须为之提供外同步。 Hashtable 和 HashMap 采用的 hash/rehash 算法都大概一样，所以性能不会有很大的差异。 ArrayList和LinkedList区别 ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。 对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。 对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据 List和Set区别 两个接口都是继承自Collection，是常用来存放数据项的集合，主要区别如下： List和Set之间很重要的一个区别是是否允许重复元素的存在，在List中允许插入重复的元素，而在Set中不允许重复元素存在。 与元素先后存放顺序有关，List是有序集合，会保留元素插入时的顺序，Set是无序集合。 List可以通过下标来访问，而Set不能。 HashSet和HashMap区别 HashSet的底层是HashMap HashMap HashSet HashMap实现了Map接口 HashSet实现了Set接口 HashMap储存键值对 HashSet仅仅存储对象 使用put()方法将元素放入map中 使用add()方法将元素放入set中 HashMap中使用键对象来计算hashcode值 HashSet使用成员对象来计算hashcode值，对于两个对象来说hashcode可能相同，所以equals()方法用来判断对象的相等性，如果两个对象不同的话，那么返回false HashMap比较快，因为是使用唯一的键来获取对象 HashSet较HashMap来说比较慢 ArrayList和HashSet区别 1.HashSet 是不重复的 而且是无序的! ​ 唯一性保证. 重复对象equals方法返回为true ，重复对象hashCode方法返回相同的整数 ​ HashSet其实就是一个HashMap,只是你只能通过Set接口操作这个HashMap的key部分, 2.ArrayList是可重复的 有序的 ​ 特点：查询效率高，增删效率低 轻量级 线程不安全。 arraylist：在数据的插入和删除方面速度不佳，但是在随意提取方面较快 HashSet和TreeSet区别 一、HashSet HashSet内部的数据结构是哈希表，是线程不安全的。 HashSet当中，保证集合中元素是唯一的方法。 通过对象的hashCode和equals方法来完成对象唯一性的判断。 假如，对象的hashCode值是一样的，那么就要用equals方法进行比较。 假如，结果是true，那么就要视作相同元素，不存。 假如，结果是false，那么就视为不同元素，存储。 注意了，假如，元素要存储到HashCode当中，那么就一定要覆盖hashCode方法以及equals方法。 二、TreeSet TreeSet能够对Set集合当中的元素进行排序，是线程不安全的。 TreeSet当中，判断元素唯一性的方法是依据比较方法的返回结果是否为0，假如是0，那么是相同的元素，不存，假如不是0，那么就是不同的元素，存储。 TreeSet对元素进行排序的方式： 1、元素自身具备比较功能，也就是自然排序，需要实现Comparable接口，并覆盖其compareTo方法。 2、元素自身不具备比较功能，那么就要实现Comparator接口，并覆盖其compare方法。 除此之外，还要注意了，LinkedHashSet是一种有序的Set集合。 也就是其元素的存入和输出的顺序是相同的。 HashMap和TreeMap区别 HashMap的底层是Array，所以HashMap在添加，查找，删除等方法上面速度会非常快。而TreeMap的底层是一个Tree结构，所以速度会比较慢。 另外HashMap因为要保存一个Array，所以会造成空间的浪费，而TreeMap只保存要保持的节点，所以占用的空间比较小。 HashMap如果出现hash冲突的话，效率会变差，不过在java 8进行TreeNode转换之后，效率有很大的提升。 TreeMap在添加和删除节点的时候会进行重排序，会对性能有所影响。 ArrayList和Vector区别 Vector是线程安全的，ArrayList不是线程安全的。 ArrayList在底层数组不够用时在原来的基础上扩展0.5倍，Vector是扩展1倍。 Collection和Collections的区别 1、java.util.Collection 是一个 集合接口。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式。 2、java.util.Collections 是一个包装类。它包含有各种有关集合操作的 静态多态方法。此类 不能实例化，就像一 个工具类，服务于Java的Collection框架。","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"面试","slug":"面试","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"集合框架(二)","slug":"集合框架-二","date":"2021-07-31T01:06:44.000Z","updated":"2021-11-05T13:53:52.882Z","comments":true,"path":"2021/07/31/集合框架-二/","link":"","permalink":"http://example.com/2021/07/31/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E4%BA%8C/","excerpt":"","text":"集合框架 就是内存中的”容器对象” - 存储数据的.开发中来替代数组的使用. 结构123456789101112131415api:java.util Collection[I] - List[I] - 有序可重复 - ArrayList[C] - LinkedList[C] - Vector[C] - Set[I] - 无序不可重复 - HashSet[C] - SortedSet[I] - TreeSet[C]Map[I] - HashMap[C] - key-value的形式存储数据的,针对key是无序不可重复. - Hashtable[C] - Properteis[C] - 属性文件在内存中的映射的对象 Collection[I] boolean add(E e);//向容器中添加一个元素 void clear();//清空容器 boolean contains(Object o);//判断容器中是否包含某个对象 boolean isEmpty();//如果集合中没有数据,集合大小为0,返回true Iterator iterator();// 获取集合对象的迭代器 boolean remove(Object obj);//删除集合容器中第一次出现的这个对象.只能删除1个 int size();//返回集合中的数据的个数 - 集合的大小 List[I] 特点 - 有序并且是可以重复的. E get(int index);//根据下标去取.集合下标边界[0,集合.size()-1] int indexOf(Object obj);//返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1。 E remove(int index);//根据下标删除,并且返回刚刚删除的那个元素 Object[] toArray();//将集合转换成数组. ArrayList[C] 特点:有序可重复的,底层数据结构就是一个”动态增长”的数组. 优点:因为数组是一个有序的序列,所以它可以通过下标直接取值 - 查询效率高. 缺点:增删效率会低.因为涉及到下标的移动. 分析源码123456789101112131415161718192021222324252627282930 /** * 默认的初始的容量 */private static final int DEFAULT_CAPACITY = 10;/** * Shared empty array instance used for default sized empty instances. We * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when * first element is added. */private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;//就是真正的存储数据的数组transient Object[] elementData; /** * The size of the ArrayList (the number of elements it contains). * * @serial */private int size;//构造public ArrayList() &#123; //1. 初始化elementData,长度为0 //2. 是为了后面的ensureCapacityInternal方法中判断是否是第一次调用add方法 this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA; //this.elementData = &#123;&#125;&#125; 剖析add方法 ArrayList扩容的原理 12345public boolean add(E e) &#123;ensureCapacityInternal(size + 1); // Increments modCount!!elementData[size++] = e;return true;&#125; 扩容方法 123456789private void ensureCapacityInternal(int minCapacity) &#123;//第一次进来1if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;//true//第一次minCapacity = 10minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);&#125;ensureExplicitCapacity(minCapacity);&#125; 继续ensureExplicitCapacity(minCapacity); 12345678private void ensureExplicitCapacity(int minCapacity) &#123;modCount++;// overflow-conscious code//第一次进来10-0&gt;0if (minCapacity - elementData.length &gt; 0)grow(minCapacity);&#125; grow(minCapacity) 123456789101112131415private void grow(int minCapacity) &#123;// 第一次//oldCapacity = 0//newCapacity = 0int oldCapacity = elementData.length;int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);//1.5倍if (newCapacity - minCapacity &lt; 0)//第一次会进来newCapacity = minCapacity;//newCapacity = 10if (newCapacity - MAX_ARRAY_SIZE &gt; 0)newCapacity = hugeCapacity(minCapacity);// minCapacity is usually close to size, so this is a win://第一次执行add方法的时候,底层会给我们初始化了一个长度为10的Object[]数组elementData = Arrays.copyOf(elementData, newCapacity);&#125; 集合的遍历 直接输出 增强for循环 - 只读 1234567891011121314151617181920212223242526272829只读的循环.如果在循环的过程中进行了remove操作 - 抛出java.util.ConcurrentModificationException并发修改异常 实际的底层,调用迭代器对象中的next方法 private class Itr implements Iterator&lt;E&gt; &#123; int cursor; // index of next element to return int lastRet = -1; // index of last element returned; -1 if no such int expectedModCount = modCount; public E next() &#123; checkForComodification(); //.... &#125; final void checkForComodification() &#123; //modCount是当初调用add方法,添加1个元素,modCount自增1个 if (modCount != expectedModCount) throw new ConcurrentModificationException(); &#125;&#125; 发现只要调用了remove方法 - modCount++ private void fastRemove(int index) &#123; modCount++; int numMoved = size - index - 1; if (numMoved &gt; 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--size] = null; // clear to let GC do its work&#125; 普通for 迭代器 因为不同的集合的底层的数据结构是不一样的.数据结构不一样,它的遍历方式不一样 为了访问/遍历不同数据结构的集合提供一种统一的遍历方式 1234567 //1. 获取集合的迭代器Iterator&lt;Long&gt; iter = list.iterator();//2. 调用hasNext方法while(iter.hasNext())&#123;//判断迭代器中是否仍有下一个元素可被迭代 Long p = iter.next();//获取当前迭代的 System.out.println(p);&#125; jdk8提供的新的遍历方式 12345678910111213list.forEach(new Consumer&lt;Long&gt;() &#123;//匿名内部类 @Override public void accept(Long aLong) &#123; System.out.println(aLong); &#125;&#125;);//lambda表达式来替代匿名内部类的写法//配合函数式接口[只能包含一个抽象方法]System.out.println(&quot;======lambda====&quot;);list.forEach(e -&gt; System.out.println(e)); System.out.println(&quot;========&quot;);list.forEach(System.out::println); LinkedList[C] 有序的序列,底层的数据结构双向链表,jdk6以及之前是双向循环链表 链表结构的特点:查询效率很低,每次都会从头节点开始遍历.但是增删效率高,只会涉及到相邻节点的移动. 适合解决栈列和队列的业务题型 - 贪吃蛇 栈列 - 先进后出 队列 - 先进先出 链表结构 相对于数组这种数据结构,需要占用更多的内存.每个节点除了保存具体的数据,还需要保存相邻节点的地址. 单向链表 head - 头节点 tail - 尾节点 element - 节点中真正的保存的数据 next - 下一个节点的地址 单向循环链表 尾节点的next又指向了头节点. 双向链表 - LinkedList底层数据结构 增加了一个pre - 保存的是上一个节点的地址. 双向循环链表 剖析源码123456789101112131415161718192021222324252627282930313233343536373839404142//Node代表的是链表的节点 private static class Node&lt;E&gt; &#123; E item;//真正的元素 Node&lt;E&gt; next;//下一个节点的地址 Node&lt;E&gt; prev;//上一个节点的地址 Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123; this.item = element; this.next = next; this.prev = prev; &#125; &#125;//双向链表如何插入一个新的节点public boolean add(E e) &#123; linkLast(e); return true;&#125;void linkLast(E e) &#123; //第一次进入last最后一个节点Node - null final Node&lt;E&gt; l = last;//l = null //第二次进入 l = new Node&lt;&gt;(null,&quot;ok&quot;,null) //第一次进入 //newNode = new Node&lt;&gt;(null,&quot;ok&quot;,null) //第二次进入 //newNode = new Node&lt;&gt;(链表中原来的最后一个节点l, &quot;java&quot;, null); final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null); //新插入的节点肯定是作为最后一个节点 - 尾节点 last = newNode; if (l == null)//第一次进入,链表之前没有任何元素 first = newNode;//新的节点作为头节点 else //原来链表中的最后一个节点的next同时也指向新的节点 l.next = newNode; size++; modCount++;&#125; 查找源码 1234567891011121314151617181920212223 public E get(int index) &#123; checkElementIndex(index); return node(index).item; &#125;Node&lt;E&gt; node(int index) &#123;//index = 3 // 假设集合中有10个元素 = size = 10 //index&lt;5 - 链表的坐标 if (index &lt; (size &gt;&gt; 1)) &#123; Node&lt;E&gt; x = first;//确定头节点 for (int i = 0; i &lt; index; i++) x = x.next; //① - x第二个 ,i=0 //i=1 x第三个 //i=2 x第四个 return x; &#125; else &#123;//index&gt;=5 Node&lt;E&gt; x = last; for (int i = size - 1; i &gt; index; i--) x = x.prev; return x; &#125;&#125; 删除源码 12345678910111213141516171819202122232425262728293031 public E remove(int index) &#123; checkElementIndex(index); //找到index对应的Node对象,传入到了unlink方法中. return unlink(node(index)); &#125;E unlink(Node&lt;E&gt; x) &#123; // assert x != null; final E element = x.item; final Node&lt;E&gt; next = x.next; final Node&lt;E&gt; prev = x.prev; if (prev == null) &#123;//防止删除的是头节点 first = next;//需要删除的那个节点的下一个节点作为头节点了. &#125; else &#123;//删除的是中间节点 prev.next = next;//原来节点的上一个节点的next指向原来节点的下一个节点 x.prev = null;//优化,更快让GC会回收pre指针. &#125; if (next == null) &#123;//删除的是尾结点 last = prev;//原来节点的上一个节点作为尾节点 &#125; else &#123;//删除的是中间节点 next.prev = prev;//原来节点的下一个节点指向原来节点的上一个节点 x.next = null; &#125; x.item = null; size--; modCount++; return element;&#125; 练习-括号匹配 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package tech.aistar.day11.homework;import java.util.LinkedList;import java.util.Scanner;/** * 本类用来演示: 括号匹配 * * @author: success * @date: 2021/7/29 1:51 下午 */public class BracketsDemo &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); System.out.print(&quot;输入括号:&gt;&quot;); String line = sc.nextLine(); if(matches(line))&#123; System.out.println(&quot;匹配&quot;); &#125;else&#123; System.out.println(&quot;不匹配&quot;); &#125; &#125; private static boolean matches(String line) &#123; //1. 将字符串转成字符数组 char[] arr = line.toCharArray(); //2. 新建一个LinkedList集合 LinkedList&lt;Character&gt; list = new LinkedList&lt;&gt;(); //3. 将数组中的第一个元素压入栈顶 list.push(arr[0]); //4. 从arr数组的第二个位置开始遍历 for (int i = 1; i &lt; arr.length; i++) &#123; //()[]&#123;&#125; //获取当前的arr[i] Character c = arr[i]; //为了避免在栈顶已经没有元素的情况下还去获取栈顶元素,非空判断 if(list.isEmpty())&#123; list.push(c); continue; &#125; //5. 先获取栈顶元素 Character top = list.getFirst(); //6. 栈顶元素和当前的arr[i]进行匹配 if(top.equals(&#x27;(&#x27;)&amp;&amp;c.equals(&#x27;)&#x27;) || top.equals(&#x27;&#123;&#x27;)&amp;&amp;c.equals(&#x27;&#125;&#x27;) || top.equals(&#x27;[&#x27;)&amp;&amp;c.equals(&#x27;]&#x27;))&#123; //弹出栈顶元素 list.pop(); &#125;else&#123; //继续将当前的arr[i]压入栈顶 list.push(c); &#125; &#125; return list.isEmpty(); &#125;&#125; Map[I]HashMap[C] 数据存储的形式是key-value,针对key是无序不可重复的. jdk8.x之前,底层的数据结构是桶数组+链表 jd8.0开始,底层的数据结构是桶数组+链表+红黑树 桶(哈希桶)数组 - 里面的元素放在数组的这个位置是通过一个哈希算法计算得到的. 图示 剖析put方法123456789101112131415161718192021222324public V put(K key, V value) &#123; return putVal(hash(key), key, value, false, true);&#125;//hash函数就是扰动函数//1. 尽可能减少哈希冲突static final int hash(Object key) &#123; int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);&#125;//map数据结构图示中每个节点static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123; final int hash; final K key; V value; Node&lt;K,V&gt; next;//单向链表 Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123; this.hash = hash; this.key = key; this.value = value; this.next = next; &#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566transient Node&lt;K,V&gt;[] table;//默认值是null//hash(key)final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) &#123; //第一次进来 Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; //第一次进来,第二次肯定不走 if ((tab = table) == null || (n = tab.length) == 0) //第一次肯定会进来 //1. 对tab进行一个初始化操作 //2. 得到初始化数组的长度,赋值给了n n = (tab = resize()).length;//n=16 //第一次肯定判断结果为null if ((p = tab[i = (n - 1) &amp; hash]) == null) //tab[i] = 新的节点 tab[i] = newNode(hash, key, value, null); else &#123; //哈希碰撞了,哈希冲突了. Node&lt;K,V&gt; e; K k; if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) //key值冲突了. //e = 数组中的旧的Node对象 e = p; //hash虽然碰撞了,但是key是不一样 else if (p instanceof TreeNode)//判断是否为红黑树结构 //当链表的节点&gt;8个,链表结构转成红黑树结构 //当红黑树节点&lt;6个,恢复成链表结构 e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value); else &#123;//链表结构 for (int binCount = 0; ; ++binCount) &#123; //p代表的就是哈希碰撞位置的第一个Node对象 if ((e = p.next) == null) &#123;//新的节点挂载到链表的末尾 p.next = newNode(hash, key, value, null); if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); break; &#125; //新的节点可能和链表结构中的某个节点的key也是一样的 if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) break; //e肯定是不为null p = e; &#125; &#125; if (e != null) &#123; // existing mapping for key //把旧的节点的value赋值给了oldValue,put方法的返回结果 V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) //新值覆盖旧值 e.value = value; afterNodeAccess(e); return oldValue; &#125; &#125; ++modCount; if (++size &gt; threshold) resize(); afterNodeInsertion(evict); return null;&#125; 扩容方法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576final Node&lt;K,V&gt;[] resize() &#123; Node&lt;K,V&gt;[] oldTab = table; int oldCap = (oldTab == null) ? 0 : oldTab.length; int oldThr = threshold; int newCap, newThr = 0; if (oldCap &gt; 0) &#123; if (oldCap &gt;= MAXIMUM_CAPACITY) &#123; threshold = Integer.MAX_VALUE; return oldTab; &#125; else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY) newThr = oldThr &lt;&lt; 1; // double threshold &#125; else if (oldThr &gt; 0) // initial capacity was placed in threshold newCap = oldThr; else &#123; // zero initial threshold signifies using defaults //第一进来就会执行到此处 , 16 //扩容因子是0.75 newCap = DEFAULT_INITIAL_CAPACITY; newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); &#125; if (newThr == 0) &#123; float ft = (float)newCap * loadFactor; newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ? (int)ft : Integer.MAX_VALUE); &#125; threshold = newThr; //初始化一个长度为16的数组 @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;) Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap]; table = newTab; if (oldTab != null) &#123; for (int j = 0; j &lt; oldCap; ++j) &#123; Node&lt;K,V&gt; e; if ((e = oldTab[j]) != null) &#123; oldTab[j] = null; if (e.next == null) newTab[e.hash &amp; (newCap - 1)] = e; else if (e instanceof TreeNode) ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap); else &#123; // preserve order Node&lt;K,V&gt; loHead = null, loTail = null; Node&lt;K,V&gt; hiHead = null, hiTail = null; Node&lt;K,V&gt; next; do &#123; next = e.next; if ((e.hash &amp; oldCap) == 0) &#123; if (loTail == null) loHead = e; else loTail.next = e; loTail = e; &#125; else &#123; if (hiTail == null) hiHead = e; else hiTail.next = e; hiTail = e; &#125; &#125; while ((e = next) != null); if (loTail != null) &#123; loTail.next = null; newTab[j] = loHead; &#125; if (hiTail != null) &#123; hiTail.next = null; newTab[j + oldCap] = hiHead; &#125; &#125; &#125; &#125; &#125; return newTab; &#125; map集合的迭代方式123456789101112131415161718192021//第一种方式 - 将map集合中所有的key全部取出来放入到一个Set集合中.//set集合 - 无序不可重复,map集合的key也是无序不可重复.Set&lt;Integer&gt; sets = maps.keySet();//遍历set集合Iterator&lt;Integer&gt; iter = sets.iterator();while(iter.hasNext())&#123; Integer key = iter.next(); String value = maps.get(key); System.out.println(key+&quot;:&quot;+value);&#125;//第二种方式 - 将map集合中的每对key-value封装到了一个内置的Entry对象中//然后将每个entry对象放入到Set集合中Set&lt;Map.Entry&lt;Integer,String&gt;&gt; entries = maps.entrySet();Iterator&lt;Map.Entry&lt;Integer,String&gt;&gt; iter2 = entries.iterator();while(iter2.hasNext())&#123; Map.Entry&lt;Integer,String&gt; e = iter2.next(); Integer key = e.getKey(); String value = e.getValue(); System.out.println(key+&quot;-&gt;&quot;+value);&#125; Map作业123456789int[] arr = &#123;1,2,1,2,3,4,1,2,5,.....&#125;统计每个随机数出现的次数 - Map集合 String str = &quot;sfhdsfkdfdfjdfjdfdjfdsa&quot;;String[] arr = [&quot;python&quot;,&quot;java&quot;,&quot;python&quot;,&quot;java&quot;,&quot;php&quot;,&quot;python&quot;];String str = &quot;python java python java mysql java mysql php&quot;; spilt(&quot;\\\\s&quot;) 121. 写一个程序统计每个品牌花费的总费用 - 统计类题型2. 根据总费用降序排 - 可以暂时不做. http://xzc.cn/sYtc8YkClM - 宝洁作业 http://xzc.cn/p5acBgPAHf - 基础弱的 - 1. 当天的代码2遍 ​ 2. 解决了哪些问题? 列一下自己尚未解决的问题? 排序比较器接口Comparator jdk8.0开始,在List接口中已经定义了排序的方法 void sort(Comparator&lt;? super E&gt; c) 分析:java.util.Comparator[I]函数式接口 - 允许使用lambda表达式 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465package tech.aistar.day11;import tech.aistar.day10.Book;import java.util.ArrayList;import java.util.Comparator;import java.util.List;/** * 本类用来演示: 集合排序* * @author: success * @date: 2021/7/30 9:29 上午*/public class ListSortDemo &#123; public static void main(String[] args) &#123; Book b1 = new Book(1,&quot;1001&quot;,&quot;java&quot;,100.0d); Book b2 = new Book(2,&quot;1002&quot;,&quot;java&quot;,200.0d); Book b3 = new Book(3,&quot;1003&quot;,&quot;java&quot;,200.0d); Book b4 = new Book(4,&quot;1004&quot;,&quot;python&quot;,300.0d); List&lt;Book&gt; bookList = new ArrayList&lt;&gt;(); bookList.add(b1); bookList.add(b2); bookList.add(b3); bookList.add(b4);// bookList.sort(new Comparator&lt;Book&gt;() &#123;// @Override// public int compare(Book o1, Book o2) &#123;// if(o1.getPrice()&gt;o2.getPrice())// return -1;// else if(o1.getPrice()&lt;o2.getPrice())// return 1;// return 0;// &#125;// &#125;); //根据价格降序排// bookList.sort((o1,o2)-&gt;&#123;// if(o1.getPrice()&gt;o2.getPrice())// return -1;// else if(o1.getPrice()&lt;o2.getPrice())// return 1;// return 0;// &#125;); //根据编号降序排 - String类型// bookList.sort((o1, o2) -&gt; o2.getIsbn().compareTo(o1.getIsbn())); //根据价格降序排,如果价格一样的话,按照编号继续降序排 bookList.sort((o1,o2)-&gt;&#123; if(o1.getPrice()&gt;o2.getPrice()) return -1; else if(o1.getPrice()&lt;o2.getPrice()) return 1; return o2.getIsbn().compareTo(o1.getIsbn()); &#125;); for (Book book : bookList) &#123; System.out.println(book); &#125; &#125;&#125; 可比较接口 排序的对象对应的实体类实现java.lang.Comparable接口 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465package tech.aistar.day11.compares;/** * 本类用来演示:* * @author: success * @date: 2021/7/30 10:53 上午*/public class Teacher implements Comparable&lt;Teacher&gt;&#123; private int id; private String name; private int age; public Teacher() &#123; &#125; public Teacher(int id, String name, int age) &#123; this.id = id; this.name = name; this.age = age; &#125; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; @Override public String toString() &#123; final StringBuilder sb = new StringBuilder(&quot;Teacher&#123;&quot;); sb.append(&quot;id=&quot;).append(id); sb.append(&quot;, name=&#x27;&quot;).append(name).append(&#x27;\\&#x27;&#x27;); sb.append(&quot;, age=&quot;).append(age); sb.append(&#x27;&#125;&#x27;); return sb.toString(); &#125; @Override public int compareTo(Teacher o) &#123; //定制排序的规则 return o.age - this.age; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536package tech.aistar.day11.compares;import java.util.ArrayList;import java.util.Collections;import java.util.List;/** * 本类用来演示:* * @author: success * @date: 2021/7/30 10:54 上午*/public class TestTeacherSort &#123; public static void main(String[] args) &#123; Teacher t1 = new Teacher(1,&quot;tom&quot;,23); Teacher t2 = new Teacher(2,&quot;jack&quot;,25); Teacher t3 = new Teacher(3,&quot;james&quot;,18); Teacher t4 = new Teacher(4,&quot;rose&quot;,17); List&lt;Teacher&gt; list = new ArrayList&lt;&gt;(); list.add(t1); list.add(t2); list.add(t3); list.add(t4);// for (Teacher teacher : list) &#123;// System.out.println(teacher);// &#125; Collections.sort(list); for (Teacher teacher : list) &#123; System.out.println(teacher); &#125; &#125;&#125; Comparator和Comparable的区别12345 Comparable是排序接口，若一个类实现了Comparable接口，就意味着“该类支持排序”。而Comparator是比较器，我们若需要控制某个类的次序，可以建立一个“该类的比较器”来进行排序。Comparable相当于“内部比较器”，而Comparator相当于“外部比较器”。 两种方法各有优劣， 用Comparable 简单， 只要实现Comparable 接口的对象直接就成为一个可以比较的对象，但是需要修改源代码。 用Comparator 的好处是不需要修改源代码， 而是另外实现一个比较器， 当某个自定义的对象需要作比较的时候，把比较器和对象一起传递过去就可以比大小了， 并且在Comparator 里面用户可以自己实现复杂的可以通用的逻辑，使其可以匹配一些比较简单的对象，那样就可以节省很多重复劳动了。 Collections java.util.Collections[C] - 集合工具类 面试题 - Collection和Collections有什么区别? static void sort(List list, Comparator&lt;? super T&gt; c)根据指定的比较器引起的顺序对指定的列表进行排序。 1Collections.sort(bookList,((o1, o2) -&gt; (int) (o2.getPrice()-o1.getPrice()))); static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List list) ;//集合中的对象必须要实现java.lang.Comparable可比较接口 HashSet Set[I]接口下的实现类 - 存储的数据是无序不可重复复的. 添加数据到容器的原理: 当把对象添加到容器中之前,会调用对象的hashCode方法,得到一个哈希值. 如果这个哈希值在这之前没有出现过,说明这个位置没有被占用,那么就可以直接将这个对象放入到这个容器中的这个位置 如果这个哈希值在这之前出现过了.产生了哈希碰撞或者哈希冲突.但是这个时候,还不能确定哈希碰撞的俩个对象是同一个对象 继续调用对象的equals方法,如果返回true,说明是同一个对象.则拒绝添加. 底层数据结构 散列表 桶数组 + 链表 + 红黑树 查看HashSet源码 Set sets = new HashSet&lt;&gt;(); 1234public HashSet() &#123;//HashSet的底层是HashMapmap = new HashMap&lt;&gt;();&#125; HashSet的add方法的底层 123456789private static final Object PRESENT = new Object();//此处的e是添加到容器中的对象public boolean add(E e) &#123;//实际上还是在调用map的put方法//HashSet中添加的对象是作为了Map集合的key//Map的key具有什么特点 = HashSet中的数据有何特点.return map.put(e, PRESENT)==null;&#125;","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"集合","slug":"集合","permalink":"http://example.com/tags/%E9%9B%86%E5%90%88/"}]},{"title":"集合框架(一)","slug":"集合框架-一","date":"2021-07-31T01:04:59.000Z","updated":"2021-07-31T03:25:29.244Z","comments":true,"path":"2021/07/31/集合框架-一/","link":"","permalink":"http://example.com/2021/07/31/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-%E4%B8%80/","excerpt":"","text":"集合框架 就是内存中的”容器对象” - 存储数据的.开发中来替代数组的使用. 结构123456789101112131415api:java.util Collection[I] - List[I] - 有序可重复 - ArrayList[C] - LinkedList[C] - Vector[C] - Set[I] - 无序不可重复 - HashSet[C] - SortedSet[I] - TreeSet[C]Map[I] - HashMap[C] - key-value的形式存储数据的,针对key是无序不可重复. - Hashtable[C] - Properteis[C] - 属性文件在内存中的映射的对象 Collection[I] boolean add(E e);//向容器中添加一个元素 void clear();//清空容器 boolean contains(Object o);//判断容器中是否包含某个对象 boolean isEmpty();//如果集合中没有数据,集合大小为0,返回true Iterator iterator();// 获取集合对象的迭代器 boolean remove(Object obj);//删除集合容器中第一次出现的这个对象.只能删除1个 int size();//返回集合中的数据的个数 - 集合的大小 List[I] 特点 - 有序并且是可以重复的. E get(int index);//根据下标去取.集合下标边界[0,集合.size()-1] int indexOf(Object obj);//返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1。 E remove(int index);//根据下标删除,并且返回刚刚删除的那个元素 Object[] toArray();//将集合转换成数组. ArrayList[C] 特点:有序可重复的,底层数据结构就是一个”动态增长”的数组. 优点:因为数组是一个有序的序列,所以它可以通过下标直接取值 - 查询效率高. 缺点:增删效率会低. 分析源码123456789101112131415161718192021222324252627282930 /** * 默认的初始的容量 */private static final int DEFAULT_CAPACITY = 10;/** * Shared empty array instance used for default sized empty instances. We * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when * first element is added. */private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;//就是真正的存储数据的数组transient Object[] elementData; /** * The size of the ArrayList (the number of elements it contains). * * @serial */private int size;//构造public ArrayList() &#123; //1. 初始化elementData,长度为0 //2. 是为了后面的ensureCapacityInternal方法中判断是否是第一次调用add方法 this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA; //this.elementData = &#123;&#125;&#125; 剖析add方法 ArrayList扩容的原理 12345public boolean add(E e) &#123;ensureCapacityInternal(size + 1); // Increments modCount!!elementData[size++] = e;return true;&#125; 扩容方法 123456789private void ensureCapacityInternal(int minCapacity) &#123;//第一次进来1if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;//true //第一次minCapacity = 10 minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);&#125;ensureExplicitCapacity(minCapacity);&#125; 继续ensureExplicitCapacity(minCapacity); 12345678private void ensureExplicitCapacity(int minCapacity) &#123;modCount++;// overflow-conscious code//第一次进来10-0&gt;0if (minCapacity - elementData.length &gt; 0) grow(minCapacity);&#125; grow(minCapacity) 123456789101112131415private void grow(int minCapacity) &#123;// 第一次//oldCapacity = 0//newCapacity = 0int oldCapacity = elementData.length;int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);//1.5倍if (newCapacity - minCapacity &lt; 0)//第一次会进来 newCapacity = minCapacity;//newCapacity = 10if (newCapacity - MAX_ARRAY_SIZE &gt; 0) newCapacity = hugeCapacity(minCapacity);// minCapacity is usually close to size, so this is a win://第一次执行add方法的时候,底层会给我们初始化了一个长度为10的Object[]数组elementData = Arrays.copyOf(elementData, newCapacity);&#125; 集合的遍历 直接输出 增强for循环 - 只读 1234567891011121314151617181920212223242526272829只读的循环.如果在循环的过程中进行了remove操作 - 抛出java.util.ConcurrentModificationException并发修改异常实际的底层,调用迭代器对象中的next方法 private class Itr implements Iterator&lt;E&gt; &#123; int cursor; // index of next element to return int lastRet = -1; // index of last element returned; -1 if no such int expectedModCount = modCount; public E next() &#123; checkForComodification(); //.... &#125; final void checkForComodification() &#123; //modCount是当初调用add方法,添加1个元素,modCount自增1个 if (modCount != expectedModCount) throw new ConcurrentModificationException(); &#125;&#125;发现只要调用了remove方法 - modCount++ private void fastRemove(int index) &#123; modCount++; int numMoved = size - index - 1; if (numMoved &gt; 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--size] = null; // clear to let GC do its work&#125;","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"集合","slug":"集合","permalink":"http://example.com/tags/%E9%9B%86%E5%90%88/"}]},{"title":"重写equals()和hashCode()方法","slug":"重写equals-和hashCode-方法","date":"2021-07-31T01:03:12.000Z","updated":"2021-07-31T01:04:25.727Z","comments":true,"path":"2021/07/31/重写equals-和hashCode-方法/","link":"","permalink":"http://example.com/2021/07/31/%E9%87%8D%E5%86%99equals-%E5%92%8ChashCode-%E6%96%B9%E6%B3%95/","excerpt":"","text":"Object java.lang.Object类是所有的类的基类,根类,超类 所有的类如果没有明确指定父类,都会默认继承Object类. equals boolean equals(Object obj);//对象之间的比较.默认仍然使用的是== “业内认可的一种说法” - 基本类型用==比较的值,对象类型用==比较的是地址 123public boolean equals(Object obj) &#123; return (this == obj);&#125; 默认的比较方式不符合实际的业务需要,因此需要重写equals方法 success版本 12345678910111213141516171819202122 @Overridepublic boolean equals(Object obj)&#123; //1. 非空性 if(obj == null) return false; //2. 自反性 if(this == obj)//p1.equals(p1) return true; //3. 一致类型,判断具体的哪个属性是一致的,才认为返回true // p1.equals(user); if(obj instanceof Product)&#123; Product p = (Product) obj; //return this.id == p.id; //id和name都一致的时候,才认为是同一个对象 //return (this.id == p.id) &amp;&amp; (this.name.equals(p.name)); //需求 - 认为产品的id以及这个产品对应的产品信息的id一致的时候认为返回true return this.id == p.id &amp;&amp; this.getProductInfo().equals(p.productInfo); &#125; return false;&#125; hashCode方法 int hashCode();//返回对象的哈希值.一般是和equals方法是成对出现的.目的是为了提高性能. 容器应用中 - 在什么时候才会去调用equals方法? - 当哈希碰撞的时候,只要哈希不冲突,不会调用equals方法 而调用equals方法执行的时机肯定会慢一点的.因为它需要比较属性值[需要更多的时间] 关于数字31 - 质数 - 1. 尽可能产生更多的哈希值 2. 让哈希碰撞/冲突尽可能少. 1234567@Overridepublic int hashCode() &#123; int result = id != null ? id.hashCode() : 0; result = 31 * result + (name != null ? name.hashCode() : 0); result = 31 * result + (productInfo != null ? productInfo.hashCode() : 0); return result;&#125; 超前知识点 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package tech.aistar.day10.hashcodes;import java.util.HashSet;import java.util.Set;/** * 本类用来演示: * * @author: success * @date: 2021/7/28 2:01 下午 */public class TestCourse &#123; public static void main(String[] args) &#123; Course c1 = new Course(1,&quot;java&quot;); Course c2 = new Course(2,&quot;mysql&quot;); Course c3 = new Course(3,&quot;mysql&quot;); Course c4 = new Course(4,&quot;mysql&quot;); Course c5 = new Course(5,&quot;mysql&quot;); Course c6 = new Course(1,&quot;oracle&quot;);// System.out.println(c1 == c2);//false// System.out.println(c1.equals(c2));//true //集合 - &quot;容器&quot;,比数组更加强大的. //集合 - 里面存储的数据是无序不可重复的 //不能存储同一个对象 Set&lt;Course&gt; sets = new HashSet&lt;&gt;(); //1. 当把某个对象放入到该容器之前,先调用了该对象的hashCode方法,得到一个哈希值 //2. 根据这个哈希值就可以被分配一个内存地址 //3. 如果这个哈希值在这之前没有出现过,说明这个位置没有被占用.那么就会直接将该对象放入到 // 这个哈希值对应的在容器中的那个位置 //4. 如果这个哈希值在这之前出现过.但是此时还不能说明这个对象和之前的那个对象是同一个对象? // 因为哈希值是通过哈希算法计算得到的,可能产生&quot;哈希冲突&quot; - &quot;哈希碰撞&quot; //5. 当哈希值一样的时候,那么才会去调用equals方法,如果equals方法仍然返回true,那么才 // 最终确定这个对象曾经出现过,那么就拒绝添加. sets.add(c1); sets.add(c2); sets.add(c3); sets.add(c4); sets.add(c5); sets.add(c6); for (Course c : sets) &#123; System.out.println(c); &#125; &#125;&#125; 总结 如果俩个对象的hashcode值一样,那么equals比较,不一定返回true 如果俩个对象equals返回true,那么这俩个对象的哈希值必须要一样 - 数据的完整性. 笔试题 == 和 equals的区别 == 基本类型使用,比较的就是基本类型的数值 equals 对象类型使用.如果某个类没有重写equals方法,那么调用的是java.lang.Object中的equals方法,这个时候仍然使用到的是==比较.如果重写了equals,就看equals提供的是哪些属性一致的时候,才返回true. clone方法 protected Object clone();//默认的克隆方法是浅克隆 浅克隆 浅拷贝,浅层复制,浅复制 - 默认的. protected - public 123456@Overridepublic Object clone() throws CloneNotSupportedException &#123;return super.clone();&#125;Object中的clone方法 - native修饰的方法 - 本地方法栈中的方法 - C写的 - Java语言本地调用C程序.protected native Object clone() throws CloneNotSupportedException; 只有实现了java.lang.Cloneable接口[标记接口]的对象才能够调用clone方法,否则会抛出java.lang.CloneNotSupportedException不支持克隆的异常. 123456Product copy = (Product) p1.clone();Product copy2 = new Product(1,&quot;mac&quot;,1000.0d);为什么需要使用clone,而不直接new一个.clone方法它直接操作的堆里面的内存 - 效率是高于重新new的. 123456789101112131415161718192021222324252627282930313233343536373839package tech.aistar.day10.obj;/** * 本类用来演示:* * @author: success * @date: 2021/7/28 2:32 下午*/public class TestCloneDemo &#123; public static void main(String[] args) &#123; Product p1 = new Product(1,&quot;mac&quot;,1000.0d); ProductInfo info = new ProductInfo(1,&quot;good&quot;); p1.setProductInfo(info); //System.out.println(p1 instanceof Cloneable);//true try &#123; //浅拷贝 Product copy = (Product) p1.clone(); //1. 修饰基本数据类型以及字符串 - 原来的对象 - 是否对copy对象产生影响 - 不会 p1.setId(10); p1.setName(&quot;tom&quot;); //2. 修改对象类型 - 会对copy的对象产生影响的 p1.getProductInfo().setId(100); p1.getProductInfo().setInfo(&quot;bad&quot;); System.out.println(copy); System.out.println(copy.getProductInfo()); //System.out.println(copy == p1);//false &#125; catch (CloneNotSupportedException e) &#123;//不能被克隆的异常 e.printStackTrace(); &#125; &#125;&#125; 深克隆 深层复制,深拷贝,深复制 - 需要自己重写clone里面的具体的代码的 123456789101112131415161718192021222324/** * 深拷贝 - 修改原来对象中的任何类型的数据都不会对副本对象产生影响 * @return * @throws CloneNotSupportedException */@Overridepublic Object clone() throws CloneNotSupportedException &#123;//Product copy = (Product)p1.clone();//手动新建一个Product对象Product product = new Product();product.setId(id);product.setName(name);product.setPrice(price);ProductInfo infos = getProductInfo();if(infos!=null)&#123; ProductInfo pi = new ProductInfo(); pi.setId(infos.getId()); pi.setInfo(infos.getInfo()); product.setProductInfo(pi);&#125;return product;&#125;","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"equals()和hashCode()方法","slug":"equals-和hashCode-方法","permalink":"http://example.com/tags/equals-%E5%92%8ChashCode-%E6%96%B9%E6%B3%95/"}]},{"title":"包装类","slug":"包装类","date":"2021-07-31T01:00:10.000Z","updated":"2021-07-31T07:34:30.656Z","comments":true,"path":"2021/07/31/包装类/","link":"","permalink":"http://example.com/2021/07/31/%E5%8C%85%E8%A3%85%E7%B1%BB/","excerpt":"","text":"包装类型 每个基本类型都有其对应的包装类型[对象类型] byte-&gt;Byte short-&gt;Short int-&gt;Integer long-&gt;Long float-&gt;Float double-&gt;Double char-&gt;Character boolean-&gt;Boolean 学习掌握目标 包装类型的api的常用方法 包装类型和基本数据类型以及String类型三者之间的相互转换问题. Number api:java.lang包,所有关于上面包装类型[数字]的共同的抽象的父类. byte byteValue()返回指定号码作为值 byte ，这可能涉及舍入或截断。 abstract double doubleValue()返回指定数字的值为 double ，可能涉及四舍五入。 abstract float floatValue()返回指定数字的值为 float ，可能涉及四舍五入。 abstract int intValue()返回指定号码作为值 int ，这可能涉及舍入或截断。 abstract long longValue()返回指定数字的值为 long ，可能涉及四舍五入或截断。 short shortValue()返回指定号码作为值 short ，这可能涉及舍入或截断。 提供的这些方法都是关于包装类型转换成对应的基本类型的方法 常用方法转化 Integer构造 Integer(int i);//利用int类型的整数来构建一个Integer对象 - int类型-&gt;Integer类型 Integer(String s);//此处的字符串一定是数字形式的字符串 - String类型-&gt;Integer类型 如果传入的是一个非数字形式的字符串,那么会抛出java.lang.NumberFormatException数字格式化失败异常 自动解封箱 jdk5.x开始支持的新的功能 封箱 - 基本数据类型可以自动转换成对应的包装类型 解箱 - 包装类型可以自动转换成对应的基本的数据类型 常用方法 static Integer valueOf(int i);//将int-&gt;Integer 1[-128,127] -&gt; 比较的结果是true,不在这个范围的是返回false 1234567891011121314151617181920212223//如果[-128,127]之间,那么直接返回内部的缓冲数组中的数据//如果不在这个范围,返回一个新的Integer对象public static Integer valueOf(int i) &#123; if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high) return IntegerCache.cache[i + (-IntegerCache.low)]; return new Integer(i);&#125;Integer类内部有一个静态内部类private static class IntegerCache &#123; static final int low = -128; static final int high; //缓冲区,提供了缓冲的数组,数组在静态代码块中进行预初始化,提前赋值了. static final Integer cache[]; static&#123; cache = new Integer[(high - low) + 1]; int j = low; for(int k = 0; k &lt; cache.length; k++) cache[k] = new Integer(j++); &#125; &#125; 12345678910111213141516171819202122232425262728293031323334// [-128,127] -&gt; 比较的结果是true,不在这个范围的是返回false//剖析自动封箱Integer a = 127;//Integer a = Integer.valueOf(127);Integer b = 127;System.out.println(a == b);//trueadmindeMacBook-Pro:Desktop admin$ javap -c IntegerHelloCompiled from &quot;IntegerHello.java&quot;public class IntegerHello &#123; public IntegerHello(); Code: 0: aload_0 1: invokespecial #1 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V 4: return public static void main(java.lang.String[]); Code: 0: bipush 127 2: invokestatic #2 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer; 5: astore_1 6: bipush 127 8: invokestatic #2 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer; 11: astore_2 12: getstatic #3 // Field java/lang/System.out:Ljava/io/PrintStream; 15: aload_1 16: invokevirtual #4 // Method java/lang/Integer.intValue:()I 19: bipush 7 21: if_icmpne 28 24: iconst_1 25: goto 29 28: iconst_0 29: invokevirtual #5 // Method java/io/PrintStream.println:(Z)V 32: return&#125; 关于进制转换的方法 2-1. static String toBinaryString(int n);//十进制n转换成对应的二进制 2-2. static String toHexString(int n);//十进制n转换成对应的十六进制 2-3. static String toOctalString(int n);//十进制n转换成对应的八进制 static int parseInt(String s);//将数字形式的字符串转换成int类型,如果传入的是一个非数字形式的字符串,那么会抛出java.lang.NumberFormatException数字格式化失败异常 static Integer valueOf(String s);//String-&gt;Integer 注意: 当基本数据类型和包装类型进行比较时, 会将包装类型转化为基本数据类型在比较. 123456int t = 300;Integer t2 = new Integer(300);Integer t3 = Integer.valueOf(300);System.out.println(t == t2);//trueSystem.out.println(t == t3);//trueSystem.out.println(t2 == t3);//false 总结 包装类型和基本数据类型以及String类型三者之间的相互转换问题. int-&gt;Integer 1231. java.lang.Integer的构造Integer(int n)2. jdk5.0提供的自动封箱Integer a = 10;3. java.lang.Integer提供的static Integer valueOf(int n); Integer -&gt; int 121. int intValue();//java.lang.Number提供的抽象方法,java.lang.Integer重写了该方法2. jdk5.0提供的自动解箱 int-&gt;String 11. java.lang.String提供的方法static String valueOf(int n); String-&gt;int 11. java.lang.Integer类static int parseInt(String s); String-&gt;Integer 121. java.lang.Integer的构造Integer(String n)2. java.lang.Integer的方法static String valueOf(String n); Integer-&gt;String 1231. java.lang.Integer的String toString();2. java.lang.String中提供了static String valueOf(Object obj); 实例123456789101112131415161718192021222324public static void main(String[] args) &#123; //int - &gt; Integer Integer i = new Integer(1);//构造函数 Integer b = 1;//自动封装 Integer c = Integer.valueOf(1);//valueOf方法 //Integer -&gt; int int e = b.intValue(); int d = i;//拆箱 //String -&gt; int int f = Integer.parseInt(&quot;abc&quot;); //int -&gt; String String g = String.valueOf(11); //Integer -&gt; String String h = String.valueOf(i); String j = i.toString(); //String -&gt; Integer Integer k = Integer.valueOf(&quot;123&quot;); Integer l = new Integer(&quot;123&quot;); &#125; Int和Integer的区别 笔试题:int和Integer之间的区别 Integer是int的包装类；int是基本数据类型； Integer变量必须实例化后才能使用；int变量不需要； Integer实际是对象的引用，指向此new的Integer对象；int是直接存储数据值 ； Integer的默认值是null；int的默认值是0。 泛型不支持int，但是支持Integer int 存储在栈中，Integer 对象的引用存储在栈空间中，对象的数据存储在堆空间中。","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"String和StringBuilder","slug":"String和StringBuilder","date":"2021-07-31T00:58:01.000Z","updated":"2021-07-31T12:02:18.917Z","comments":true,"path":"2021/07/31/String和StringBuilder/","link":"","permalink":"http://example.com/2021/07/31/String%E5%92%8CStringBuilder/","excerpt":"","text":"java.lang.String Java中提供的处理字符串的类. 不可变的字符串 12String s = &quot;abc&quot;;s = &quot;eef&quot;;//ok,&quot;abc&quot;就变成了垃圾对象. 字符串本质上就是一个字符数组 12345678//final修饰的类不可被继承,public final class String implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123; //维护的是不可变的字符数组 //String s = &quot;abc&quot;;//将&quot;abc&quot;打散,保存成value[]数组中. private final char value[]; &#125; 虽然String底层是final修饰的字符数组, 但本质上说的是不可改变的是其地址, 可以改变的是其里面的值 实例 12345final char[] arr2 = &#123;1,2&#125;;for (int i = 0; i &lt; arr2.length; i++) &#123; arr2[i] = &#x27;a&#x27;;&#125;System.out.println(arr2); 字符串构建的方式 通过new关键字来构建 12345//创建了几个对象?//1个或者2个//①通过new关键字在堆里面创建一个字符串对象&quot;abc&quot;//②同时在&quot;串池&quot;里面扔一个对象&quot;abc&quot;[前提是串池中之前不存在&quot;abc&quot;]String s1 = new String(&quot;abc&quot;); 直接通过”串池”/“字符串常量池”的方式来构建 12345678//创建了几个对象?//它会在&quot;串池&quot;中创建一个&quot;abc&quot;字符串对象,然后将地址给了s1String s1 = &quot;abc&quot;;//&quot;串池&quot;中的特点:优先先到串池中查找是否已经存在&quot;abc&quot;对象,如果有直接返回地址给s2//否则才会继续创建新的字符串对象String s2 = &quot;abc&quot;;System.out.println(s1 == s2);//true 关于字符串的拼接 字符串的拼接使用+,但是使用+的拼接效率非常低. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package tech.aistar.day09;import java.util.Date;/** * 本类用来演示: 字符串拼接效率低* * @author: success * @date: 2021/7/27 2:15 下午*/public class StringPlusDemo &#123; public static void main(String[] args) &#123; test02();//append test01();//+ &#125; public static void test01()&#123; long t1 = System.currentTimeMillis();//获取当前系统时间的毫秒数 String str = &quot;&quot;; for (int i = 0; i &lt; 100000; i++) &#123; str+=i;//str = str + i; &#125; long t2 = System.currentTimeMillis(); System.out.println(&quot;str拼接时间:&quot;+(t2-t1)+&quot;ms&quot;); &#125; public static void test02()&#123; //java.lang.StringBuilder StringBuilder builder = new StringBuilder(); long t1 = System.currentTimeMillis();//获取当前系统时间的毫秒数 for (int i = 0; i &lt; 100000; i++) &#123; builder.append(i);//拼接方式 &#125; long t2 = System.currentTimeMillis(); System.out.println(&quot;append拼接时间:&quot;+(t2-t1)+&quot;ms&quot;); &#125;&#125; 拼接效率的原因 +底层每次都会产生一个StringBuilder对象 +底层仍然是调用StringBuilder中的append方法 1234567891011121314151617181920212223242526字符串使用+拼接的过程中,会产生新的对象 - 拼接效率低String s1 = &quot;abc&quot;;String s2 = new String(&quot;abc&quot;); admindeMacBook-Pro:Desktop admin$ javap -c HelloStrCompiled from &quot;HelloStr.java&quot;public class HelloStr &#123; public HelloStr(); Code: 0: aload_0 1: invokespecial #1 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V 4: return public static void main(java.lang.String[]); Code: 0: ldc #2 // String abc 放在了&quot;串池中&quot; 2: astore_1 3: new #3 // class java/lang/String 6: dup // &quot;abc&quot; -&gt; 堆里面 7: ldc #2 // String abc &quot;串池中已经出现了&quot; 9: invokespecial #4 // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V 12: astore_2 13: return&#125; 12345678910111213141516171819202122232425262728293031323334353637383940String s1 = &quot;abc&quot;;String s2 = new String(&quot;def&quot;);s1 = s1 + s2;//会产生一个新的对象admindeMacBook-Pro:Desktop admin$ javap -c HelloStrCompiled from &quot;HelloStr.java&quot;public class HelloStr &#123; public HelloStr(); Code: 0: aload_0 1: invokespecial #1 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V 4: return public static void main(java.lang.String[]); Code: 0: ldc #2 // String abc 2: astore_1 3: new #3 // class java/lang/String 6: dup 7: ldc #4 // String def放在了堆里面 9: invokespecial #5 // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V 12: astore_2 13: new #6 // class java/lang/StringBuilder //字符串每次拼接+,都会产生一个新的StringBuilder对象 16: dup 17: invokespecial #7 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V //StringBuilder builder = new StringBuilder(); 20: aload_1 21: invokevirtual #8 // Method java/lang/StringBuilder.append: //(Ljava/lang/String;)Ljava/lang/StringBuilder; //字符串的+,底层仍然是去调用StringBuilder类中提供的append方法 24: aload_2 25: invokevirtual #8 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder; 28: invokevirtual #9 // Method java/lang/StringBuilder.toString:()Ljava/lang/String; 31: astore_1 32: return&#125; 字符串的比较123456789101112131415161718192021222324252627282930313233343536373839404142434445package tech.aistar.day09;/** * 本类用来演示: 字符串的各种比较 * * @author: success * @date: 2021/7/27 2:35 下午 */public class StringCompare &#123; public static void main(String[] args) &#123; //s1默认指向的是堆里面的字符串对象 String s1 = new String(&quot;abc&quot;); String s2 = &quot;abc&quot;; System.out.println(s1 == s2);//false //intern()强制让s1指向串池的对象 System.out.println(s1.intern() == s2);//true String s3 = &quot;b&quot;; String s4 = &quot;a&quot; + s3;//产生一个StringBuilder对象, //因为s3是一个变量,不确定因数, 所以只能把转化为StringBuilder在用append拼接 String s5 = &quot;a&quot; + &quot;b&quot;;//因为此处的&quot;a&quot;和&quot;b&quot;就是字符串常量 //jvm对待字符串常量的拼接 - &quot;a&quot;和&quot;b&quot;的拼接 //当成&quot;ab&quot;的整体,直接扔到常量池中. System.out.println(s4 == s5);//false //字符串使用final修饰 final String s6 = &quot;b&quot;; //&quot;a&quot;+s6 =&gt; &quot;ab&quot;扔到常量池,没有产生新的对象. String s7 = &quot;a&quot; + s6; System.out.println(s5 == s7);//true String x1 = new String(&quot;abc&quot;); String x2 = new String(&quot;abc&quot;); System.out.println(x1 == x2);//false System.out.println(x1); //希望字符串的值是一样的,就希望返回true System.out.println(x1.equals(x2));//true &#125;&#125; 字符串常用方法 构造方法 String(); String(String val); String(StringBuilder builder);//StringBuilder对象转换成String对象 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778package tech.aistar.day09;/** * 本类用来演示: 字符串常用方法* * @author: success * @date: 2021/7/27 3:02 下午*/public class StringMethod &#123; public static void main(String[] args) &#123; String s = new String(&quot;abc&quot;); // java.lang.StringIndexOutOfBoundsException System.out.println(s.charAt(1));//b System.out.println(s.length());//3 String result = s.concat(&quot;de&quot;);//原来的字符串的末尾添加新的字符串 System.out.println(result);//abcde //判断字符串中是否包含某个序列 System.out.println(s.contains(&quot;bc&quot;));//true //判断前缀或者后缀 System.out.println(&quot;xxx.gif&quot;.endsWith(&quot;.gif&quot;));//true System.out.println(&quot;javaScript&quot;.startsWith(&quot;java&quot;));//true System.out.println(&quot;abc&quot;.equals(s));//true //忽略大小写的比较 System.out.println(&quot;ABc&quot;.equalsIgnoreCase(&quot;abc&quot;));//true //转换大写和小写 System.out.println(&quot;abc&quot;.toUpperCase());//ABC System.out.println(&quot;ABC&quot;.toLowerCase());//abc //返回指定字符第一次出现的字符串内的索引。 System.out.println(&quot;abcabc&quot;.indexOf(&quot;b&quot;));//1 System.out.println(&quot;abcabc&quot;.lastIndexOf(&quot;b&quot;));//4 //判断字符串是否为空 System.out.println(&quot;&quot;.isEmpty());//长度为0的字符串 - 返回true //替换 System.out.println(&quot;I Love Girl&quot;.replace(&quot;Girl&quot;,&quot;Java&quot;)); //字符串的切割 String ip = &quot;192:168:3:90&quot;; String[] arr = ip.split(&quot;\\\\:&quot;); for (String s1 : arr) &#123; System.out.println(s1); &#125; //将字符串转换成char类型数组 char[] arr2 = &quot;白日依山尽&quot;.toCharArray(); for (char c : arr2) &#123; System.out.println(c); &#125; String x1 = &quot;abcde&quot;; String x2 = x1.substring(1,3);//[1,3) System.out.println(x2); System.out.println(x1.substring(1));//从1一直截取到最后bcde //trim() - 去除字符串左右两边的空格 System.out.println(&quot; ab c &quot;.trim().length());//4 System.out.println(&quot; &quot;.trim().length());//0 //int-&gt;String String o = String.valueOf(10); System.out.println(o+10); &#125;&#125; java.lang.StringBuilder 它是一个可变的字符串 - final修饰,性能最高的.默认的容量16.线程不安全的 StringBuilder(); StringBuilder(String val);//String类型转换成StringBuilder类型 扩容机制 研究append方法 1234567891011121314151617181920212223242526272829303132333435363738StringBuilder x = new StringBuilder(&quot;abc&quot;);x.append(&quot;def&quot;);StringBuilder类的父类AbstractStringBuilderpublic AbstractStringBuilder append(String str) &#123;if (str == null) return appendNull();int len = str.length();//len = 3//count+len//count - 原来数组中已经存在的字符的长度//len - 需要存入的新的字符串长度ensureCapacityInternal(count + len);//3str.getChars(0, len, value, count);count += len;return this;&#125;扩容方法private void ensureCapacityInternal(int minimumCapacity) &#123;// overflow-conscious codeif (minimumCapacity - value.length &gt; 0) expandCapacity(minimumCapacity);&#125;//真正的扩容方法void expandCapacity(int minimumCapacity) &#123;int newCapacity = value.length * 2 + 2;//扩容,得到新的长度if (newCapacity - minimumCapacity &lt; 0)//扩容得不够,不够长 newCapacity = minimumCapacity;//直接补充到最长的.if (newCapacity &lt; 0) &#123;//长度会溢出. if (minimumCapacity &lt; 0) // overflow throw new OutOfMemoryError(); newCapacity = Integer.MAX_VALUE;&#125;value = Arrays.copyOf(value, newCapacity);&#125; 常用方法1234567891011121314151617181920212223242526272829303132333435363738package tech.aistar.day09;/** * 本类用来演示: 常用方法 - 可变的字符串 * * @author: success * @date: 2021/7/27 4:20 下午 */public class StringBuilderMethod &#123; public static void main(String[] args) &#123; StringBuilder x = new StringBuilder(&quot;abcd&quot;);//String-&gt;StringBuilder System.out.println(x); StringBuilder result = x.delete(1,3);//[1,3), 使用delete的原字符串也会发生改变 System.out.println(&quot;result:&quot;+result);//ad System.out.println(&quot;x:&quot;+x);//ad System.out.println(x.deleteCharAt(0));//d 根据下标进行删除操作, 原数组也会改变 x.insert(0,&quot;管管&quot;); System.out.println(x);//管管d //反转字符串 System.out.println(x.reverse());//d管管 int n = 6723; System.out.println(String.valueOf(n).length());//String.valueOf(n) int -&gt; String StringBuilder y = new StringBuilder(String.valueOf(n));//new StringBuilder(String.valueOf(n)) int-&gt;String-&gt;StringBuilder System.out.println(y.reverse()); //StringBuilder-&gt;String System.out.println(x.toString()); &#125;&#125; 总结 String类型和StringBuilder类型之间的相互转换问题 StringBuilder-&gt;String类型 java.lang.StringBuilder中提供的String toString(); java.lang.String类中提供的构造方法String(StringBuilder builder); java.lang.String类中提供的static String valueOf(Object obj);//面向父类编程 String-&gt;StringBuilder java.lang.StringBuilder中提供的构造StringBuilder(String val); java.lang.StringBuffer 它的使用方式和StringBuilder是一模一样的.唯一区别是它是多线程安全的.可变的字符串 因为它里面的方法都使用synchronized关键字进行了修饰,重量级的对象. 性能低于StringBuilder 笔试题 String,StringBuilder,StringBuffer三者的区别? - 查,补充完整 - 作业 三者之间都是使用final修饰的,都是不可被继承的,jdk处于安全角度考虑的 - 共同点 不同点 2-1. String它是不可变的字符串,线程安全的.比较耗系统资源和内存的.性能是三个当中最低的. 2-2. StringBuilder可变的字符串 - 线程不安全的,效率是最高的. 2-3. StringBuffer可变的字符串 - 线程安全的.效率低于StringBuilder,但是高于String 作业 两道笔试题 12345678//从oldStr中删除指定的target字符串//比如&quot;abcdebcef&quot;,&quot;bc&quot; -&gt; 返回&quot;adeef&quot;//禁止使用replace方法//递归算法public static String delByStr(String oldStr,String target)&#123;&#125; 123456//找出俩个字符串中的最大长度的公串//abcbcedfdfdepopoqqq//fdfdbcbceoifdfdeqqa//bcbce fdfde","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"static和单例模式","slug":"static和单例模式","date":"2021-07-31T00:56:49.000Z","updated":"2021-07-31T00:57:26.286Z","comments":true,"path":"2021/07/31/static和单例模式/","link":"","permalink":"http://example.com/2021/07/31/static%E5%92%8C%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"static关键字 static修饰的成员是在JVM加载类的时候就会被立即分配空间以及初始化 - 只有1次,内存的实例只有1份 非静态的成员的是在每次创建对象的时候才会被分配空间以及初始化 作用 static修饰符类 - 静态内部类[过] 修饰的属性 - 静态属性 方法 - 静态方法 代码块 - 静态代码块 JVM加载类进内存的活动顺序 JVM加载类进内存 给所有的静态属性分配空间以及初始化 给所有的静态方法分配空间以及初始化 调用静态代码块 如果创建了对象 4-1. 给这个对象的所有的非静态属性分配空间以及初始化 4-2. 给这个对象的所有的非静态方法分配空间 4-3. 调用普通代码块 4-4. 调用构造块 static关键字应用 设计模式 - 单例模式 如何保证某个类的对象在内存中永远只有1份.后期,某些类的创建和销毁的时间成本比较高.这些类有必要设计成单例的. 比如jdbc中的连接池对象[重量级的对象] 饿汉模式 多线程安全12345678910111213141516171819202122232425262728293031package tech.aistar.design.singleton.version01;/** * 本类用来演示: 将Singleton01设置成饿汉模式 - 单例的 * * @author: success * @date: 2021/7/27 9:28 上午 */public class Singleton01 &#123; //2. 初始化一个变量,该变量就是该类的唯一实例[对象] private static Singleton01 instance = new Singleton01(); //1. 私有化构造 private Singleton01()&#123; //比较费时费力的代码,可能需要更多的时间 System.out.println(&quot;Singleton01...&quot;); &#125; //3. 提供一个公开的静态的方法来返回这个类的唯一实例 public static Singleton01 getInstance()&#123; return instance; &#125;&#125;class TestSingleton01&#123; public static void main(String[] args) &#123; //获取类的实例 Singleton01 s1 = Singleton01.getInstance(); Singleton01 s2 = Singleton01.getInstance(); System.out.println(s1 == s2);//true &#125;&#125; 懒汉模式 多线程不安全123456789101112131415161718192021222324252627package tech.aistar.design.singleton.version02;/** * 本类用来演示: 懒汉 * * @author: success * @date: 2021/7/27 9:35 上午 */public class Singleton02 &#123; private static Singleton02 instance; private Singleton02()&#123; System.out.println(&quot;私有化构造&quot;); &#125; public static Singleton02 getInstance()&#123; return instance == null?instance = new Singleton02():instance; &#125;&#125;class TestSingleton02&#123; public static void main(String[] args) &#123;// Singleton02 s1 = Singleton02.getInstance();// Singleton02 s2 = Singleton02.getInstance();// System.out.println(s1 == s2); &#125;&#125; 双重检查锁 - 笔试脱手写的版本 懒汉模式下 - 仍然是多线程安全的 1234567891011121314151617181920212223242526272829303132333435363738package tech.aistar.design.singleton.version03;/** * 本类用来演示:双重检查锁 - 笔试脱手写的版本* * @author: success * @date: 2021/7/27 10:07 上午*/public class Singleton03 &#123; private static Singleton03 instance; private Singleton03()&#123; System.out.println(&quot;私有化构造&quot;); &#125; public static Singleton03 getInstance()&#123; //因为本身&quot;锁&quot;资源就是一个比较昂贵的资源,为了避免跑得慢的线程去抢这个把锁,所以此处也要进行非空判断. if(instance == null)&#123; //跑得快的线程都会进入此处A,B //A,B线程就会去争抢锁资源,谁抢到锁资源,谁就会进入 //同步代码块去执行里面的代码 //假设A线程抢到了,B就会在等待 synchronized (Singleton03.class)&#123; //A进入判断instance==null //只要抢到&quot;锁&quot;的线程,如果此处没有非null判断 //那么进入到这的线程都会去执行instance = new Singleton03(); if(instance == null)&#123; //由A线程进行实例的初始化 //A继续执行,等A执行完毕之后,那么A就会释放锁资源 //其他线程继续争抢锁资源. instance = new Singleton03(); &#125; &#125; &#125; return instance; &#125;&#125; volatile 可见性 - 忽略 禁止JVM的指令重排 12345678910int i=10;//原子性操作Student s = new Student();//不是一个原子性操作①给s对象分配内存空间②调用构造块,执行构造函数 - 初始化动作③将引用s指向内存中的那个对象. 但是JVM内部会对这些指令进行一个优化操作.本来你的顺序应该是①-②-③,经过JVM指令重排之后,顺序有可能变成①-③-② 123456789101112131415161718192021222324252627282930313233343536373839package tech.aistar.design.singleton.version03;/** * 本类用来演示:双重检查锁 - 笔试脱手写的版本 * * @author: success * @date: 2021/7/27 10:07 上午 */public class Singleton03 &#123; private volatile static Singleton03 instance; //private static Singleton03 instance; private Singleton03()&#123; System.out.println(&quot;私有化构造&quot;); &#125; public static Singleton03 getInstance()&#123; //② - 跑得很慢的线程刚刚到达此处,其他线程判断instance是不为null的 //但是instance可能指向的是一个&quot;半成品&quot; - A线程还没有完成构造方法. //其他线程可能会使用到这个&quot;半成品&quot;对象,肯定会有问题. if(instance == null)&#123; synchronized (Singleton03.class)&#123; if(instance == null)&#123; //① - A线程可能执行到2步骤的时候,instance已经不为null //不是一个原子性操作,可能经过JVM指令重排 //1. 给instance对象分配空间 //2. 将对象的内存地址赋值给了instance //3. 调用构造方法 instance = new Singleton03(); &#125; &#125; &#125; return instance; &#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"面向对象","slug":"面向对象","date":"2021-07-31T00:55:42.000Z","updated":"2021-09-14T01:38:21.883Z","comments":true,"path":"2021/07/31/面向对象/","link":"","permalink":"http://example.com/2021/07/31/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/","excerpt":"","text":"面向对象 java语言属于面向对象的语言 面向对象本身不是一门具体的技术,符合人类思维的思想. 宗旨:把一个复杂的大型的业务,利用面向对象的思想进行面向对象的分析, 接着面向对象的设计,最终进行面向对象的编程. 对象是数据在内存中的”载体” 重新认识类和对象 类是抽象的概念,对象是具体的概念 类是构建对象的蓝图/模板,对象是类的具体的实例化[表现] 类是用来描述对象的. 比如: ​ 类:水果 交通工具 学生 对象:榴莲 飞机 小三 比如: id username age 100 admin 18 101 tom 17 修饰符 访问修饰符 - 决定了这个成员可以在哪里能够被访问. 权限修饰符 同一个类 同一个包 不同包的子类 不同包的非子类 Private √ Default √ √ Protected √ √ √ Public √ √ √ √ 安全级别:private&gt;默认的&gt;protected&gt;public 可见区域:public&gt;protected&gt;默认的&gt;private 面向对象的思想 核心:”一切皆对象” ①分析出系统中业务的关键对象 - “找对象” - 未来页面上显示的数据 ②找出对象的**”属性”** - “对象拥有什么” ③分析出对象的”方法” - “对象可以干什么,对象的功能” ④找出对象与对象之间的关系. 123456781:1 - 一个丈夫对应一个妻子,一个妻子对应一个丈夫.1:N - 一个客户拥有多个订单.一个订单只能属于一个客户 - 70%N:N - 一个学生可以选择多门课程,一门课程可以被多个学生来选择.自关联 - 自己关联自己. ⑤最后一步才会去考虑具体怎么编码实现.可能也会考虑数据结构或者算法. “相亲业务” - 媒婆帮你找一个”对象” 你要查看”对象”的属性 询问”对象”的功能 分析你和”对象”是否来道🌩 考虑 - 追 - 彩礼 - 结婚 - 具体怎么实现! 面向过程的思想 C是典型的面向过程的思想 ①优先考虑的就是算法和数据结构 - 考虑的就是具体怎么实现. 实体类 实体类就是用来描述对象的. 实体类中包含属性,构造方法,getter/setter方法,toString方法. 如何定义属性 语法: 修饰符 数据类型 属性名 [=初始值]; 修饰符 public 公开的 private 私有的 数据类型 八种基本数据类型 内置对象类型以及自定义对象类型. 属性名 参考变量的命名 - “小驼峰” 三大特征 - 封装性 封装 - Encapsulation - 屏蔽底层的细节,数据提供保护的机制 属性私有化 提供getter/setter方法 setter方法 - set属性名[首字母变大写] - 推荐的命名规则 setter方法这种设置值的好处 2-1. setter方法中是可以进行参数有效性判断的. 2-2. 业务需求改变了 - 属性名称改变了,使用到这个属性的具体的地方都要发生改变 - “可维护性” 2-3. 并不是所有的属性的值都是通过那么太简单的计算得到的. 1234567891011121314151617181920212223242526public class Orders&#123;private int id; private double price; private int count; private double total; //getter/setter - 提供好了 public double getTotal()&#123; double result = this.price * this.count; return result;&#125; &#125;Orders o = new Orders();o.setPrice(100.0);o.setCount(10);//o.setTotal(o.getPrice()*o.getCount());System.out.println(o.getTotal()); 2-4. 并不是所有的属性都需要对外进行公开的. 继承Inheritance 将多个具有共同特点的对象抽象出一个”父类”. 父类中存储的是各个子类共同的特点[属性]或者功能[方法] 继承的好处 - 提高了代码的复用性.使用多态的前提,为了代码的可拓展性. 继承的缺点 - 增加了类与类之间的关系.不太符合软件的设计原则”高内聚,低耦合” ​ 低耦合 - 模块与模块之间/类与类之间的关系应该越弱越好 - 没有关系 ​ 高内聚 - 单个模块/类能够独立完成某个业务功能的能力比较强. ​ 实际开发中,可以采用设计原则**”合成复用原则”** - 来替代继承的使用. 使用extends关键字来表示某个类继承某个父类 比如: 1234567891011121314public class A&#123;&#125;public class B extends A&#123;&#125;B 是 A的子类,A是B的父类,基类,超类.1. A的父类就是java.lang.Object - 当某个类如果没有明确指定它的父类是谁,那么这个类默认继承Object2. 子类是可以访问到父类中所有的非私有的成员3. java的类只支持单继承.一个类只能继承一个父类.避免出现网状结构,保证类的层次性.java中的接口是支持多重继承.一个接口可以继承多个接口.4. 继承具有传播性.C extends B B extends AC间接继承于A,C也是可以访问到A中的所有的非私有的成员5. 不要滥用继承,前提B is A super关键字 必须放在构造方法的首行 调用父类的构造 在子类的构造中,如果没有出现任何的super语句.那么系统默认会给定super(); - 调用父类的空参构造 当在子类中调用了一个和父类中同名的成员的时候,需要通过super关键字来加以区分[强制调用父类中那个同名的成员] 多态 - polymorphism 对象有多种形态.发生前提是具有继承关系 相同的消息可能会送给多个不同的类别之对象， 而系统可依据对象所属类别，引发对应类别的方法，而有不同的行为。简单来说，所谓多态意指相同的消息给予不同的对象会引发不同的动作。 instanceof 进行类型的判断,只有为true的时候,才能够进行类型的转换[强制,向下] 如果没有进行类型的判断,随便进行了一个强制类型转换,可能会抛出java.lang.ClassCastException类型转换失败异常 三种场景应用 面向父类编程 对象的编译时类型写成父类,对象的运行时类型写成子类 编译时类型 对象名 = new 运行时类型(); 对象的编译时类型决定了对象的访问能力 - “对象名只能访问到编译时类型中定义的成员” 对象的运行时类型决定了对象的行为能力 - “子类中如果一旦重写了父类中的方法,那么运行期间调用的是子类重写之后的方法” 方法的参数类型写成父类,调用这个方法的时候,可以传入这个父类的任意一个子类对象 方法的返回类型写成父类,方法的返回结果可以是这个父类的任意一个子类对象 - “简单工厂设计模式” this关键字 作用1 - 当前对象,区分方法中参数和实体类中的定义的属性 - 当两者同名的时候. 调用当前实体类中已经存在的另外一个构造方法. 2-1. this()调动空参 2-2. this(参数1,参数2) - 带参构造 2-3. this调用构造的语句一定要在构造体的首行 this和super语句的区别 toString方法 当我们直接输出对象的时候,默认一定会去调用toString方法 - 如果这个对象是null,那么不会调用toString方法的 当自定义的实体类中没有手动提供toString方法,那么这个对象会自动去调用java.lang.Object类中的toString方法 1234public String toString() &#123;return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());&#125; java.lang.Object - 它是所有的类的根类,基类,超类,父类. 如果某个类没有明确指定它的父类,那么这个类默认会直接继承java.lang.Object类 “User类是Object类的儿子” - 规定 - “子类可以调用父类中所有的公开的成员“ Object类中提供的toString方法只能用来返回对象的内存地址 - 不满足实际的打印需求 所以需要在实体类中重新重写这个toString方法. 当子类User类一旦重写了toString方法之后,那么就会采取”就近原则”,直接调用自己重写 之后的toString方法. 构造方法-constructor 作用:创建对象的时候调用构造方法,通过new关键字 可以在创建对象的同时进行赋值操作,赋值的方式只有1次,setter赋值,可以多次赋值 特点 当实体类中如果没有手动提供任何一个构造方法的时候,那么系统会自动分配一个 空参构造.如果实体类中一旦手动提供了带参构造之后,那么系统将不会再分配一个空参构造了. 定义的时候,不需要返回类型的 1234public 类名([参数列表])&#123;//构造体&#125; 构造允许重载的 实体类中推荐只用提供空参,全参 抽象类 抽象类天生就是用来被子类继承的.抽象类天生就是不能够被外部进行实例化的 抽象类使用abstract关键字来进行修饰 抽象类中允许存在构造方法,普通属性,普通方法以及抽象方法. 普通类是没有资格去定义抽象方法 抽象方法也是使用abstract来修饰的,抽象方法是指没有方法体的方法. 抽象的方法天生也是用来被子类重写的. 抽象类是一种抽象的数据类型. 抽象类的继承的特点 如果某个普通的子类继承了抽象类,那么这个子类必须要重写这个抽象父类中的所有的抽象方法. 如果某个子类继承了抽象类,不想重写抽象父类中的所有的抽象方法,那么需要将这个子类也定义成抽象类. 不能一起混用的修饰符 final和abstract一起使用 private和abstract能不能一起修饰方法. static和abstract不能一起用来修饰方法 static是不存在多态的. 接口接口就是多个类的公共规范,接口是一种引用的数据类型,接口就是比“抽象类”还“抽象”的“抽象类”，可以更加体现了：规范和具体实现的分离。 属于抽象的数据类型,也是不能够被实例化的 接口中不允许定义普通属性的,不允许出现构造的. jdk8.x允许在接口中使用default关键字来定义普通方法. 接口也是用来定义抽象的方法的.接口中的方法都是抽象的方法. 接口的属性都是公开的静态的常量属性. 定义接口的关键字是interface,编译之后也是.class字节码文件 接口也是可以静态方法的. 接口与类相似点： 一个接口可以有多个方法。 接口文件保存在 .java 结尾的文件中，文件名使用接口名。 接口的字节码文件保存在 .class 结尾的文件中。 接口相应的字节码文件必须在与包名称相匹配的目录结构中。 接口与类的区别： 接口不能用于实例化对象。 接口没有构造方法。 接口中所有的方法必须是抽象方法，Java 8 之后 接口中可以使用 default 关键字修饰的非抽象方法。 接口不能包含成员变量，除了 static 和 final 变量。 接口不是被类继承了，而是要被类实现。 接口支持多继承。 接口和抽象类的区别: 接口的方法默认是public,abstract, jdk1.8之后又default方法，所有方法在接口中不能有实现，抽象类可以有抽象的方法,构造方法, 普通方法, 静态方法. 接口中的实例变量默认是final类型的，而抽象类中则不一定. 一个类可以实现多个接口，但最多只能实现一个抽象类. 一个类实现接口的话要实现接口的所有方法，而抽象类不一定. 命名规则 使用I开头或者able结尾 多态的另外应用 面向接口编程 对象的编译时类型写成接口,对象的运行时类型写成是实现类 方法的参数类型写成接口,调用方法时可以传入这个接口的任意一个实现类. 方法的返回类型写成接口,方法的返回结果的类型可以是这个接口的任意一个实现类. 接口的规则 接口和类 - 类是可以去实现这个接口的. 接口天生是用来是实现类来实现的 - implements 普通的类去实现某个接口的话,那么必须要实现这个接口中所有的抽象方法 如果抽象的类去实现某个接口的话,那么可以选择实现或者不实现. 一个接口可以拥有多个实现类. 一个类可以同时实现多个接口,接口之间用逗号隔开.需要实现这些接口中所有的抽象方法. 接口和接口 一个接口可以继承多个接口,接口是支持多重继承的. 应用 提供了一种”契约机制”,屏蔽了底层的具体的实现,为了程序的拓展 作用 - 制定开发的这个软件中的功能 - “业务方法” 接口的分类 业务接口 - 该接口中只定义抽象方法 常量接口 - 该接口中只定义了常量属性,管理系统中所有的常量属性的.jdk5.x使用了枚举类型来替代了常量接口 标记接口 - 什么都没有,做标记的. 123456public interface IA&#123;&#125;public class Aimpl implements IA&#123;...&#125;Aimpl a = new Aimpl();System.out.println(a instanceof IA);//true 函数式接口 - jdk8.x - 配合jdk8.x - lambda表达式 里面只有一个抽象方法的接口 - @FunctionalInterface 作业 循环 OO题 123456789101112131415161718192021222324Book[id,name,price...]1.定义图书操作业务接口 IBookBiz有如下方法://添加图书 void add(Book b);//根据图书name 来删除指定图书 void deleteByName(String name);//打印出所有的图书信息 void outputAllBooks(); 2. 定义 数组图书管理业务实现类(ArrayBookBiz) 实现 IBookBiz接口，实现所有方法,提示，给出如下属性属性:private static final int CAPACITY = 5;private int count; //代表有效图书数量private Book[] books = new Book[CAPACITY];方法： 就是实现接口中的所有方法最后，写测试类，测试这三个方法. 接口练习题 12345678910111213141516171819202122232425接口更重要的作用：作为模块与模块之间一个协议，软件生产一直希望能够像硬件生产一样：主板可由一个厂家生产，显卡可由另一个厂家生产，用户只需要将显卡插到主板上的显卡插槽上，便可以协同工作了。（插槽——主板、显卡的标准接口已经确定，插槽就是接口）。显卡厂商去实现接口中所暴露出来的方法。主板只需要利用显卡的插槽去获取（调用）显卡的功能。1、 定义一个显卡接口VideoCard，此接口中有抽象方法： 1） videoRunning()：显示显卡运行信息 ; 2） videoClosing()：显示显卡停止工作时的信息;2、 定义一个芯片接口Cpu,此接口中有抽象方法： 1） cpuRunning()：显示显卡运行信息 ; 2） cpuClosing()：显示显卡停止工作时的信息;3、 定义类IntelCpu：实现Cpu接口的全部功能，其中包括： 1） 无参构造方法：显示：” Make an Intel&#x27;s CPU”. 2） 实现Cpu接口的所有方法4、 定义类DmengVideoCard：实现VideoCard接口的全部功能，其中包括： 1） 无参构造方法：显示：”Make a Dmeng&#x27;s VideoCard”. 2） 实现VideoCard接口的所有方法.5、 定义类Mainboard 1） 创建有参构造体，传入显卡和芯片 2） run():显示主板运行信息 3） close():显示主板停止信息6、 定义一个Computer类，包含主函数main(),组装一台电脑，测试接口的应用，其中main()方法包括： 1） 买一块Dmeng公司的显卡 2） 买一块Intel公司的芯片 3） 买一块主板:插上显卡、芯片 4） 组装好后，开机运行显示显卡、芯片、主板等开机信息。 5） 关机信息显示 6） 创建openPC方法，打开电脑。 7） 创建closePC方法，关闭电脑。 预习题 - static关键字 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218 1. public class Cygnus&#123; static int value = 9; private void printValue()&#123; int value = 69; System.out.println(this.value); &#125; public static void main(String[] args) throws Exception&#123; new Cygnus().printValue(); &#125;&#125;这个程序会有下面哪种结果？A. 编译错误B. 打印9C. 打印69D. 运行时抛出异常--------------------------------------------------------------------------------------- 2. 写出以下程序的输出结果 class Base&#123; static&#123; System.out.println(&quot;base static&quot;); &#125; public Base()&#123; System.out.println(&quot;base constructor&quot;); &#125; &#125;public class Test extends Base&#123; static&#123; System.out.println(&quot;test static&quot;); &#125; public Test()&#123; super(); System.out.println(&quot;test constructor&quot;); &#125; public static void main(String[] args) &#123; new Test(); &#125;&#125;--------------------------------------------------------------------------------------- 3. 写出以下程序的输出结果 public class Test &#123; static&#123; System.out.println(&quot;test static 1&quot;); &#125; public static void main(String[] args) &#123; &#125; static&#123; System.out.println(&quot;test static 2&quot;); &#125; &#125; --------------------------------------------------------------------------------------- 4. public class test&#123; static&#123; int x=5; &#125; static int x,y; public static void main(String args[])&#123; x--; myMethod( ); System.out.println(x+y+ ++x); &#125; public static void myMethod( )&#123; y=x++ + ++x; &#125;&#125;A. 编译错误B. 输出：1C. 输出：2D. 输出：3E. 输出：7F. 输出：8 --------------------------------------------------------------------------------------- 5. 阅读下列程序，选择哪一个是正确的输出结果 class HelloA&#123; public HelloA() &#123; System.out.println(&quot;I’m A class &quot;); &#125; static&#123; System.out.println(&quot;static A&quot;); &#125;&#125;public class HelloB extends HelloA&#123; public HelloB()&#123; System.out.println(&quot;I’m B class&quot;); &#125; static&#123; System.out.println(&quot;static B&quot;); &#125; public static void main (String[] args)&#123; new HelloB(); &#125;&#125;A. static A I’m A class static B I’m B classB. I’m A class I’m B class static A static BC. static A static B I’m A class I’m B classD. I’m A class static A I’m B class static B --------------------------------------------------------------------------------------- 6. 以下代码的输出结果是？public class B&#123; public static B t1 = new B(); public static B t2 = new B(); &#123; System.out.println(&quot;构造块&quot;); &#125; static&#123; System.out.println(&quot;静态块&quot;); &#125; public static void main(String[] args)&#123; B t = new B(); &#125;&#125;A. 静态块 构造块 构造块 构造块B. 构造块 静态块 构造块 构造块C. 构造块 构造块 静态块 构造块D. 构造块 构造块 构造块 静态块 --------------------------------------------------------------------------------------- 7. 下面代码在main方法代码后可以正常使用的是（ ）public class Test&#123; private int a=10; int b=20; static int c=1; public static void main(String arg[])&#123; Test t = new Test(); &#125; &#125;A. t.aB. this.cC. Test.bD. Test.c --------------------------------------------------------------------------------------- 8. 下列程序执行后结果为( )class A &#123; public int func1(int a, int b) &#123; return a - b; &#125;&#125;class B extends A &#123; public int func1(int a, int b) &#123; return a + b; &#125;&#125;public class ChildClass &#123; public static void main(String[] args) &#123; A a = new B(); B b = new B(); System.out.println(&quot;Result=&quot; + a.func1(100, 50)); System.out.println(&quot;Result=&quot; + b.func1(100, 50)); &#125;&#125;A. Result=150Result=150B. Result=100Result=100C. Result=100Result=150D. Result=150Result=100 --------------------------------------------------------------------------------------- 9. 以下代码执行后输出结果为（ ）public class Test&#123; public static Test t1 = new Test(); &#123; System.out.println(&quot;blockA&quot;); &#125; static&#123; System.out.println(&quot;blockB&quot;); &#125; public static void main(String[] args)&#123; Test t2 = new Test(); &#125; &#125;A. blockAblockBblockAB. blockAblockAblockBC. blockBblockBblockAD. blockBblockAblockB","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"继承和多态","slug":"继承和多态","date":"2021-07-31T00:53:50.000Z","updated":"2021-08-04T12:18:17.121Z","comments":true,"path":"2021/07/31/继承和多态/","link":"","permalink":"http://example.com/2021/07/31/%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/","excerpt":"","text":"OO练习业务类和实体类合二为一 居然将业务方法放在了实体类中 - 违背了设计原则 - “单一职责原则”.不要给一个类增加太多的负担 实体类 - 主要是描述对象,数据在内存中的载体 - 注重的应该是数据的存储 业务类 - 存放的是业务方法 - 在于操作这些数据 员工类[编号id,姓名name,工资salary] 业务方法[crud增删改查]放在实体类中 - 不合理的. 1234567891011121314151617181920212223242526272829303132333435public class Emp&#123; private int id;private String name;private double salary;//一个上司拥有多个下属//一个下属对应一个上司//自关联private Emp[] emps;//构造,getter/setter,toString//给上司添加一个下属public void addEmp(Emp e)&#123; //数组的扩容Arrays.copyOf(数组对象,新的长度);&#125;//输出下属的个数public void printEmpCount()&#123; &#125;//输出某个上司所有的下属信息public void printEmp()&#123; &#125;&#125;//TestEmp.javaEmp boss = new Emp(1,&quot;boss&quot;,100.0,new Emp[0]);Emp e1 = new Emp(1,&quot;boss&quot;,100.0,null); 业务类和实体类分开 业务方法应该专门抽取出来放到一个业务类中. 1234567public class Account&#123;private int id;private double balance;//余额//...&#125; 123456789public class AccountBiz&#123;//转钱public void test01(Account acc1,Account acc2,double money)&#123; &#125;//存钱&#125; 继承Inheritance 将多个具有共同特点的对象抽象出一个”父类”.继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法 父类中存储的是各个子类共同的特点[属性]或者功能[方法] 继承的好处 - 提高了代码的复用性.使用多态的前提,为了代码的可拓展性. 继承的缺点 - 增加了类与类之间的关系.不太符合软件的设计原则”高内聚,低耦合” ​ 低耦合 - 模块与模块之间/类与类之间的关系应该越弱越好 - 没有关系 ​ 高内聚 - 单个模块/类能够独立完成某个业务功能的能力比较强. ​ 实际开发中,可以采用设计原则**”合成复用原则”** - 来替代继承的使用. 使用extends关键字来表示某个类继承某个父类 比如: 1234567891011121314public class A&#123;&#125;public class B extends A&#123;&#125;B 是 A的子类,A是B的父类,基类,超类.1. A的父类就是java.lang.Object - 当某个类如果没有明确指定它的父类是谁,那么这个类默认继承Object2. 子类是可以访问到父类中所有的非私有的成员3. java的类只支持单继承.一个类只能继承一个父类.避免出现网状结构,保证类的层次性.java中的接口是支持多重继承.一个接口可以继承多个接口.4. 继承具有传播性.C extends B B extends AC间接继承于A,C也是可以访问到A中的所有的非私有的成员5. 不要滥用继承,前提B is A super关键字 必须放在构造方法的首行 调用父类的构造 在子类的构造中,如果没有出现任何的super语句.那么系统默认会给定super(); - 调用父类的空参构造 如果父类有有参构造方法, 没有写无参构造, 子类的super()默认会调用父类的无参构造, 导致了父类没有写无参构造报错, 一种方法是父类加上无参构造, 一种是子类super(参数)指定父类的有参构造 当在子类中调用了一个和父类中同名的成员的时候,需要通过super关键字来加以区分[强制调用父类中那个同名的成员] 多态 - polymorphism 对象有多种形态.发生前提是具有继承关系 相同的消息可能会送给多个不同的类别之对象， 而系统可依据对象所属类别，引发对应类别的方法，而有不同的行为。简单来说，所谓多态意指相同的消息给予不同的对象会引发不同的动作。 instanceof 进行类型的判断,只有为true的时候,才能够进行类型的转换[强制,向下] 如果没有进行类型的判断,随便进行了一个强制类型转换,可能会抛出java.lang.ClassCastException类型转换失败异常 三种场景应用 面向父类编程 对象的编译时类型写成父类,对象的运行时类型写成子类 编译时类型 对象名 = new 运行时类型(); 对象的编译时类型决定了对象的访问能力 - “对象名只能访问到编译时类型中定义的成员” 对象的运行时类型决定了对象的行为能力 - “子类中如果一旦重写了父类中的方法,那么运行期间调用的是子类重写之后的方法” 方法的参数类型写成父类,调用这个方法的时候,可以传入这个父类的任意一个子类对象 方法的返回类型写成父类,方法的返回结果可以是这个父类的任意一个子类对象 - “简单工厂设计模式” final关键字 不可更改,不可变 final修饰的变量/属性 - 不能够重新赋值 final修饰的类 - 不能够被继承 final修饰的方法不能够被重写. 修饰符 访问修饰符 - 决定了这个成员可以在哪里能够被访问. 权限修饰符 同一个类 同一个包 不同包的子类 不同包的非子类 Private √ Default √ √ Protected √ √ √ Public √ √ √ √ 安全级别:private&gt;默认的&gt;protected&gt;public 可见区域:public&gt;protected&gt;默认的&gt;private 方法的重写 方法的重载和方法的重写有什么区别? 特点: 发生的前提是要有继承关系 重写有个特殊的场景 - 子类重写之后的方法的修饰符,返回类型,方法名,参数列表和父类中高度保持一致 - 重构 访问权限不能比父类中被重写的方法的访问权限更低 方法名必须要一样. 子类重写的方法的返回类型可以小于[可以是父类方法的返回类型的子类类型]或者等于父类的那个方法 参数列表必须要高度保持一致 作业1234567891011121314151617181920212223242526272829303132333435361.设计一个形状类Shape,方法:求周长和求面积 形状类的子类:Rect(矩形),Circle(圆形) Rect类的子类:Square(正方形) 不同的子类会有不同的计算周长和面积的方法 创建三个不同的形状对象 分别打印出每个对象的周长和面积 [girth() area() -&gt; 放在父类] [每个子类需要重写这些方法!] - 不要想太多应用场景,语法!2.某公司的雇员分为以下若干类：Employee：这是所有员工总的父类，属性：员工的姓名,员工的生日Date。方法：getSalary(int month) 根据参数月份来确定工资，如果该月员工过生日，则公司会额外奖励100元。SalariedEmployee：Employee的子类，拿固定工资的员工。属性：月薪HourlyEmployee：Employee的子类，按小时拿工资的员工，属性：每小时的工资、每月工作的小时数每月工作超出160小时的部分按照1.5倍工资发放。SalesEmployee：Employee的子类，销售人员，工资由月销售额和提成率决定。属性：月销售额、提成率BasedPlusSalesEmployee：SalesEmployee的子类，有固定底薪的销售人员，工资由底薪加上销售提成部分。属性：底薪。写一个函数，打印出某月每个员工的工资数额。注意：要求把每个类都做成完全封装，不允许非私有化属性。","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"日期类","slug":"日期类","date":"2021-07-31T00:51:21.000Z","updated":"2021-08-06T02:35:49.818Z","comments":true,"path":"2021/07/31/日期类/","link":"","permalink":"http://example.com/2021/07/31/%E6%97%A5%E6%9C%9F%E7%B1%BB/","excerpt":"","text":"Date api:java.util.Date[C] - 使用这个类之前,必须要导包import 这是java中提供的关于日期的处理,内置的对象类型.它本身是一个过时的类 里面提供了很多已经过时的方法. 目标:掌握这个类中提供的方法 记住Date里面的星期是: [0, 6], 其中0代表周日 Calendar里面的星期是[1,7], 其中1是周日 月份都是从[0, 11] api手册构造方法 作用:创建这个类的对象的方式 观察提供的方法是静态的方法还是非静态的方法. - api手册方法摘要 Date类中提供的方法几乎都是非静态的方法 - 考虑如何构建这个对象? 如何构建对象 - api手册的构造方法[面向对象] 简单理解构造方法 - “方法”,构造方法通过new关键字调用 Date();//Date d = new Date();//获取当前系统时间 Date(int year, int month, int date);//已经过时的 123Date d2 = new Date(2021-1900,6,21);year - 1900 =&gt; 实际的yearmonth的范围是[0,11] Date(long date);//根据一个毫秒数来构建一个指定的日期类型 - 重新设置一个新的Date Java中日期类型Date对象是不支持运算的. 1234计算三天之后的此时此刻long afterThreeTime = new Date().getTime()+3L*24*60*60*1000;Date afterThreeDate = new Date(afterThreeTime);System.out.println(afterThreeDate); 常用方法 非静态方法 - 日期对象进行调用. long getTime();//返回当前日期的毫秒数的表现形式 - 获取当前系统时间的毫秒数.距离1970年1月1日 1970年是计算机的元年 get/set方法 - 过时的 void setYear(int year);// year-1900 void setMonth(int month);//month的范围[0,11] void setDate(int date);//设置今天是几号 void setHours(int hours);//设置小时 void setMinutes(int minutes);//设置分钟 void setSeconds(int seconds);//设置秒 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970package tech.aistar.day05; import java.util.Date; /** * 本类用来演示: java.util.Date 日期处理类* * @author: success * @date: 2021/7/21 8:43 上午*/public class DateDemo &#123; public static void main(String[] args) &#123; //1. 创建一个日期对象 //alter + enter 快速导包 Date d = new Date();//空参构造方法 //为什么此处输出的不是内存地址??? - OO - toString(); //Wed Jul 21 08:45:03 CST 2021 System.out.println(d); //2. 重载的构造方法 - 过时的构造 Date d2 = new Date(2021-1900,6,21); System.out.println(d2); //3. 利用毫秒数来构建一个Date对象 Date d3 = new Date(1626829161216L); System.out.println(d3); System.out.println(&quot;====常用方法===&quot;); //4.. 获取当前日期的毫秒数 //1秒 = 1000毫秒 long nowTime = d.getTime(); System.out.println(nowTime);//1626828910303 //练习-计算三天之后的此时此刻 long afterThreeTime = new Date().getTime()+3L*24*60*60*1000; Date afterThreeDate = new Date(afterThreeTime); System.out.println(afterThreeDate); System.out.println(&quot;=====set设置/get获取======&quot;); Date now = new Date(); now.setYear(2021-1900);//设置年份 now.setMonth(6);//设置月份[0,11] now.setDate(25); System.out.println(&quot;now:&quot;+now); int year = now.getYear()+1900;//获取年份 System.out.println(&quot;year:&quot;+year); System.out.println(&quot;month:&quot;+now.getMonth());//获取月份 System.out.println(&quot;date:&quot;+now.getDate());//获取几号 System.out.println(&quot;day:&quot;+now.getDay()); // 周几,周1-周6[1-6],周日是0 System.out.println(&quot;hours:&quot;+now.getHours()); //void setTime(long date); //构造 Date(long time); Date dd = new Date(); dd.setTime(1726830007794L); System.out.println(dd); &#125;&#125; Calendar 日历类 - 超纲的内容 api - java.util.Calendar 1234public abstract class Calendarabstract[修饰符]修饰的类是一个抽象类 - 不能够被new构建Calendar对象 - Calendar cal = new Calendar();//error api手册常用方法 static Calendar getInstance(); 12//获取当前系统的日历对象Calendar cal = Calendar.getInstance();//底层使用到了简单工厂的设计模式[不需要了解暂时] 关于设置日历字段 12345678void set(int year, int month, int date)设置日历字段中的值 YEAR ， MONTH和 DAY_OF_MONTH 。 void set(int year, int month, int date, int hourOfDay, int minute)设置日历字段中的值 YEAR ， MONTH ， DAY_OF_MONTH ， HOUR_OF_DAY和 MINUTE 。 void set(int year, int month, int date, int hourOfDay, int minute, int second)设置字段中的值 YEAR ， MONTH ， DAY_OF_MONTH ， HOUR_OF_DAY ， MINUTE和 SECOND 。 12Date -&gt; Calendar void setTime(Date date); 单独针对单个字段一一进行赋值 12345void set(int field,int value);只要看到field//公开的静态的常量属性public static final int YEAR = 1; 关于获取日历字段 1234Date getTime();//获取日历信息中关于日期部分的信息 - Calendar转成Date类型 int get(int field);//关于获取日历指定字段的值 总结 毫秒数 -&gt; Date 123a. java.util.Date中提供了构造方法Date(long time);b. 上述类void setTime(long time); Date -&gt; 毫秒数 12该类中long getTime(); Calendar -&gt; Date 12Calendar类中提供了Date getTime(); Date -&gt; Calendar 12Calendar类中void setTime(Date date); 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667package tech.aistar.day05;import java.util.Calendar;import java.util.Date;/** * 本类用来演示: 日历类java.util.Calendar * * @author: success * @date: 2021/7/21 9:30 上午 */public class CalendarDemo &#123; public static void main(String[] args) &#123; //超纲 - abstract是修饰符 - 修饰类 - 抽象的类 //特点 - 不能够被new[不能够被实例化,具体化] //Calendar cal = new Calendar();//error Calendar cal = Calendar.getInstance(); //System.out.println(cal); //统一设置值 cal.set(2020,6,21); //Calendar -&gt; Date Date now = cal.getTime(); System.out.println(now); //Date -&gt; Calendar Date d = new Date(17818237347L); cal.setTime(d); System.out.println(cal.get(1)); System.out.println(&quot;====单个字段一一赋值====&quot;); //void set(int field,int value); Calendar cd = Calendar.getInstance(); //通过字面量直接进行设置 - 可读性比较差 //获取Calendar中提供的一些公开的静态的常量属性 //System.out.println(); //常量的好处 - 提供程序的可读性 cd.set(Calendar.YEAR,2021); cd.set(Calendar.MONTH,6); cd.set(Calendar.DAY_OF_MONTH,24); System.out.println(cd.getTime());//Calendar-&gt;Date int year = cd.get(Calendar.YEAR); int month = cd.get(Calendar.MONTH)+1; int day = cd.get(Calendar.DAY_OF_MONTH); System.out.println(&quot;year:&quot;+year); System.out.println(&quot;month:&quot;+month); System.out.println(&quot;day:&quot;+day); //获取周几 int week = cd.get(Calendar.DAY_OF_WEEK); System.out.println(&quot;week:&quot;+week);//周日~周六,[1~7] &#125;&#125; SimpleDateFormat java.text.SimpleDateFormat - 日期格式处理类 线程不安全的类. 目标 Date类型转换成String类型 - 按照指定的日期格式. 1234//pattern必须是一个有效的格式化模板,如果传入了一个非法模板//那么就会抛出一个java.lang.IllegalArgumentException - 非法参数异常// Illegal pattern character &#x27;q&#x27;String format(Date date); String类型转换成Date类型. 1234//如果构造中的pattern的格式和日期的字符串的格式不一致,那么在调用//parse方法的时候就会抛出java.text.ParseException: Unparseable date: &quot;2020-09-03&quot;//解析失败异常Date parse(String str); 模板pattern Letter Date or Time Component Presentation Examples G Era designator Text AD y Year Year 1996; 96 Y Week year Year 2009; 09 M Month in year (context sensitive) Month July; Jul; 07 L Month in year (standalone form) Month July; Jul; 07 w Week in year Number 27 W Week in month Number 2 D Day in year Number 189 d Day in month Number 10 F Day of week in month Number 2 E Day name in week Text Tuesday; Tue u Day number of week (1 = Monday, …, 7 = Sunday) Number 1 a Am/pm marker Text PM H Hour in day (0-23) Number 0 k Hour in day (1-24) Number 24 K Hour in am/pm (0-11) Number 0 h Hour in am/pm (1-12) Number 12 m Minute in hour Number 30 s Second in minute Number 55 S Millisecond Number 978 z Time zone General time zone Pacific Standard Time; PST; GMT-08:00 Z Time zone RFC 822 time zone -0800 X Time zone ISO 8601 time zone -08; -0800; -08:00 日期工具类 java.util.Date 获取键盘键盘输入 java.util.Scanner键盘类 如何构建这个Scanner对象 12Scanner sc = new Scanner(System.in); 方法 3-1. int nextInt();//只能获取整数 3-2. double nextDouble();//获取小数 3-3. String nextLine();//获取字符串 注意点:nextLine不要和nextInt或者nextDouble混用.","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"二维数组","slug":"二维数组","date":"2021-07-31T00:49:35.000Z","updated":"2021-07-31T00:50:00.626Z","comments":true,"path":"2021/07/31/二维数组/","link":"","permalink":"http://example.com/2021/07/31/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/","excerpt":"","text":"递归算法 方法体中调用方法自己本身 递归算法的方法体中一定要出现递归的出口,否则会抛出java.lang.StackOverflowError - 堆栈溢出错误 使用场景:适合解决大量的,重复性的业务题 缺点:性能比较低,将每次计算的结果都会保存在内存中. 案例 求某个数的阶乘 ※ 12345678910111213141516/** * n! * @param n * @return */public static int jie(int n)&#123; //如果没有出口 - java.lang.StackOverflowError 堆栈溢出错误 //1. 第一个位置都是1 if(n==1) return 1; //2. 方法体中调用自己 return n*jie(n-1); // 6*jie(5) // 6*5*4*3*2*1&#125; 斐波那契数列 ※ 12345678910//斐波那契数列//1 1 2 3 5 8 13 21 34 55 ...public static int fei(int n)&#123; if(n == 1 || n==2) return 1; return fei(n-1) + fei(n-2); //n=4 //fei(3)+fei(2) //fei(2) + fei(1) + fei(2)=3&#125; 求最大公约数 123456//求最大公约数public static int commonDivisor(int m,int n)&#123; if(m % n ==0) return n; return commonDivisor(n,m%n);&#125; 求杨辉三角某行某列的值 1234567891011121314151617 /** * 1 * 1 1 * 1 2 1 * 1 3 3 1 * 1 4 6 4 1 * 1 5 10 10 5 1 * * @param x 纵坐标 行 * @param y 横坐标 列 * @return */public static int yang(int x,int y)&#123; if(y==0 || x==y) return 1; return yang(x-1,y-1) + yang(x-1,y);&#125; 打印直角三角形杨辉三角 12345678910111213 /** * 打印直角三角形. * @param x 打印的杨辉三角的行数 */public static void printYang(int x)&#123; for (int i = 0; i &lt; x; i++) &#123; for (int j = 0; j &lt;=i ; j++) &#123; System.out.print(yang(i,j)+&quot;\\t&quot;); &#125; System.out.println(); &#125;&#125; 二维数组 数据类型 变量 = 初始化; 数据类型 - 八种基本数据类型以及对象类型 数组本身就是属于对象类型 1int[] arr = new int[3];//arr的数据类型int[],整数型数组,int型数组 元素类型[] 变量名 = new 元素类型[数组长度]; ```javaint[][] 变量名 = new int[rows][cols]元素类型决定了数组中可以存放的数据的类型二维数组中的每个元素就是一维数组 1 定义一个3行2列的int型二维数组 int[][] arr = new int[3][2]; int arr[][] = new int[3][2]; 1234567891011## 赋值方式1. 通过下标一一赋值```javaint[][] arr = new int[3][2];arr[0][0]=100; 2. 定义二维数组的同时进行赋值 123int[][] arr = &#123;&#123;1,2&#125;,&#123;3,4&#125;,&#123;5,6&#125;&#125;;int[][] arr2 = new int[][]&#123;&#123;1,2&#125;,&#123;3,4&#125;,&#123;5,6&#125;&#125;; 先定义一个数组,然后是一行一行赋值 1234int[][] arr = new int[3][3];arr[0] = &#123;1,2,3&#125;;//errorarr[0] = new int[]&#123;1,2,3&#125;;//ok 定义一个不规则的二维数组 123456列可以省略不写int[][] arr4 = new int[3][];arr4[0] = new int[]&#123;1&#125;;arr4[1] = new int[]&#123;1,2&#125;;arr4[2] = new int[]&#123;1,3,1&#125;; 遍历方式 通过下标一一输出 通过单层for循环 1234for (int i = 0; i &lt; arr.length; i++) &#123; System.out.println(Arrays.toString(arr[i]));&#125; 双层for循环 12345678for (int i = 0; i &lt; arr.length; i++) &#123; //int[] temp = arr[i]; for (int j = 0; j &lt; arr[i].length; j++) &#123; System.out.print(arr[i][j]+&quot;\\t&quot;); &#125; System.out.println();&#125; java.util.Arrays工具类中 12System.out.println(Arrays.deepToString(arr)); 增强for循环 1234567891011for(元素类型 变量:数组对象名)&#123; &#125; for (int[] ints : arr) &#123; // System.out.println(ints); for (int r : ints) &#123; System.out.print(r+&quot;\\t&quot;); &#125; System.out.println(); &#125; 练习题12345678910111213141516171819202122232425262728293031323334353637383940414243444546String[][] arr = new String[4][6];arr[0]=new String[]&#123;&quot;白&quot;,&quot;日&quot;,&quot;依&quot;,&quot;山&quot;,&quot;尽&quot;,&quot;,&quot;&#125;;arr[1]=new String[]&#123;&quot;黄&quot;,&quot;河&quot;,&quot;入&quot;,&quot;海&quot;,&quot;流&quot;,&quot;.&quot;&#125;;arr[2]=new String[]&#123;&quot;欲&quot;,&quot;穷&quot;,&quot;千&quot;,&quot;里&quot;,&quot;目&quot;,&quot;,&quot;&#125;;arr[3]=new String[]&#123;&quot;更&quot;,&quot;上&quot;,&quot;一&quot;,&quot;层&quot;,&quot;楼&quot;,&quot;,&quot;&#125;;package tech.aistar.day04;/** * 本类用来演示: 古诗词 横变竖 * * @author: success * @date: 2021/7/20 3:06 下午 */public class PoemsDemo &#123; public static void main(String[] args) &#123; String[][] arr = new String[4][6]; arr[0]=new String[]&#123;&quot;白&quot;,&quot;日&quot;,&quot;依&quot;,&quot;山&quot;,&quot;尽&quot;,&quot;,&quot;&#125;; arr[1]=new String[]&#123;&quot;黄&quot;,&quot;河&quot;,&quot;入&quot;,&quot;海&quot;,&quot;流&quot;,&quot;.&quot;&#125;; arr[2]=new String[]&#123;&quot;欲&quot;,&quot;穷&quot;,&quot;千&quot;,&quot;里&quot;,&quot;目&quot;,&quot;,&quot;&#125;; arr[3]=new String[]&#123;&quot;更&quot;,&quot;上&quot;,&quot;一&quot;,&quot;层&quot;,&quot;楼&quot;,&quot;,&quot;&#125;; change(arr); &#125; public static void change(String[][] arr)&#123; String[][] temp = new String[6][4]; for (int i = 0; i &lt; arr.length; i++) &#123; for (int j = 0; j &lt; arr[i].length; j++) &#123; temp[j][i] = arr[i][j]; &#125; &#125; for (int i = 0; i &lt; temp.length; i++) &#123; for (int j = 0; j &lt; temp[i].length; j++) &#123; System.out.print(temp[i][j]+&quot;\\t&quot;); &#125; System.out.println(); &#125; &#125;&#125; 作业 http://xzc.cn/EhC5y656uG A B C 二维数组输出直角的杨辉三角 将1~5之间的随机整数,存储到一个长度为15的一维数组中.写一段程序. 统计每个随机数在这个数组中出现的次数.并且根据出现的次数进行降序排列. 1234567arr -&gt; &#123;1,2,1,2,3,4,1,2,1,1,1...&#125;数组去重 - 个数temp -&gt; &#123;1,2,3,4&#125; two[i] = new int[]&#123;temp[i],count&#125;;int[][] two = new int[?][2];排序","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"重载和数组内存分配","slug":"重载和数组内存分配","date":"2021-07-31T00:48:07.000Z","updated":"2021-07-31T00:48:29.423Z","comments":true,"path":"2021/07/31/重载和数组内存分配/","link":"","permalink":"http://example.com/2021/07/31/%E9%87%8D%E8%BD%BD%E5%92%8C%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/","excerpt":"","text":"方法的重载(@overload) 前提: 重载的方法是存在于同一个类中 [前提] 重载的方法的方法名必须相同 重载的方法的参数列表必须不相同 重载的方法的返回类型可以不一样,可以一样 1234567891011121314public class LoadMethodDemo &#123; public static void main(String[] args) &#123; add(20); &#125; public static int add()&#123; System.out.println(&quot;add -&gt; 100&quot;); return 100; &#125; public static void add(int i)&#123; System.out.println(i); &#125;&#125; 优点就是简化api - 方便调用的. 学会使用api 通过学习java.lang.Math - 数学工具类 - 提供了很多关于数学计算的方式. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package tech.aistar.day03;/** * 本类用来演示: java.lang.Math* * @author: success * @date: 2021/7/19 8:59 上午*/public class MathDemo &#123; public static void main(String[] args) &#123; //绝对值 int n = Math.abs(-10); System.out.println(n); //求随机数 - 伪随机的 //static double random();//[0.0,1.0)之间的随机小数 System.out.println(Math.random()); //[1,100]之间随机的整数 int result = (int) (Math.random()*100+1);//[1,100] System.out.println(result); //[3,5]之间的随机整数 int m = (int) (Math.random()*3+3); System.out.println(m); //求俩个数中的最大值/最小值 System.out.println(Math.max(10,20));//20 //笔试填空题 - //返回小于或等于参数的最大（最接近正无穷大） double值，等于一个数学整数。 //floor方法. System.out.println(Math.floor(3.5));//3.0 System.out.println(Math.floor(4.0));//4.0 System.out.println(Math.floor(-3.5));//-4.0 //返回参数中最接近的 long ，其中 long四舍五入为正无穷大。 //Math.floor(a + 1/2) System.out.println(Math.round(-3.5)); //开根 System.out.println(Math.sqrt(9));//3.0 //次方 System.out.println((int)Math.pow(2,3));//8 &#125;&#125; 语句三元操作符 三目运算符 条件表达式 ? result1 : result2 表达式为true,结果就是result1,否则结果是result2 支持无限嵌套的 - 但是不推荐,可读性差 m ? (表达式?result1:result2):result2 if…else.. if语句单独使用场景 123if(条件)&#123;//成立 //code...&#125; {}可以省略的场景 1234if(条件) //code... 如果if&#123;&#125;中的代码只有1行,那么&#123;&#125;可以省略,但是一定要缩进 if…else…使用 1234567891011if(条件)&#123; //条件成立&#125;else&#123; //条件不成立&#125;//如果语句仍然只有一行,&#123;&#125;还是可以省略的if(条件) //codeelse //code.. 多条件分支if…else if…else..if … else… 注意条件是互斥的 123456789if(条件)&#123; //条件成立&#125;else if(条件)&#123; //条件不成立&#125;else if(条件)&#123; //code&#125;else&#123; //code..&#125; if..else语句可以无限嵌套使用 1234567891011121314151617181920212223if(条件)&#123; //条件成立 if(条件)&#123; &#125;else&#123; &#125;&#125;else if(条件)&#123; //条件不成立 if(条件)&#123; //条件成立 &#125;else if(条件)&#123; //条件不成立 &#125;else if(条件)&#123; //code &#125;else&#123; //code.. &#125;&#125;else if(条件)&#123; //code&#125;else&#123; //code..&#125; 习题 买奶茶,每第二杯半价,单价是10元.求总价. 110 5 10 5 10 求某年某月最大天数 switch..case 没有if..else if..else灵活 语法: 123456789101112131415161718switch(变量)/ /byte short int char String enum[枚举类型] //包装类型Byte Short Integer Charactercase 值1: //code [break];case 值2: //code [break]; case 值3: //code [break]; [default: //code.. [break];]&#125; 当switch括号中的变量能够匹配到某个case后面的值的时候,那么就会进入到对应的case中去执行里面的程序 进入到某个case块中执行的过程中,只有遇到break语句才会跳出switch块.如果没有遇到break语句,那么程序会 自动进入到下一个case块中去执行. default语句可以省略,也是可以随便放的,推荐放在末尾.如果switch括号中的变量没有匹配到任何的case后面的值 的时候,那么就会进入到default 循环语句while 属于后置循环 - 先判断循环条件是否成立,如果成立,则进入到循环体中,否则不执行循环. 使用场景:当不知道循环多少次,但是知道循环退出的条件的时候 - 优先选择while循环. 语法: while(条件){ ​ // 循环体… } 1234567891011121314151617181920212223242526272829303132333435363738package tech.aistar.day03;/** * 本类用来演示: while循环* * @author: success * @date: 2021/7/19 10:53 上午*/public class WhileDemo &#123; public static void main(String[] args) &#123; //while可以代替for的使用 //&#x27;a&#x27;-&#x27;z&#x27; char c = &#x27;a&#x27;; while(c &lt;= &#x27;z&#x27;)&#123; System.out.println(c); c++; &#125; System.out.println(&quot;=====&quot;); //&#x27;A&#x27; - &#x27;Z&#x27; int n = 65; while(n&lt;=90)&#123;//退出的条件 System.out.println((char)n); n++; &#125; //1-10 int m = 1; //死循环... while(true)&#123; //死循环的内部一定要有打破循环的语句 - break System.out.println(m); if(m==10) // 循环退出的条件 break; m++; &#125; &#125;&#125; 练习 求俩个数的最大公约数 123456思路:20 12 -&gt; 4 20 % 12 = 8 12 % 8 = 4 8 % 4 = 0 十进制转换二进制 1 for循环 属于后置循环 单层for 123456789101112for(①表达式1;②表达式2;③表达式3)&#123; //④循环体&#125;①表达式1 - 循环过程中的变量的初始化操作.比如int i = 0; - 仅仅只会执行1次.②表达式2 - 循环退出的条件.比如 i&lt;=10 - 至少执行1次③表达式3 - 循环过程中,变量因子的变化.i++ - 有可能是不执行,可能执行 执行顺序①-②[成立]-④-③-②[成立]-④-③..... 怪异的写法 12345for(;;)&#123; //死循环 - break打破循环的语句&#125;三个表达式都是可以任意的省略不写,或者写到其他地方 for循环的复合形态 1234for(同时定义若干个变量;条件;表达式)&#123; //循环体...&#125; 嵌套for循环,嵌套的层数不建议超过三层.嵌套越多,性能越低. 2-1. 内外层无关 - 里面的for选中的使用可以单独执行.没有使用到外面for的循环的变量因子的. 2-2. 内外层相关 - 里面的for使用到了外面for循环的变量因子的 练习 - 打印所有的三位数.三位数由数字1,2,3,4组成.但是不能出现重复的. 每打印4个换一行 1234567891011121314151617181920212223242526272829303132333435363738package tech.aistar.day03; /** * 本类用来演示: * 练习 - 打印所有的三位数.三位数由数字1,2,3,4组成.但是不能出现重复的. * * 每打印4个换一行 * * @author: success * @date: 2021/7/19 2:26 下午 */public class ForExerciseDemo &#123; public static void main(String[] args) &#123; //定义一个计数器 int count = 0; for (int x = 1; x &lt;=4 ; x++) &#123; for (int y = 1; y &lt;=4; y++) &#123; for (int z = 1; z &lt;=4; z++) &#123;// System.out.print(x+&quot;&quot;+y+z); if(x!=y &amp; x!=z &amp; y!=z)&#123; System.out.print(x*100+y*10+z+&quot;\\t&quot;); count++;// if(count % 4==0)&#123;// System.out.println();// &#125; if(count == 4)&#123; System.out.println(); count = 0; &#125; &#125; &#125; &#125; &#125; &#125;&#125; do..while.. 属于前置循环 - 无论循环条件是否成立,优先先进入到循环体中执行一次. 然后再进行判断条件,决定下一次是否再次进入. do{ //循环体… }while(条件); break语句 break可以跳出swtich块 break可以打破它所在的那一层循环 continue语句 出现在循环体中 跳过本轮循环,继续执行下一轮循环. 数组 数组的诞生 - 为了解决单个变量只能存储单个值的缺点. 数组本身也是属于数据结构[数组,栈,堆,树[红黑树],链表,图…] 数组是属于对象类型,数组是存在在JVM内存的堆区,基本类型存储在JVM内存的栈区 数组在内存中一定是一块连续的空间. 数组的大小[长度,数组中存放的数据的个数]一旦确定了,不能改变. 定义数组必不可少的俩个条件 - 元素类型/数组的长度要确定 数组容器 语法123456789101. 元素类型[] 变量名 = new 元素类型[size];//size数组的大小2. 元素类型 变量名[] = new 元素类型[size];//元素类型就是数据类型[8种基本数据类型,以及对象类型]作用 - 元素类型决定了这个数组中可以存放的数据的类型//arr的数据类型是什么?int[] -&gt; 整数型数组// &quot;定义一个长度为3的int型数组&quot;int[] arr = new int[3]; 赋值方式 如果定义了数组,但是没有进行赋值操作,那么系统会默认分配一个默认值 默认值根据元素类型来决定了. byte,short,int,long -&gt; 0 float,double -&gt; 0.0 boolean -&gt; false char -&gt; 空格 对象类型 -&gt; null 先定义数组,然后通过下标一一赋值 1234567int[] arr = new int[3];//数组的下标从[0,数组长度-1]范围//如果下标不在此范围,控制台抛出java.lang.ArrayIndexOutOfBoundsException 数组下标越界异常arr[0] = 10;arr[1] = 10;arr[2] = 10; 定义数组的同时进行赋值 12int[] arr = &#123;3,4,5&#125;; 定义数组的同时进行赋值 12int[] arr = new int[]&#123;3,4,5&#125;; 通过普通for去赋值 12345int[] arr = new int[3];for(int i=0;i&lt;arr.length;i++)&#123; arr[i] = (int)(Math.random()*100+1);&#125; 数组的遍历 通过下标一一取值 12System.out.println(arr[下标]); 数组提供了属性length - 获取数组的长度 通过普通for循环进行遍历 1234for (int i = 0; i &lt; arr.length; i++) &#123; System.out.println(arr[i]);&#125; 使用jdk5.x提供的增强for循环的语法 属于只读的for 12345678int[] arr2 = &#123;3,4,5&#125;;for(元素类型 元素变量:数组变量名)&#123; System.out.println(元素);&#125;for(int e:arr2)&#123;//此处的e不是代表下标,就是代表真正的元素 System.out.println(e);&#125; 通过java.util.Arrays数组工具类中提供的static String toString(数组对象)来遍历数组 拓展 - 数组的内存12345678910111213141516//通过new关键字在Jvm的堆中开辟新的空间01,用来存储这个对象&#123;10,20,30&#125;//然后将这个对象在堆空间中的内存地址赋值给了引用变量arr1[存储在栈]//&quot;结论&quot; - arr1的本质不是对象,只是一个引用变量而已//&quot;结论&quot; - 引用和对象之间的关系// 引用变量中存储的就是对象在堆空间中的内存地址// &quot;气球理论&quot; - 一个引用变量在同一个时刻,只能指向一个对象// - &quot;一个对象可以在同一个时刻被多个引用指向&quot;int[] arr1 = new int[]&#123;10,20,30&#125;;//通过new关键字在Jvm的堆中开辟新的空间02,用来存储这个对象&#123;10,20,30&#125;int[] arr2 = &#123;10,20,30&#125;;arr1 = arr2;//arr1和arr2都是指向第二次创建出来的数组对象 //原来第一次创建出来的对象就成为内存中的垃圾对象 - GC[垃圾回收线程进行回收,释放内存] //&quot;垃圾对象&quot; - 没有任何引用指向的对象 拓展 - 方法的参数传递方式 基本类型采用值传递 对象类型[引用类型]采用地址传递 总结:**Java中只有值传递,没有地址传递.**比较特殊的是String类型[虽然是一个对象类型,但是具备基本类型传递的特点] 数组工具类 java.util.Arrays static String toString(int[] arr);//输出数组 static int[] copyOf(int[] original, int newLength)复制指定的数组，用零截取或填充（如有必要），以便复制具有指定的长度。 static void fill(boolean[] flag,boolean value);//给数组赋统一的值.","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"变量和方法的使用","slug":"变量和方法的使用","date":"2021-07-31T00:46:00.000Z","updated":"2021-08-06T02:37:20.378Z","comments":true,"path":"2021/07/31/变量和方法的使用/","link":"","permalink":"http://example.com/2021/07/31/%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"变量的定义和使用123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104package tech.aistar.day02;import java.util.Date;/** * 本类用来演示: 变量的定义和使用 * * @author: success * @date: 2021/7/16 8:35 上午 */public class VarInitDemo &#123; public static void main(String[] args) &#123; byte b = 127; short s = 100;//使用频率很少 //开发中常用的整数型类型 - int,long //int类型可以初始化的值有哪些 int a = 100; //存储一个二进制,只要0b二进制,1010对应的十进制 //java中的int类型表示的是十进制的数据 //1010 = 1*2^3+1+2^1 = 10 int a1 = 0b1010; System.out.println(a1); //java中使用单引号来表示一个字符 //&#x27;a&#x27;-&gt;char类型-&gt;int类型 //&#x27;a&#x27;对应的ascii码97 //&#x27;A&#x27;对应的ascii码是65 //&#x27;0&#x27;对应的ascii码是48 int a2 = &#x27;a&#x27;; System.out.println(a2); //java中以0开头的代表是八进制 //八进制转换十进制032 = 3*8^1 + 2*8^0 = 26 int a3 = 032; System.out.println(a3);//26 //长整型 - long //int类型-&gt;long类型 long x1 = 100; //推荐定义long的方式采用隐式转换 long x2 = 200L; //jdk7.x提供的 - 为了增强数字的可读性而已. long x3 = 3_14_15_926L; System.out.println(x3);// Date date = new Date(3L*24*60*60*100*1000*1000*2000);// System.out.println(date); //浮点数 - 并不是用来进行精确计算的 //后面java.math.Decimal类解决小数计算的时候精度丢失的问题. double d = 1.75; //推荐定义double double d2 = 5.67D; //float的精度是7或者8 //double的精度是16 //double类型强制转换成float类型 float f = (float) 3.14; //隐式转换 float f2 = 3.14F; System.out.println(f2); //补充 //数字进行计算的时候,都会转换成二进制进行计算 //小数进行计算的时候,还是不可逆的 //0.8999999999999999 System.out.println(2.0-1.1); //0.9 System.out.println(2.0f - 1.1f); //int-&gt;float × //int-&gt;double √ int n = 123456789; float ft = n; System.out.println(ft);//1.23456792E8 double db = n; System.out.println(db);//1.23456789E8 float f3 = 1.234567565f; System.out.println(f3);//1.2345675 //定义布尔类型 boolean flag = true; System.out.println(flag); //最特殊的是char类型 char c = 65; System.out.println(c); &#125;&#125; char类型 java中是使用单引号表示char类型,使用双引号来表示字符串. java的底层的编码是unicode编码,char类型也是采用unicode编码 unicode编码是双字节[16bit],所以存储一个汉字. ascii码和unicode码的关系? 不同的国家,符号表示的方式不同,所以ascii码[0127]不够用.所以unicode[065535]码诞生了,几乎 包含了所有国家的符号,unicode码包含ascii码.char类型在进行计算的时候会转换成ascii码来进行计算. 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package tech.aistar.day02;/** * 本类用来演示: char类型 * * @author: success * @date: 2021/7/16 9:14 上午 */public class CharDemo &#123; public static void main(String[] args) &#123; //java中是使用单引号表示char类型 //char的空间大小也是确定的 char c = &#x27;a&#x27;; System.out.println(c); //十六进制 //由数字0-9或者字母a-f/A-F,字母a代表就是数字10 //cmd - 输入native2ascii -&gt; 输入中文 char c2 = &#x27;\\u34af&#x27;; System.out.println(c2); //char底层采用的是unicode编码,所以存储一个汉字 char c3 = &#x27;星&#x27;; System.out.println(c3); char c4 = 48; System.out.println(c4); int m = 48; char c5 = (char) m; System.out.println(c5); //char类型在进行计算的时候会转换成ascii码来进行计算. //&#x27;a&#x27; = 97,&#x27;A&#x27; = 65,&#x27;0&#x27; = 48 //char类型的计算 - 进阶部分 char n1 = &#x27;a&#x27; + 1;//ok System.out.println(n1);// &#x27;b&#x27; char cc = &#x27;a&#x27;; char nn = (char) (cc + 1); System.out.println(cc); //char-&gt;int int result = &#x27;a&#x27; + &#x27;b&#x27;;//ok System.out.println(result);//195 &#125;&#125; 变量的赋值方式 单个赋值 int a = 10; 通过表达式赋值 1234int a = 10;int b = 20;//表达式:由字面量或者变量以及运算符号组成的合法的语句int result = a + b; 链式赋值 123int a=10,b=20,c=30;//同时声明了三个变量,并且都进行初始化int a,b,c = 100;//此处仅仅是对c进行赋值操作,如果一个局部变量没有进行赋值,那么将不能够使用 可以先定义变量,然后再进行赋值 1234int a;a = 10;a = 20;System.out.println(a); 通过方法进行赋值 - 暂时了解 12345678910int result = getResult(); /** * 自定义了一个方法 - 千万不要将它放在main方法中 * java语法 - 方法体内部是不能够再去定义方法的 * @return 整数 */public static int getResult()&#123; return 100;&#125; 变量的分类 局部变量 - 定义在方法体内部 使用的范围就是在它所在的最近的那个{}中 全局变量 - 定义在方法体外部的变量 生命周期 - 面向对象 常量 使用final修饰的变量 - 常量 - 不可改变的量 语法 1final 数据类型 变量 [= 初始值]; 123456789101112131415161718192021222324252627282930313233343536373839404142434445package tech.aistar.day02;/** * 本类用来演示: 局部变量和全局变量* * @author: success * @date: 2021/7/16 10:04 上午*/public class LocalVarAndGlobalDemo &#123; //定义全部变量 static int c = 100;//静态变量 - 暂不了解 public static void main(String[] args) &#123; //代码块 //局部变量 - 定义在方法体内部 int a= 10; &#123;// 使用的范围就是在它所在的最近的那个&#123;&#125;中 int b = 20; System.out.println(a);//ok System.out.println(b);//ok &#125; //使用的范围就是在它所在的最近的那个&#123;&#125;中 //System.out.println(b);//error //访问全局变量 System.out.println(c); //定义一个常量 - 不可改变的量 final int s = 100; //s = 200; //final - b肯定不可变 final byte b = 100; byte result = b + 1;//ok &#125;&#125; 运算符算术运算符1234567891011121314151617181920211. + java语言中唯一重载[具有多个意义]的运算符 数值之间表示的加法运算,如果出现了&quot;字符串&quot;,表示拼接[后面就会知道拼接效率很低] 2. - 减法 * 乘法 3. / 除法[配合计算过程中需要注意的结果的类型而已] - 取整 4. % 取余/模 /和%结合使用,可以获取某个数字任意位上的数值. 5. += -= *= /= %= 未来知道:开发中尽量不要使用,不是一个原子操作,导致多线程不安全. 底层会判断是否需要进行一个类型的窄化操作[类型的强制转换操作] 6. ++和-- 前++/后++ - 变量本身都会自增1 前--/后-- - 变量本身都会自减1 未来知道:开发中尽量不要使用,不是一个原子操作,导致多线程不安全. 底层会判断是否需要进行一个类型的窄化操作[类型的强制转换操作] 比较运算符123&gt; &lt;= &gt;= &lt; !=比较得到的结果是一个boolean类型即可 逻辑运算符 &amp;&amp; - 逻辑与,短路与.作用不是用来进行计算的,而是用来连接条件[多个,条件表达式(包含比较运算符)]的. 为true - 所有的条件表达式都是返回true 短路的特性:当左边的条件表达式已经能够决定整个结果了,那么后面的条件表达式将不会执行. 推荐:将条件表达式结果最有可能为false的放在最左边 - 提高代码的执行效率. || - 逻辑或,短路或.作用不是用来进行计算的,而是用来连接条件[多个,条件表达式(包含比较运算符)]的. 为true - 只要有一个表达式是true,那么结果就是true 短路的特性:当左边的条件表达式已经能够决定整个结果了,那么后面的条件表达式将不会执行. 推荐:将条件表达式结果最有可能为true的放在最左边 - 提高代码的执行效率. ! - 逻辑非,true成为false,false成为true 位运算符 &amp; - 按位&amp;,非短路与,最主要的作用就是用来计算的,但是可以用来连接条件表达式. ​ 计算:都是1,结果才是1.只要出现1个0,那么结果就是0 ​ 连接条件:为true - 所有的条件表达式都是返回true 12345678910111213141516~~~java10 &amp; 8 = 8 十进制的数不断除以2,直到商为0,然后倒过来取余数 - 101010 / 2 = 商5......余05 / 2 = 商2 ...... 12/ 2 = 1 ........ 01/2 = 0 .........1 1 0 1 0 &amp; 1 0 0 0------------------ 1 0 0 0 -&gt; 对应的十进制8~~~ | - 按位或,非短路或,最主要的作用就是用来计算的,但是可以用来连接条件表达式. 计算:只要存在一个1,结果就是1 连接条件:为true - 只要存在一个条件表达式为true. 1234567810 | 8 = ? 1 0 1 0| 1 0 0 0------------------ 1 0 1 0 -&gt; 对应的十进制10 异或^ 作用:进行计算的 - 相同为0,不同为1 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616210 ^ 8 = 2 1 0 1 0 | 1 0 0 0------------------ 0 0 1 0 -&gt; 2 10 ^ 8 ^ 8 = 10```java0 0 1 0 1 0 0 0----------------- 1 0 1 0 -&gt; 10```结论:一个数字连续异或同一个数字俩次结果是它本身.可以进行加密和解密的操作​~~~java笔试题: 交换俩个变量的值,不允许出现第三方变量package tech.aistar.day02; /** * 本类用来演示: 笔试题: 交换俩个变量的值,不允许出现第三方变量 * * @author: success * @date: 2021/7/16 11:09 上午 */public class ChangeVarValue &#123; public static void main(String[] args) &#123; //1. 使用第三方变量 int a = 10; int b = 20; int temp = a; a = b; b = temp; System.out.println(&quot;a:&quot;+a); System.out.println(&quot;b:&quot;+b); //一个数字连续异或同一个数字俩次结果是它本身. int m = 100; int n = 200; m = m ^ n;//m = 100 ^ 200 n = m ^ n;//n = 100 ^ 200 ^ 200 = 100 m = m ^ n;//m = 100 ^ 200 ^ 100 = 200 System.out.println(&quot;m:&quot;+m); System.out.println(&quot;n:&quot;+n); //自创写法(success独家的) - 不推荐写 - 防止菜鸟看不懂 int x = 100; int y = 200; //y = 100 ^ 200 ^ 200 = 100 y = x ^ (x = y) ^ y; System.out.println(&quot;x:&quot;+x); System.out.println(&quot;y:&quot;+y); &#125;&#125; 取反~,1变0,0变成1 补码 - 负数在计算机中的表现形式就是以补码的形式存在的 12345678910111213141516171819202122232425262728293031补码 = 反码 + 1;反码 = 原码符号位不变,其余位依次取反符号位 - 最高位代表的是符号位.1代表的是负数,0代表的是正数.反码本身没有意义的,它的存在就是为了计算补码正数的补码,反码,原码都是它本身.计算一下:-10的二进制是多少?-10的补码是多少? 计算步骤: 1. -10原码 10000000 00000000 00000000 00001010 2. -10的反码 10000000 00000000 00000000 00001010 11111111 11111111 11111111 11110101 3. -10的补码 = 反码+1 11111111 11111111 11111111 11110101 + 1 ------------------------------------- 11111111 11111111 11111111 11110110 -&gt; -10的二进制 计算~900000000 00000000 00000000 0000100111111111 11111111 11111111 11110110 -&gt; ~9取反的结果 -10 = ~9 结论:-(x+1) = ~x 移位操作 笔试题 - 计算性能最高的操作,jdk源码里面很多都是移位操作 1234567891011121314151617181920&lt;&lt; 向左移动2&lt;&lt;2 =&gt; 0010 &lt;&lt; 2 = 1000 = 8原题:请你用最高性能的方式计算出2的3次方.&gt;&gt; 带符号的右移动,向右移动多少位,那么就在最高位补符号位-10 &gt;&gt; 2 = -311111111 11111111 11111111 11110110 &gt;&gt; 211111111 11111111 11111111 11111101 -&gt; 负数的二进制,最高位是100000000 00000000 00000000 00000010 取反 ~2=-3 &gt;&gt;&gt; 不带符号的右移动,向右移动多少位,就在最高位补0 -10 &gt;&gt;&gt; 2 11111111 11111111 11111111 11110110 &gt;&gt; 2 00111111 11111111 11111111 11111101 -&gt; 计算出十进制 01000000 00000000 00000000 00000000 - 3----------------------------------------- 1073741821 练习-15&gt;&gt;2 -15&gt;&gt;&gt;2 -15 = ~14 11111111…… 0001 &gt;&gt;&gt; 2 00111111 11111111 11111111 11111101 00111111 11111111 11111111 1111100 = 1073741820 解决精度丢失BigDecimal api: java.math 构造方法 BigDecimal(double val) BigDecimal(String val);//处理小数精度的问题 常用方法 BigDecimal add(BigDecimal augend)返回 BigDecimal ，其值是 (this + augend) ，其标为 max(this.scale(), augend.scale()) 。 BigDecimal divide(BigDecimal divisor) 除法 BigDecimal multiply(BigDecimal multiplicand) 乘法 BigDecimal subtract(BigDecimal subtrahend) 减法 笔试题 在java开发中如何处理小数精度丢失的问题 需要使用到的是BigDecimal(String val); 123456789101112131415161718192021222324package tech.aistar.day12;import java.math.BigDecimal;/** * 本类用来演示: 处理小数* * @author: success * @date: 2021/8/4 9:27 上午*/public class BigDecimalHandlerFloatDemo &#123;public static void main(String[] args) &#123; BigDecimal d1 = new BigDecimal(&quot;0.1&quot;); BigDecimal d2 = new BigDecimal(String.valueOf(0.2)); BigDecimal result = d1.add(d2); //BigDecimal-&gt;double/String double resultDouble = result.doubleValue(); System.out.println(resultDouble); System.out.println(result);&#125;&#125; BigInteger 笔试题 - 递归算法求阶乘 构造:BigInteger(String val); 12345678910111213public class BigIntegerDemo &#123;public static void main(String[] args) &#123; System.out.println(test(6));&#125;public static BigInteger test(int n)&#123; if(n==1) return BigInteger.ONE; BigInteger current = new BigInteger(String.valueOf(n)); return current.multiply(test(n-1));&#125;&#125; 方法 - Method 非常重要,如果没有跟上,直接出局. 相当于其他语言中函数function,功能是用来封装代码的逻辑. 把一段代码封装到方法中,方便以后复用,提高了代码的可维护性. 语法12345修饰符 返回类型 方法名([参数列表]) [throws 可抛出的异常列表]&#123;..方法体...&#125;现阶段:修饰符 返回类型 方法名([参数列表])&#123;..方法体...&#125; 修饰符访问修饰符 作用:就是决定了这个方法可以被调用的范围. public - 公开的,公共的.如果一个方法被public进行了修饰,那么代表这个方法可以在别的地方被调用. private - 私有的,只能在当前类内部被调用 - 体现了”封装性” - 不对外公开的. 默认的 受保护的 特殊修饰符[超纲的内容] static - 静态的 如果使用static修饰的方法 - 静态方法 如果没有使用static修饰的方法 - 非静态方法 是否为静态的方法决定了这个方法被调用的方式. 返回类型 有返回类型 可以是八种基本数据类型,也可以是对象类型[内置对象类型或者自定义对象类型] 方法体的最终的出口一定有return 返回值. 123456789return 作用1 - 返回方法最终的执行结果 作用2 - 用来结束整个方法正常情况方法的返回类型是什么,返回值的结果的类型也应该是什么非正常情况 - 支持类型的自动转换和强制类型转换的.调用的时候 - 需要使用数据类型和变量来接受这个方法调用的结果. 方法的返回类型是什么,就用什么类型去定义.当然也是支持类型的转换 无返回类型 - void 12345678910不需要使用return + 返回值;但是void的方法体中也是可以存在return语句.就是用来结束整个方法的. if(条件)&#123; //.... return;&#125;//... 该如何选择? 如果某个方法的执行结果可能在另外一个地方被使用到,那么一定要定义成有返回类型 如果一个方法仅仅是为了输出,只要定义void 1234567891011121314151617public static int test01(int m,int n)&#123; //code... return m和n的最大公约数 //System.out.println(公约数)&#125;//int m = test01(20,12);//m-&gt;4public static int test02(int m,int n)&#123; int 公约数 = test01(m,n); return m*n/公约数;&#125;int n = test02(20,12);//n-&gt;60=20*12/4=60 方法名 参考变量名的命名规则 - 一模一样 标识符 - 给类,包,变量,方法取的名称 参数列表 无参列表 带参列表 - 固定长参数列表 12345//此处的age和name就是形参public static void add(int age,String name)&#123; System.out.println(age+&quot;:&quot;+name);&#125; 可变长列表 1234567//可变长列表public static void sub(int... arr)&#123;//[I@330bedb4 - 数组 for (int i = 0; i &lt; arr.length; i++) &#123; System.out.println(arr[i]); &#125;&#125; 参数的分类: 形参 - 定义在方法的参数列表中的参数.目的就是告诉这个方法的调用者在调用这个方法时候需要传入的参数[个数以及类型] ​ 没有实际的值的 实参 - 方法的调用者在调用这个方法的时候传入的真正的参数 - 真正的值的 该如何定义方法 方法体内部不能够再去定义方法了 main方法仍然是程序的主入口. 自定义的方法希望能够被调用,那么最终肯定是在main方法中进行调用的 方法的调用方式 取决于这个方法是静态的还是非静态的 - static 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package tech.aistar.day02.method;/** * 本类用来演示: 方法的定义* * @author: success * @date: 2021/7/16 2:20 下午*/public class MethodHelloDemo &#123; /** * main - 仍然是程序的主入口 * @param args */ public static void main(String[] args) &#123; //类中的方法 - 类里面的成员 //static - 静态的成员被初始化的时机 //静态方法什么时候被初始化的? - 当JVM加载类进内存的时候,就会立即给所有的静态的成员分配空间以及初始化 //在这个阶段,压根就没有对象的概念,只有类. //结论 - 静态的成员属于类的,并且初始化的时机有且1次. //属于谁,就由谁去调用! //1. 调用静态的方法,直接通过类.方法名([参数]) //类 - 该静态方法所在的当前类 MethodHelloDemo.sub(); //non-static -&gt; 非静态的成员被初始化的时机? //当遇到创建对象的语法.每次创建对象的时候,都会给各自的非静态成员分配空间以及初始化 //如果没有创建对象,就不会初始化这些非静态成员. //结论: 非静态成员是属于对象的.属于谁,由谁调用. //2. 非静态方法 - 通过对象去调用 //调用哪个类中的方法,就去创建哪个类的对象 //后面的OO知识点 -&gt; 类名 变量 = new 类名(); //创建了一个 MethodHelloDemo对象,m就是对象名 MethodHelloDemo m = new MethodHelloDemo(); m.add(); &#125; /** * 定义了公开的非静态的无返回类型的方法 */ public void add()&#123; System.out.println(&quot;add...&quot;); &#125; /** * 定义了公开的静态的无返回类型的方法 */ public static void sub()&#123; System.out.println(&quot;sub...&quot;); &#125;&#125; 静态方法中只能够直接调用静态方法 非静态方法中可以直接调用非静态方法以及静态方法 通用的原则 - 类名.静态方法或者对象.非静态方法 静态方法属于类拥有的,非静态方法属于对象拥有的 静态的方法是jvm加载类进内存的时候就会立即被分配空间以及初始化,并且机会仅仅只有1次. 而非静态方法必须是等到创建对象的时候,才会被分配空间以及初始化 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576package tech.aistar.day02.method;/*** 本类用来演示:** @author: success* @date: 2021/7/16 2:43 下午*/public class StaticDetailDemo &#123;//定义了全局变量//属性,方法 =&gt; 成员//非静态的属性int n = 10;//等创建对象的时候,才会分配空间和初始化//静态属性-初始化的时机优先于静态方法static int m = 100;public static void main(String[] args) &#123; //此时n还未初始化 //System.out.println(n);//编译错误 //System.out.println(m); //调用test03 - 非静态的 StaticDetailDemo s = new StaticDetailDemo(); s.test03(); System.out.println(s);&#125;//非静态的public void test01()&#123; System.out.println(&quot;test01..&quot;);&#125;//静态的public static void test02()&#123; int n = 10; System.out.println(&quot;test02...&quot;); //自定义的方法中是可以调用自己自定义的方法的 //1. 另外一个静态方法test04 StaticDetailDemo.test04(); //静态方法中可以直接调用静态方法 test04(); //2. 另外一个非静态方法test03 StaticDetailDemo s1 = new StaticDetailDemo(); s1.test03();&#125;public void test03()&#123; //static int n = 20;//非静态方法中不允许定义静态的局部变量 System.out.println(&quot;test03..&quot;); //非静态方法中调用静态方法 - 类名.方法 //StaticDetailDemo.test04();//ok test04();//ok //非静态方法中直接调用另外一个非静态方法呢??? - 肯定是需要一个对象去调用. test01();//ok //实际上省略了一个关键字this //this代表的是当前对象 //当前对象 - 调用该方法[test03]的对象 //this.test01(); System.out.println(this);&#125;public static void test04()&#123; System.out.println(&quot;test04..&quot;);&#125;&#125; 方法调用补充 方法的调用者和方法的定义者在同一个类中. 方法的调用者和方法的定义者不在同一个类中,但是仍然在同一个package中. 只能使用通用的原则类名.静态方法或者对象.非静态方法 方法的调用者和方法的定义者是存在于不同包下的不同类中. 必须先通过import关键字进行导包操作. 使用jdk中的类的时候,除了java.lang包下的不需要手动import,其余包下的都需要先import 递归算法 - 错误的写法 - 方法内部直接调用自己 private 和 public 该选择使用12345678910111213141516171819202122232425262728public class 牛叉的工具类&#123; public static void 牛叉的方法01()&#123; //肯定是会被外面的人调用的... //内部的代码的业务逻辑非常负责,由很多小的功能组成的 小的牛叉方法01(); //... //.. //... &#125; private static void 小的牛叉方法01()&#123; //专门封装了小的功能. &#125; public static void 牛叉的方法02()&#123; //肯定是会被外面的人调用的... //内部的代码的业务逻辑非常负责,由很多小的功能组成的 小的牛叉方法01(); //... //... //... &#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"Java发展史和基本数据类型","slug":"Java发展史和基本数据类型","date":"2021-07-31T00:44:50.000Z","updated":"2021-09-24T00:27:45.457Z","comments":true,"path":"2021/07/31/Java发展史和基本数据类型/","link":"","permalink":"http://example.com/2021/07/31/Java%E5%8F%91%E5%B1%95%E5%8F%B2%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"Java能做什么 传统的项目 - 简单的,公司内部使用的,不会存在高并发的问题. 教务管理系统,OA自动化办公系统,CRM客户关系管理系统,ERP企业资源计划系统 B2C - 典型的电子商务模式,涉及到高并发的业务 企业2客户 - 企业卖自己的服务或者产品 C2B2C - 新型的模式 - 淘宝 平台 - 对双方进行监管 卖家 买家 大数据 - 一定是对业务非常熟悉[数据分析,数据非常敏感] Java的历史 原先是属于SUN公司[Stanford University Network 斯坦福网络大学] Sun Microsystem - 太阳微电子公司 后来在2010年10月份被Oracle公司[出名的产品-oracle数据库 - NO.1] 74亿美金收购 - www.oracle.com 前身Oak语言[橡树],印度尼西亚的爪哇岛[咖啡豆 - javabean] 诞生于1995年5月23日,96年正式推出jdk1.0版本. 商用的jdk版本 - jdk8.x , jdk11.x ,jdk16.x java之父 - james gosling 詹姆斯 高斯林 Java支持的三个平台 原先的名称j2se , j2ee, j2me JavaSE - Java Standard Editional - Java标准版 适合做桌面应用程序[维护比较麻烦,服务器端如果更新,客户端需要更新],包含了java里面的基础的语法,核心 JavaEE - 2018年 - JakartaEE - 雅佳达EE - Java Enterprise Editional - Java企业版 是一套技术的规范的体系.不是一门具体的技术.里面包含了13种核心技术 比如jdbc,servlet等遵守javaee的规范.现在javaee里面的核心技术已经使用不多了 现在普遍都在使用spring全家桶中的技术. 适合做web应用程序[web网站] JavaME - Java Micro Editional - Java微型版,适合做手持设备 - “不用” 检测一下jdk的环境变量是否配置成功 打开终端,输入cmd - 输入java -version 1234admindeMacBook-Pro:Desktop admin$ java -versionjava version &quot;1.8.0_66&quot;Java(TM) SE Runtime Environment (build 1.8.0_66-b17)Java HotSpot(TM) 64-Bit Server VM (build 25.66-b17, mixed mode) 环境变量的配置 Java.zip - 解压缩 - 比如放在D盘 所有的软件不要放在中文目录下,不要放在带有特殊符号的目录下[programe files(x86)] 尽量不要放在C盘[权限的问题,拒绝你的访问的] 桌面 - 右击计算机 - 属性 - 高级系统设置 - 环境变量(N) - 定位到系统变量 新建 变量名:JAVA_HOME 变量值:jdk1.8.0_66的绝对路径 确定 找到内置的变量名Path - 编辑 - 新建 %JAVA_HOME%\\bin 关闭刚所有打开的设置窗口,重新打开终端[黑窗口] win+r - cmd -&gt;输入 java -version Java语言特点 简单 可移植性 面向对象 - 核心 与平台无关性[跨平台性,跨操作系统平台] 安全性 - 本身是属于强类型的语言.在编译期间就要确定数据的类型. JDK和JRE和JVM 三者之间的区别 - 简单题 - 笔试 JDK - Java Development Kit - Java开发工具包,针对于开发者的.包含了很多开发工具 比如java.exe , javac.exe, javadoc.exe , jar.exe等 JDK中是包含JRE的 JRE - Java Runtime Enviroment - Java运行时环境,包含了很多核心的内库. 针对于使用java语言开发出来软件的用户.如果一个用户仅仅想运行一个java程序的话 那么计算机中只需要安装jre即可. JRE包含JVM JVM - Java Virtual Machine - Java虚拟机 - 后期重点详细介绍jvm[笔试的大头 - 内存模型] jvm本身就是用C语言编写的 - jvm的源码通读一遍. java程序并不是直接在计算机中进行跑的.而是在虚拟机上执行的.虚拟机是安装在操作系统上的. 注意的是java语言是跨平台的[使用java语言编写的程序可以运行在不同的os上],但是jvm不是跨平台的 不同的操作系统需要安装不同的jvm Javac.exe：编译java程序（编译器）java.exe:执行编译好的.class文件（解释器）Javadoc.exe:用于生产Java文档（Java文档工具）Jdb.exe(全程：jdk debug)：调试Java程序（调试器）Javaprof.exe:用于剖析程序（剖析工具） JVM：JVM 是 Java Virtual Machine（Java 虚拟机）的缩写，它是整个 java 实现跨平台的最核心的部分，所有的 java 程序会首先被编译为.class 的类文 件，这种类文件可以在虚拟机上执行，也就是说 class 并不直接与机器的操 作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释 给本地系统执行。JVM 是 Java 平台的基础，和实际的机器一样，它也有自 己的指令集，并且在运行时操作不同的内存区域。 JVM 通过抽象操作系统 和 CPU 结构，提供了一种与平台无关的代码执行方法，即与特殊的实现方 法、主机硬件、主机操作系统无关。JVM 的主要工作是解释自己的指令集（即 字节码）到 CPU 的指令集或对应的系统调用，保护用户免被恶意程序骚 扰。 JVM 对上层的 Java 源文件是不关心的 结构和操作系统有关，是运行 Java 程序必不可少的（除非用其他一些编译 环境编译成.exe 可执行文件……），JRE 的地位就象一台 PC 机一样，我们写 好的 Win32 应用程序需要操作系统帮我们运行，同样的，我们编写的 Java 程序也必须要 JRE 才能运行。 JDK：JDK 是 java development kit（java 开发工具包）的缩写。每个学 java 的人都会先在机器上装一个 JDK，那 让我们看一下 JDK 的安装目录。在目 录下面有六个文件夹、一个 src 类库源码压缩包、和其他几个声明文件。其 中，真正在运行 java 时起作用的是以下四个文件夹：bin、include、lib、jre。 现在我们可以看出这样一个关系，JDK 包含 JRE，而 JRE 包含 JVM。 bin : 最主要的是编译器(javac.exe) include : java 和 JVM 交互用的头文件 lib：类库 jre:java 运行环境 （注意：这里的 bin、lib 文件夹和 jre 里的 bin、lib 是不同的）总的来说 JDK 是用于 java 程序的开发,而 jre 则是只能运行 class 而没有编译的功能。 eclipse、idea 等其他 IDE 有自己的编译器而不是用 JDK bin 目录中自带的， 所以在安装时你会发现他们只要求你选 jre 路径就 ok 了。 JDK,JRE,JVM 三者关系概括如下： jdk 是 JAVA 程序开发时用的开发工具包，其内部也有 JRE 运行环境 JRE。 JRE 是 JAVA 程序运行时需要的运行环境，就是说如果你光是运行 JAVA 程 序而不是去搞开发的话，只安装 JRE 就能运行已经存在的 JAVA 程序了。JDk、 JRE 内部都包含 JAVA 虚拟机 JVM，JAVA 虚拟机内部包含许多应用程序的 类的解释器和类加载器等等。 HelloWorld程序 java的基础单元是类class 类的命名 - 标识符的命名 只能由字母,数字,下划线,$符号组成,但是不能以数字开头 推荐使用”大驼峰”命名规则,单词首字母必须要大写.其余单词小写 不能是jdk中内置的对象类型[String,System] 不能是java中的一些关键字,关键字[java语言赋予了这些单词具备一定的语法含义] byte,short,int,long,float,double,char,boolean,if,for,else,while,break,continue,class, public,private,protected等 不能是java中的保留关键字 - goto,const 不推荐使用中文,防止出现乱码问题. 不推荐使用中文的拼音 推荐见名知意 不能是以下三个字面量 - true,false,null 代码 在D盘根目下新建一个文件HelloWorld.java java的源文件就是以.java为后缀的文件 记事本打开HelloWorld.java文件 12345678910111213141516171819//编程语言中,只要出现了符号,一定必须都是英文输入法下的//整体的结构//java是以类作为基础的单位的 - 定义类//关键是class//类的名称要和文件的名称高度保持一致//&#123;&#125; - block - 块 - 代码块public class HelloWorld&#123;//1. 类 //规范 - 缩进四个空格 //定义一个main方法 - 程序的&quot;大门&quot; //运行该程序的时候,jvm就会自动寻找main方法,然后进入到这个main //方法中去执行 //今天先记住语法 public static void main(String[] args)&#123;//2. 方法 //方法体,现阶段代码一定是放在方法体内部的. //jdk中提供了内置的对象[拥有一些功能],提供好了,开发者就可以直接使用 //java.lang.System类 - 向控制台输出一句话 System.out.println(&quot;HelloWorld&quot;);//3. 具体的程序 &#125;&#125; java源代码是不能够直接执行的.因为计算机是不识别java语言程序的. 需要对.java为后缀的源文件进行一个编译操作.如果一旦语法发生了问题,都会导致编译失败. 假设HelloWorld.java文件是放在D盘根目录下,需要打开终端,然后通过dos命令进入到D盘 12C:/User/admin&gt;d:D:/&gt;javac HelloWorld.java 效果,javac.exe工具其实就是在调用jdk中的编译器,作用:就是.java源文件编译成.class字节码文件 思考如何运行一个java程序呢? 利用java.exe 1D:/&gt;java HelloWorld 过程 编写.java源代码 javac.exe - 编译 java.exe - 执行 Java程序的执行的原理 12345678.java源文件 -&gt; 经过jdk中的编译器,成为.class字节码文件 -&gt; 经过jvm中的解释器[进行逐行翻译(解释)]-&gt; 机器能够识别的符号java属于解释型的语言,&quot;JVM把它YY成以.class字节码为指令的CPU&quot;编译型语言 - C语言,将这个语言编写的程序直接编译成计算机能够执行的程序.比如C语言写的代码可以直接编译成可执行文件 xx.exeC语言执行的性能高于java语言(每次执行都会经过jvm解释器进行解释) 集成开发环境 eclipse[日食] - 免费的,IBM公司的产品[收购SUN公司的] idea - 最好的,收费的 d:/aistar/j03s_student Java中的包-package 包是用来管理类的.包的本质就是一个文件夹.包对于类的作用相当于文件夹对于文件的作用. 包的命名规则 2-1. 推荐全部采用小写字母,如果出现多个单词,请你用.隔开,.隔开的每个部分都是一个目录 2-2. 包的命名推荐采用公司的域名倒置[唯一性] + 项目代号 ​ com.baidu.car tech.aistar 2-3. 不用采用java或者javax开头 - 因为jdk中的内置的类和拓展的类都是在java或者javax包中. 一旦创建了package,需要在类文件的首行采用package关键字来声明包. java中三种注释 单行注释 // ctrl+/ 添加/取消注释 多行注释 12345/* * * 多行注释的内容 - 注释的内容是不会经过jdk的编译器的 * */ 文档注释 可以生成文档树 123456/*** 放在类上面* 放在方法上**/ main方法细节12345678910public[公开的,公共的] static[静态的] - 都是属于后期学习OO中的修饰符修饰符在使用的时候,之间是没有顺序的.public static void main(String[] args)&#123;...&#125; //okstatic public void main(String[] args)&#123;...&#125; //ok//jdk8中方法的参数支持可变长参数public static void main(String... args)&#123;...&#125; //ok//args - 我们传给虚拟机的参数 输出语句 System.out.println(); // 换行 12System.out.print(&quot;\\n&quot;); \\n和\\r 123456789101112131415161718192021222324252627package tech.aistar.day01; /** * 本类用来演示: \\n \\r * * @author: success * @date: 2021/7/15 3:18 下午 */public class NrDemo &#123; public static void main(String[] args) &#123; //相当于是System.out.println(&quot;hello&quot;); System.out.print(&quot;hello\\n&quot;);//输出之后不换行 System.out.println(&quot;world&quot;); // \\n - 当输出完毕之后,光标停在下一行的起始位置 - 换行 // \\r - 当输出完毕之后,光标停在当前行的起始位置 回车 // \\n\\r 诞生的场景就是早期的打字机 //外面的终端执行的结果是 - veyy √ //伪终端显示的结果是 - ve System.out.println(&quot;Loyy\\rve&quot;); &#125;&#125; 特殊字符 \\ 是代表转义字符 \\n - 当输出完毕之后,光标停在下一行的起始位置 - 换行 \\r - 当输出完毕之后,光标停在当前行的起始位置 回车 \\b - 退格 \\t - 制表符,相当于tab键,默认是空4格 双引号 12\\&quot; 单引号 12\\&#x27; 单个\\ 12\\\\ 12345678910111213141516171819202122232425262728293031package tech.aistar.day01;/** * 本类用来演示: 特殊字符 * * @author: success * @date: 2021/7/15 3:35 下午 */public class SignDemo &#123; public static void main(String[] args) &#123; //\\b - 退格 System.out.println(&quot;xxx\\byy&quot;);//xxyy //\\t - 制表符,相当于tab键,默认是空4格 System.out.println(&quot;hello\\tworld&quot;); //输出 james:&quot;success is good boy&quot; //双引号 System.out.println(&quot;james:\\&quot;success is good boy\\&quot;&quot;); // \\ 转义含义 //单个\\ System.out.println(&quot;D:\\\\temp\\\\news&quot;); //输出\\\\ System.out.println(&quot;\\\\\\\\&quot;); &#125;&#125; 变量 编程的核心就是从定义变量开始 java语言是一个强类型的语言[在编译期间必须要确定好数据的类型],javascript弱类型的语言 变量的本质 - “内存中某块区域的名称”,编程的任务就是对数据进行crud+数据分析的操作. 但是前提是数据需要先进行存储[内存,磁盘(文件,db数据库) - JVM内存 “JVM对字节码文件进行解释的前奏工作 - 把这个字节码文件加载到自己的内存中,java只能操作内存中的数据” java中是如何定义和存储简单的这些数据呢? 就是通过数据类型以及变量来定义和存储的. 数据类型 java中的数据类型有两大块 基本数据类型(8种) - 编程思想中将void归纳为第9种 数据类型决定了存储数据的这块空间的大小,并且这个大小一旦确定了,将不能够改变了. 对象类型(无数种) 2-1. 内置对象类型 - System,String - Jdk中提供的类 2-2. 自定义对象类型 - 自己定义的那些类HelloWorld,SignDemo 八种基本数据类型 名称 大小 范围 默认值 byte 字节 占1个字节8bit -128~127 0 short 短整型 占2个字节16bit -2^15~2^15-1 0 int 整型 占4个字节32bit -2^31~2^31-1 0 long 长整型 占8个字节64bit -2^63~2^63-1 0 float 单精度浮点数 占4个字节32bit +-(3.4*10^38) 0.0 double 双精度浮点数 占8个字节64bit +-(1.798*10^308) 0.0 char 字符 占2个字节16bit 0~65535 ‘\\u0000’空格 boolean 布尔类型 占1个字节8bit true/false false 变量的定义 变量的命名的规范请你参考类的命名规范,除了类的命名采用的”大驼峰”,而变量命名采用的是”小驼峰” “小驼峰” - 首字母小写,其余每个单词的首字母大写.比如studentAge 语法 12数据类型 变量名 [= 变量值]; 剖析变量的背后1234567891011121314151617181920212223242526272829303132333435363738394041package tech.aistar.day01;/** * 本类用来演示: 变量入门 * * @author: success * @date: 2021/7/15 3:43 下午 */public class VarDemo &#123; public static void main(String[] args) &#123; //数据类型 变量名 [= 变量值]; byte b = 10; //代码的背后 - 埋了个&quot;种子&quot;,&quot;发芽&quot; //1. 数据肯定是存储在JVM内存中的 //2. 定义在方法内部的变量 - 局部变量[JVM的栈区] //3. 局部变量的生命周期是伴随着方法(main)的调用的开始和结束 //讲解的本质 //流程 //1. JVM加载VarDemo.class到内存 //2. JVM找到main方法想要去执行里面的程序 //3. 此处需要申请一块区域来保存数据10 // 3-1. 区域的大小由前面的数据类型来决定的 - int类型 - 区域4个字节32bit的大小 // 3-2. 栈里面的区域的大小一旦被确定了,就不能改变 - 肯定有的时候会有内存的浪费 // 3-3. 虽然空间浪费了,但是读取的效率会提高 - 典型的&quot;以空间换时间&quot; //4. 只要是内存中的空间,这个空间必然会有一个地址,所以变量的存在是为了给这个区域取了个名字 // 变量是为了方便用户来通过它访问到这个空间中存储的具体的那个值的 //把整数10赋值给一个int类型的变量a int a = 10; System.out.println(a); // == 比较的就是&quot;坑 - 区域&quot;里面存储的数据 System.out.println(b == a);//true &#125;&#125; 数据类型的转换 常识规定 a. java中看到一个整数,默认就是int类型 b. java中看到一个小数,默认就是double类型 c. 大的数据类型和小的数据类型进行计算的时候,计算得到的结果是偏向类型大的一方. 自动转换 小的数据类型可以自动转换成大的数据类型. byte-&gt;short-&gt;int-&gt;long char-&gt;int int-&gt;double 强制类型转换 大的数据类型转换成小的数据类型的时候,需要进行强制类型转换的操作 1234MaxType 变量1 = 值1;MinType 变量2 = (MinType)变量1; 隐式转换 12345678int-&gt;long整数后面添加l/L double-&gt;float小数后面加上f/F 推荐在double后面加上d/D - 提高语义","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-07-12T06:46:45.932Z","updated":"1985-10-26T08:15:00.000Z","comments":true,"path":"2021/07/12/hello-world/","link":"","permalink":"http://example.com/2021/07/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"前端","slug":"前端","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/"},{"name":"框架","slug":"框架","permalink":"http://example.com/categories/%E6%A1%86%E6%9E%B6/"},{"name":"mybatis","slug":"mybatis","permalink":"http://example.com/categories/mybatis/"},{"name":"JDBC","slug":"JDBC","permalink":"http://example.com/categories/JDBC/"},{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"},{"name":"反射","slug":"反射","permalink":"http://example.com/categories/%E5%8F%8D%E5%B0%84/"},{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"},{"name":"设计模式","slug":"设计模式","permalink":"http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"面试","slug":"面试","permalink":"http://example.com/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://example.com/tags/Vue/"},{"name":"框架","slug":"框架","permalink":"http://example.com/tags/%E6%A1%86%E6%9E%B6/"},{"name":"mybatis","slug":"mybatis","permalink":"http://example.com/tags/mybatis/"},{"name":"JDBC","slug":"JDBC","permalink":"http://example.com/tags/JDBC/"},{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"},{"name":"反射","slug":"反射","permalink":"http://example.com/tags/%E5%8F%8D%E5%B0%84/"},{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"设计模式","slug":"设计模式","permalink":"http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"面试","slug":"面试","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95/"},{"name":"集合","slug":"集合","permalink":"http://example.com/tags/%E9%9B%86%E5%90%88/"},{"name":"equals()和hashCode()方法","slug":"equals-和hashCode-方法","permalink":"http://example.com/tags/equals-%E5%92%8ChashCode-%E6%96%B9%E6%B3%95/"}]}